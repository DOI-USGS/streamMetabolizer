[{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/CODE_OF_CONDUCT.html","id":"contributor-code-of-conduct","dir":"","previous_headings":"Code of Conduct","what":"Contributor Code of Conduct","title":"NA","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.0.0.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/CODE_OF_CONDUCT.html","id":"usgs-code-of-scientific-conduct","dir":"","previous_headings":"Code of Conduct","what":"USGS Code of Scientific Conduct","title":"NA","text":"Additionally, contributions – interactions surrounding – project abide USGS Code Scientific Conduct DOI Code Development Conduct.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/CONTRIBUTING.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"NA","text":"Contributions welcome community. Questions can asked issues page. creating new issue, please take moment search make sure similar issue already exist. one exist, can comment (simply even just :+1:) show support issue. direct contributions like considered incorporation project, can fork repository submit pull request review.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/DISCLAIMER.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"NA","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/ISSUE_TEMPLATE.html","id":"what-you-saw-on-your-computer","dir":"","previous_headings":"","what":"What you saw on your computer","title":"NA","text":"Include code ran (minimal example) console output, errors, warnings. Include data file needed.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/ISSUE_TEMPLATE.html","id":"session-information","dir":"","previous_headings":"","what":"Session information","title":"NA","text":"Run following code line (sessionInfo() doesn’t work) paste output.","code":"> devtools::session_info()"},{"path":"http://usgs-r.github.io/streamMetabolizer/LICENSE.html","id":"license","dir":"","previous_headings":"","what":"License","title":"NA","text":"Unless otherwise noted, project public domain United States contains materials originally came United States Geological Survey, agency United States Department Interior. information, see official USGS copyright policy https://www.usgs.gov/information-policies--instructions/copyrights--credits Additionally, waive copyright related rights work worldwide CC0 1.0 Universal public domain dedication.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/LICENSE.html","id":"cc0-10-universal-summary","dir":"","previous_headings":"License","what":"CC0 1.0 Universal Summary","title":"NA","text":"human-readable summary Legal Code (read full text).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/LICENSE.html","id":"no-copyright","dir":"","previous_headings":"License > CC0 1.0 Universal Summary","what":"No Copyright","title":"NA","text":"person associated work deed dedicated work public domain waiving rights work worldwide copyright law, including related neighboring rights, extent allowed law. can copy, modify, distribute perform work, even commercial purposes, without asking permission.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/LICENSE.html","id":"other-information","dir":"","previous_headings":"License > CC0 1.0 Universal Summary","what":"Other Information","title":"NA","text":"way patent trademark rights person affected CC0, rights persons may work work used, publicity privacy rights. Unless expressly stated otherwise, person associated work deed makes warranties work, disclaims liability uses work, fullest extent permitted applicable law. using citing work, imply endorsement author affirmer.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Data Preparation","text":"properly formatted input dataset streamMetabolizer models : exactly right data columns column names. Call metab_inputs() see requirements specific model type. data right units. See ?mm_data definitions column. input dataset may optionally include: partial days; partial days automatically excluded, don’t need . non-continuous days; current streamMetabolizer models require continuous days.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Data Preparation","text":"example properly formatted input dataset available streamMetabolizer package - data French Creek Laramie, WY, courtesy Bob Hall. Inspect dimensions column names data. can get additional information expected format data ?metab help document. preparing data, make sure class units data match specified document.","code":"library(streamMetabolizer) dat <- data_metab(num_days='3', res='15') dim(dat) ## [1] 288   6 dat[c(1,48,96,240,288),] # some example rows ##               solar.time DO.obs   DO.sat depth temp.water    light ## 5689 2012-09-18 04:05:58   8.41 9.083329  0.16       3.60   0.0000 ## 5830 2012-09-18 15:50:58   8.36 7.403370  0.16      11.80 925.1370 ## 5974 2012-09-19 03:50:58   8.17 8.927566  0.16       4.25   0.0000 ## 6404 2012-09-20 15:50:58   8.35 7.358846  0.16      12.06 898.9231 ## 6548 2012-09-21 03:50:58   8.21 8.854844  0.16       4.56   0.0000"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"exploring-input-data","dir":"Articles","previous_headings":"","what":"Exploring input data","title":"Data Preparation","text":"can use common R packages graphically inspect input data. Look outliers oddities ensure quality data.","code":"library(dplyr) library(tidyr) library(ggplot2) dat %>%    mutate(DO.pctsat = 100 * (DO.obs / DO.sat)) %>%   select(solar.time, starts_with('DO')) %>%   gather(type, DO.value, starts_with('DO')) %>%   mutate(units=ifelse(type == 'DO.pctsat', 'DO\\n(% sat)', 'DO\\n(mg/L)')) %>%   ggplot(aes(x=solar.time, y=DO.value, color=type)) + geom_line() +    facet_grid(units ~ ., scale='free_y') + theme_bw() +   scale_color_discrete('variable') labels <- c(depth='depth\\n(m)', temp.water='water temp\\n(deg C)', light='PAR\\n(umol m^-2 s^-1)') dat %>%    select(solar.time, depth, temp.water, light) %>%   gather(type, value, depth, temp.water, light) %>%   mutate(     type=ordered(type, levels=c('depth','temp.water','light')),     units=ordered(labels[type], unname(labels))) %>%   ggplot(aes(x=solar.time, y=value, color=type)) + geom_line() +    facet_grid(units ~ ., scale='free_y') + theme_bw() +   scale_color_discrete('variable')"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"check-the-input-data-format","dir":"Articles","previous_headings":"","what":"Check the input data format","title":"Data Preparation","text":"data need specific column names units. see required, use metab_inputs function get description required inputs given model type. output metab_inputs table describing required column names, classes units values column, whether column required optional. inputs identical model types ‘mle’, ‘bayes’, ‘night’, ’ll just print requriements ‘mle’. Also read help pages ?metab ?mm_data detailed variable definitions requirements.","code":"metab_inputs('mle', 'data') ##      colname          class          units     need ## 1 solar.time POSIXct,POSIXt                required ## 2     DO.obs        numeric      mgO2 L^-1 required ## 3     DO.sat        numeric      mgO2 L^-1 required ## 4      depth        numeric              m required ## 5 temp.water        numeric           degC required ## 6      light        numeric umol m^-2 s^-1 required ## 7  discharge        numeric       m^3 s^-1 optional"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"prepare-the-timestamps","dir":"Articles","previous_headings":"","what":"Prepare the timestamps","title":"Data Preparation","text":"prepare timestamps metabolism modeling, need convert initial number text format POSIXct correct timezone (tz), solar mean time.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"step-1-posixct","dir":"Articles","previous_headings":"Prepare the timestamps","what":"Step 1: POSIXct","title":"Data Preparation","text":"Convert logger-format data POSIXct local timezone (without daylight savings, long timezone scheme specified). examples specific scenarios solutions.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"starting-with-numeric-datetimes-e-g--from-pmes","dir":"Articles","previous_headings":"Prepare the timestamps > Step 1: POSIXct","what":"Starting with numeric datetimes, e.g., from PMEs","title":"Data Preparation","text":"datetimes stored seconds since 1/1/1970 Greenwich (.e., UTC): datetimes stored seconds since 1/1/1970 Laramie, WY (.e., MST, daylight savings):","code":"num.time <- 1471867200 (posix.time.localtz <- as.POSIXct(num.time, origin='1970-01-01', tz='UTC')) ## [1] \"2016-08-22 12:00:00 UTC\" num.time <- 1471867200 (posix.time.nominalUTC <- as.POSIXct(num.time, origin='1970-01-01', tz='UTC')) # the numbers get treated as UTC no matter what tz you request ## [1] \"2016-08-22 12:00:00 UTC\" (posix.time.localtz <- lubridate::force_tz(posix.time.nominalUTC, 'Etc/GMT+7')) # +7 = mountain standard time ## [1] \"2016-08-22 12:00:00 -07\""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"starting-with-text-timestamps","dir":"Articles","previous_headings":"Prepare the timestamps > Step 1: POSIXct","what":"Starting with text timestamps","title":"Data Preparation","text":"datetimes stored text timestamps UTC, can bypass conversion local time just start UTC. rather using calc_solar_time() Step 2, ’ll use convert_UTC_to_solartime(). datetimes stored text timestamps EST/EDT (daylight savings): datetimes stored text timestamps EST (daylight savings): See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones list timezone names.","code":"text.time <- '2016-08-22 12:00:00' (posix.time.utc <- as.POSIXct(text.time, tz='UTC')) ## [1] \"2016-08-22 12:00:00 UTC\" text.time <- '2016-08-22 12:00:00' (posix.time.localtz <- as.POSIXct(text.time, format=\"%Y-%m-%d %H:%M:%S\", tz='America/New_York')) ## [1] \"2016-08-22 12:00:00 EDT\" text.time <- '2016-08-22 12:00:00' (posix.time.localtz <- as.POSIXct(text.time, format=\"%Y-%m-%d %H:%M:%S\", tz='Etc/GMT+5')) ## [1] \"2016-08-22 12:00:00 -05\""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"starting-with-chron-datetimes","dir":"Articles","previous_headings":"Prepare the timestamps > Step 1: POSIXct","what":"Starting with chron datetimes","title":"Data Preparation","text":"datetimes stored chron time format EST (daylight savings):","code":"chron.time <- chron::chron('08/22/16', '12:00:00') time.format <- \"%Y-%m-%d %H:%M:%S\" text.time <- format(chron.time, time.format) # direct as.POSIXct time works poorly (posix.time.localtz <- as.POSIXct(text.time, format=time.format, tz='Etc/GMT+5')) ## [1] \"2016-08-22 12:00:00 -05\""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"step-2-solar-time","dir":"Articles","previous_headings":"Prepare the timestamps","what":"Step 2: Solar time","title":"Data Preparation","text":"Now convert local time solar time. streamMetabolizer vocabulary, solar.time specifically means mean solar time, kind every day exactly 24 hours, contrast apparent solar time. ’re ready step correct time local timezone lubridate::tz(yourtime) reflects correct timezone.","code":"lubridate::tz(posix.time.localtz) # yep, we want and have the code for EST ## [1] \"Etc/GMT+5\" (posix.time.solar <- streamMetabolizer::calc_solar_time(posix.time.localtz, longitude=-106.3)) ## [1] \"2016-08-22 09:55:58 UTC\""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/data_prep.html","id":"other-data-preparation","dir":"Articles","previous_headings":"","what":"Other data preparation","title":"Data Preparation","text":"streamMetabolizer offers many functions help prepare data modeling. recommend explore help pages following functions: calc_depth calc_DO_sat calc_light convert_date_to_doyhr convert_localtime_to_UTC convert_UTC_to_solartime convert_k600_to_kGAS convert_PAR_to_SW","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/get_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quickstart","text":"tutorial shows estimate stream metabolism using streamMetabolizer example data supplied Bob Hall French Creek Laramie, WY. four steps fitting metabolism model streamMetabolizer. Prepare inspect input data. Choose model configuration appropriate data. Fit model. Inspect output. tutorial demonstrate steps single model structure single set specifications, also consider structures always tailor specifications dataset site knowledge. details, see: Bayesian Models MLE Models Model Types","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/get_started.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"Quickstart","text":"haven’t already installed package, see Installation tutorial. Next load R libraries. streamMetabolizer required run models, ’ll also using dplyr inspect results.","code":"library(streamMetabolizer) library(dplyr)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/get_started.html","id":"preparing-the-input-data","dir":"Articles","previous_headings":"","what":"1. Preparing the input data","title":"Quickstart","text":"Load small example dataset package (data French Creek Laramie, WY, courtesy Bob Hall). ’ll use streamMetabolizer standard defining day run 4 (day_start=4) 4 (day_end=28). See ?metab help document Data Preparation tutorial properly format inspect dataset.","code":"dat <- data_metab(num_days='3', res='15', day_start=4, day_end=28)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/get_started.html","id":"configuring-the-model","dir":"Articles","previous_headings":"","what":"2. Configuring the model","title":"Quickstart","text":"two steps configuring metabolism model streamMetabolizer. Identify name model structure want using mm_name(). Set specifications model using defaults fromspecs() starting point.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/get_started.html","id":"a--choose-a-model-structure","dir":"Articles","previous_headings":"2. Configuring the model","what":"2a. Choose a model structure","title":"Quickstart","text":"example, specify Bayesian model observation error process error. won’t pool K600 don’t many days data, pooling one feature makes Bayesian models better MLE models general. Another great feature Bayesian models produce accurate nuanced confidence intervals.","code":"bayes_name <- mm_name(type='bayes', pool_K600='none', err_obs_iid=TRUE, err_proc_iid=TRUE) bayes_name ## [1] \"b_np_oipi_tr_plrckm.stan\""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/get_started.html","id":"b--set-the-specifications","dir":"Articles","previous_headings":"2. Configuring the model","what":"2b. Set the specifications","title":"Quickstart","text":"now pass model name specs() get list default specifications model. point can alter specifications desired. ’ve used small number burnin_steps saved_steps don’t want wait long vignette run. run models, bump numbers substantially (several thousand , depending exactly model ’re using.) Bayesian model specifications also need close attention ’re running models. See Bayesian Models details.","code":"bayes_specs <- specs(bayes_name) bayes_specs ## Model specifications: ##   model_name               b_np_oipi_tr_plrckm.stan                              ##   engine                   stan                                                  ##   split_dates              FALSE                                                 ##   keep_mcmcs               TRUE                                                  ##   keep_mcmc_data           TRUE                                                  ##   day_start                4                                                     ##   day_end                  28                                                    ##   day_tests                full_day, even_timesteps, complete_data, pos_disch... ##   required_timestep        NA                                                    ##   GPP_daily_mu             3.1                                                   ##   GPP_daily_lower          -Inf                                                  ##   GPP_daily_sigma          6                                                     ##   ER_daily_mu              -7.1                                                  ##   ER_daily_upper           Inf                                                   ##   ER_daily_sigma           7.1                                                   ##   K600_daily_meanlog       2.484906649788                                        ##   K600_daily_sdlog         1                                                     ##   err_obs_iid_sigma_scale  0.03                                                  ##   err_proc_iid_sigma_scale 5                                                     ##   params_in                GPP_daily_mu, GPP_daily_lower, GPP_daily_sigma, ER... ##   params_out               GPP, ER, DO_R2, GPP_daily, ER_daily, K600_daily, e... ##   n_chains                 4                                                     ##   n_cores                  4                                                     ##   burnin_steps             500                                                   ##   saved_steps              500                                                   ##   thin_steps               1                                                     ##   verbose                  FALSE # one way to alter specifications: call specs() again bayes_specs <- specs(bayes_name, burnin_steps=100, saved_steps=200, n_cores=1, GPP_daily_mu=3, GPP_daily_sigma=2) # another way: use revise() bayes_specs <- revise(bayes_specs, burnin_steps=100, saved_steps=200, n_cores=1, GPP_daily_mu=3, GPP_daily_sigma=2)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/get_started.html","id":"fitting-the-model","dir":"Articles","previous_headings":"","what":"3. Fitting the model","title":"Quickstart","text":"model configured, can fit model data metab(). Bayesian models take run, patient. switch MLE model can afford sacrifice accuracy speed. (small example usually takes 30 seconds computer.)","code":"mm <- metab(bayes_specs, data=dat)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/get_started.html","id":"inspecting-the-model","dir":"Articles","previous_headings":"","what":"4. Inspecting the model","title":"Quickstart","text":"’ve fit model, can inspect output functions including predict_metab() plot_metab_preds(), predict_DO() plot_DO_preds(), get_params(), get_fit(). Start simply printing model console. daily metabolism predictions model:  can inspect fitted daily parameters, including K600, get_params(): first dissolved oxygen predictions model (.mod). returned along input data convenience. 1 2012-09-18 2012-09-18 04:05:58 8.41 9.083329 0.16 3.60 0 2 2012-09-18 2012-09-18 04:20:58 8.42 9.093063 0.16 3.56 0 3 2012-09-18 2012-09-18 04:35:58 8.42 9.105254 0.16 3.51 0 4 2012-09-18 2012-09-18 04:50:58 8.43 9.112582 0.16 3.48 0 5 2012-09-18 2012-09-18 05:05:58 8.45 9.127267 0.16 3.42 0 6 2012-09-18 2012-09-18 05:20:58 8.46 9.137079 0.16 3.38 0 .mod 1 8.410000 2 8.406979 3 8.407403 4 8.410073 5 8.414697 6 8.421057 dissolved oxygen predictions figure:  Bayesian models , can dig even deeper using get_mcmc, returns stanfit object can inspected using rstan package. (traceplots pretty bad used MCMC iterations. strive better final models.)  get_fit() function returns list data.frames, one per temporal resolution, containing fitted values details distributions convergence. just overall metrics model convergence (Rhats, potential scale reduction statistics; see Gelman Rubin 1992 Brooks Gelman 1998): list column names available get_fit(): ’re way!","code":"mm ## metab_model of type metab_bayes  ## streamMetabolizer version 0.12.1  ## Specifications: ##   model_name               b_np_oipi_tr_plrckm.stan                              ##   engine                   stan                                                  ##   split_dates              FALSE                                                 ##   keep_mcmcs               TRUE                                                  ##   keep_mcmc_data           TRUE                                                  ##   day_start                4                                                     ##   day_end                  28                                                    ##   day_tests                full_day, even_timesteps, complete_data, pos_disch... ##   required_timestep        NA                                                    ##   GPP_daily_mu             3                                                     ##   GPP_daily_lower          -Inf                                                  ##   GPP_daily_sigma          2                                                     ##   ER_daily_mu              -7.1                                                  ##   ER_daily_upper           Inf                                                   ##   ER_daily_sigma           7.1                                                   ##   K600_daily_meanlog       2.484906649788                                        ##   K600_daily_sdlog         1                                                     ##   err_obs_iid_sigma_scale  0.03                                                  ##   err_proc_iid_sigma_scale 5                                                     ##   params_in                GPP_daily_mu, GPP_daily_lower, GPP_daily_sigma, ER... ##   params_out               GPP, ER, DO_R2, GPP_daily, ER_daily, K600_daily, e... ##   n_chains                 4                                                     ##   n_cores                  1                                                     ##   burnin_steps             100                                                   ##   saved_steps              200                                                   ##   thin_steps               1                                                     ##   verbose                  FALSE                                                 ##   model_path               /private/var/folders/_0/fbg0ffkj6z3fb_7jvm8wg86s81... ## Fitting time: 19.66 secs elapsed ## Parameters (3 dates): ##         date GPP.daily GPP.daily.lower GPP.daily.upper   ER.daily ## 1 2012-09-18 5.573649       -0.1410918        7.259060 -4.267688  ## 2 2012-09-19 3.191503       -0.2813929       10.037324 -2.454561  ## 3 2012-09-20 3.806921       -0.2556618        7.123052 -2.693674  ##   ER.daily.lower ER.daily.upper K600.daily K600.daily.lower K600.daily.upper ## 1      -6.028402      0.3099591  56.90414         2.2314706         73.82301 ## 2      -7.968363      0.5319808  31.84568         1.3156141         92.78600 ## 3      -5.362254      0.4827049  39.74744         0.7490546         72.03294 ##   msgs.fit ## 1  w       ## 2  w       ## 3  w       ## Fitting warnings: ##   There were 4 chains where the estimated Bayesian Fraction of Missing Information was low. See ## https://mc-stan.org/misc/warnings.html#bfmi-low ##   Examine the pairs() plot to diagnose sampling problems ##   The largest R-hat is 3.48, indicating chains have not mixed. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#r-hat ##   Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#bulk-ess ##   Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. ## Running the chains for more iterations may help. See ## https://mc-stan.org/misc/warnings.html#tail-ess ##   3 dates: overall warnings ## Predictions (3 dates): ## # A tibble: 3 × 9 ##   date         GPP GPP.lower GPP.upper    ER ER.lower ER.upper msgs.fit  ##   <date>     <dbl>     <dbl>     <dbl> <dbl>    <dbl>    <dbl> <chr>     ## 1 2012-09-18  5.57    -0.141      7.26 -4.27    -6.03    0.310 \"w      \" ## 2 2012-09-19  3.19    -0.281     10.0  -2.45    -7.97    0.532 \"w      \" ## 3 2012-09-20  3.81    -0.256      7.12 -2.69    -5.36    0.483 \"w      \" ## # ℹ 1 more variable: msgs.pred <chr> predict_metab(mm) ## # A tibble: 3 × 10 ##   date         GPP GPP.lower GPP.upper    ER ER.lower ER.upper msgs.fit warnings ##   <date>     <dbl>     <dbl>     <dbl> <dbl>    <dbl>    <dbl> <chr>    <chr>    ## 1 2012-09-18  5.57    -0.141      7.26 -4.27    -6.03    0.310 \"w     … \"\"       ## 2 2012-09-19  3.19    -0.281     10.0  -2.45    -7.97    0.532 \"w     … \"\"       ## 3 2012-09-20  3.81    -0.256      7.12 -2.69    -5.36    0.483 \"w     … \"\"       ## # ℹ 1 more variable: errors <chr> plot_metab_preds(mm) get_params(mm) ## # A tibble: 3 × 9 ##   date       GPP.daily GPP.daily.sd ER.daily ER.daily.sd K600.daily ##   <date>         <dbl>        <dbl>    <dbl>       <dbl>      <dbl> ## 1 2012-09-18      4.07         2.69    -3.20        2.18       42.5 ## 2 2012-09-19      4.08         3.31    -3.22        2.69       39.7 ## 3 2012-09-20      3.01         1.99    -2.14        1.52       32.2 ## # ℹ 3 more variables: K600.daily.sd <dbl>, warnings <chr>, errors <chr> predict_DO(mm) %>% head() date          solar.time DO.obs   DO.sat depth temp.water light plot_DO_preds(mm) mcmc <- get_mcmc(mm) rstan::traceplot(mcmc, pars='K600_daily', nrow=3) get_fit(mm)$overall %>%   select(ends_with('Rhat')) ## # A tibble: 1 × 3 ##   err_obs_iid_sigma_Rhat err_proc_iid_sigma_Rhat lp___Rhat ##                    <dbl>                   <dbl>     <dbl> ## 1                   2.77                    2.79      4.16 get_fit(mm) %>%   lapply(names) ## $daily ##  [1] \"date\"               \"GPP_mean\"           \"GPP_se_mean\"        ##  [4] \"GPP_sd\"             \"GPP_2.5pct\"         \"GPP_25pct\"          ##  [7] \"GPP_50pct\"          \"GPP_75pct\"          \"GPP_97.5pct\"        ## [10] \"GPP_n_eff\"          \"GPP_Rhat\"           \"ER_mean\"            ## [13] \"ER_se_mean\"         \"ER_sd\"              \"ER_2.5pct\"          ## [16] \"ER_25pct\"           \"ER_50pct\"           \"ER_75pct\"           ## [19] \"ER_97.5pct\"         \"ER_n_eff\"           \"ER_Rhat\"            ## [22] \"DO_R2_mean\"         \"DO_R2_se_mean\"      \"DO_R2_sd\"           ## [25] \"DO_R2_2.5pct\"       \"DO_R2_25pct\"        \"DO_R2_50pct\"        ## [28] \"DO_R2_75pct\"        \"DO_R2_97.5pct\"      \"DO_R2_n_eff\"        ## [31] \"DO_R2_Rhat\"         \"GPP_daily_mean\"     \"GPP_daily_se_mean\"  ## [34] \"GPP_daily_sd\"       \"GPP_daily_2.5pct\"   \"GPP_daily_25pct\"    ## [37] \"GPP_daily_50pct\"    \"GPP_daily_75pct\"    \"GPP_daily_97.5pct\"  ## [40] \"GPP_daily_n_eff\"    \"GPP_daily_Rhat\"     \"ER_daily_mean\"      ## [43] \"ER_daily_se_mean\"   \"ER_daily_sd\"        \"ER_daily_2.5pct\"    ## [46] \"ER_daily_25pct\"     \"ER_daily_50pct\"     \"ER_daily_75pct\"     ## [49] \"ER_daily_97.5pct\"   \"ER_daily_n_eff\"     \"ER_daily_Rhat\"      ## [52] \"K600_daily_mean\"    \"K600_daily_se_mean\" \"K600_daily_sd\"      ## [55] \"K600_daily_2.5pct\"  \"K600_daily_25pct\"   \"K600_daily_50pct\"   ## [58] \"K600_daily_75pct\"   \"K600_daily_97.5pct\" \"K600_daily_n_eff\"   ## [61] \"K600_daily_Rhat\"    \"valid_day\"          \"warnings\"           ## [64] \"errors\"             ##  ## $inst ##  [1] \"date\"                 \"solar.time\"           \"err_obs_iid_mean\"     ##  [4] \"err_obs_iid_se_mean\"  \"err_obs_iid_sd\"       \"err_obs_iid_2.5pct\"   ##  [7] \"err_obs_iid_25pct\"    \"err_obs_iid_50pct\"    \"err_obs_iid_75pct\"    ## [10] \"err_obs_iid_97.5pct\"  \"err_obs_iid_n_eff\"    \"err_obs_iid_Rhat\"     ## [13] \"err_proc_iid_mean\"    \"err_proc_iid_se_mean\" \"err_proc_iid_sd\"      ## [16] \"err_proc_iid_2.5pct\"  \"err_proc_iid_25pct\"   \"err_proc_iid_50pct\"   ## [19] \"err_proc_iid_75pct\"   \"err_proc_iid_97.5pct\" \"err_proc_iid_n_eff\"   ## [22] \"err_proc_iid_Rhat\"    ##  ## $overall ##  [1] \"date_index\"                 \"time_index\"                 ##  [3] \"index\"                      \"err_obs_iid_sigma_mean\"     ##  [5] \"err_obs_iid_sigma_se_mean\"  \"err_obs_iid_sigma_sd\"       ##  [7] \"err_obs_iid_sigma_2.5pct\"   \"err_obs_iid_sigma_25pct\"    ##  [9] \"err_obs_iid_sigma_50pct\"    \"err_obs_iid_sigma_75pct\"    ## [11] \"err_obs_iid_sigma_97.5pct\"  \"err_obs_iid_sigma_n_eff\"    ## [13] \"err_obs_iid_sigma_Rhat\"     \"err_proc_iid_sigma_mean\"    ## [15] \"err_proc_iid_sigma_se_mean\" \"err_proc_iid_sigma_sd\"      ## [17] \"err_proc_iid_sigma_2.5pct\"  \"err_proc_iid_sigma_25pct\"   ## [19] \"err_proc_iid_sigma_50pct\"   \"err_proc_iid_sigma_75pct\"   ## [21] \"err_proc_iid_sigma_97.5pct\" \"err_proc_iid_sigma_n_eff\"   ## [23] \"err_proc_iid_sigma_Rhat\"    \"lp___mean\"                  ## [25] \"lp___se_mean\"               \"lp___sd\"                    ## [27] \"lp___2.5pct\"                \"lp___25pct\"                 ## [29] \"lp___50pct\"                 \"lp___75pct\"                 ## [31] \"lp___97.5pct\"               \"lp___n_eff\"                 ## [33] \"lp___Rhat\"                  ##  ## $warnings ## NULL ##  ## $errors ## NULL"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/gpp_er_eqs.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"GPP and ER Equations","text":"vignette demonstrates options relating GPP ER light /temperature.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/gpp_er_eqs.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"GPP and ER Equations","text":"Load streamMetabolizer dplyr. Get data work : ’re requesting three days data 15-minute resolution. Thanks Bob Hall test data.","code":"library(streamMetabolizer) library(dplyr) dat <- data_metab('3', '15')"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/gpp_er_eqs.html","id":"gpp-and-er-functions","dir":"Articles","previous_headings":"","what":"GPP and ER functions","title":"GPP and ER Equations","text":"’s basic model GPP proportional light ER constant time. ’s one GPP saturating function light. ER still constant. Saturator produces fitting warnings, condensed ‘w’ summary print-. can inspected detail looking directly fitted daily parameters: Similary, can inspect warnings errors arise prediction pulling daily metabolism predictions (aren’t , columns empty): can predict /plot instantaneous values fitted daily parameters.  Yep, fitting warning day 2 meaningful! can encourage model toward good fit adjusting initial values Pmax alpha fitting function explore likelihood space. two ways - date-specific values data_daily, values apply every date specs(). two methods can even combined. Despite remaining warnings, predictions saturating GPP-light function look better classic model particular dataset.   See full list available functions gross primary productivity (GPP) ecosystem respiration (ER) ?mm_name.","code":"# the Classic: linear GPP, constant ER (also the default) mm_classic <-    mm_name('mle', GPP_fun='linlight', ER_fun='constant') %>%    specs() %>%   metab(dat) mm_classic ## metab_model of type metab_mle  ## streamMetabolizer version 0.12.1  ## Specifications: ##   model_name        m_np_oi_tr_plrckm.nlm                                             ##   day_start         4                                                                 ##   day_end           28                                                                ##   day_tests         full_day, even_timesteps, complete_data, pos_discharge, pos_depth ##   required_timestep NA                                                                ##   init.GPP.daily    8                                                                 ##   init.ER.daily     -10                                                               ##   init.K600.daily   10                                                                ## Fitting time: 1.565 secs elapsed ## Parameters (3 dates): ##         date GPP.daily GPP.daily.lower GPP.daily.upper   ER.daily ER.daily.lower ER.daily.upper ## 1 2012-09-18 2.814873         2.158410        3.471335 -2.113937       -2.647969      -1.579906 ## 2 2012-09-19 3.271209         2.561176        3.981243 -2.466198       -3.052360      -1.880037 ## 3 2012-09-20 2.590927         2.119941        3.061914 -1.712055       -2.070765      -1.353344 ##   K600.daily K600.daily.lower K600.daily.upper msgs.fit ## 1  31.06049          24.47002         37.65096          ## 2  33.23838          26.62470         39.85206          ## 3  28.71846          24.00835         33.42857          ## Predictions (3 dates): ##         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper msgs.fit msgs.pred ## 1 2012-09-18 2.814873  2.158410  3.471335 -2.113937 -2.647969 -1.579906                    ## 2 2012-09-19 3.271209  2.561176  3.981243 -2.466198 -3.052360 -1.880037                    ## 3 2012-09-20 2.590927  2.119941  3.061914 -1.712055 -2.070765 -1.353344 # the Saturator: GPP saturating with light, constant ER mm_saturator <-    mm_name('mle', GPP_fun='satlight', ER_fun='constant') %>%    specs() %>%   metab(dat) mm_saturator ## metab_model of type metab_mle  ## streamMetabolizer version 0.12.1  ## Specifications: ##   model_name        m_np_oi_tr_psrckm.nlm                                             ##   day_start         4                                                                 ##   day_end           28                                                                ##   day_tests         full_day, even_timesteps, complete_data, pos_discharge, pos_depth ##   required_timestep NA                                                                ##   init.Pmax         10                                                                ##   init.alpha        1e-04                                                             ##   init.ER.daily     -10                                                               ##   init.K600.daily   10                                                                ## Fitting time: 2.39 secs elapsed ## Parameters (3 dates): ##         date       Pmax Pmax.lower Pmax.upper         alpha  alpha.lower  alpha.upper     ER.daily ## 1 2012-09-18  6.033048    5.715948   6.350149 0.0083268769  0.0078854764 0.0087682775 -1.93445254  ## 2 2012-09-19 10.592112  -16.037273  37.221497 0.0006762431  0.0004207099 0.0009317763 -0.05326281  ## 3 2012-09-20 -6.226684   -6.703563  -5.749805 0.0073752923  0.0068232607 0.0079273238 -1.67304539  ##   ER.daily.lower ER.daily.upper K600.daily K600.daily.lower K600.daily.upper msgs.fit ## 1     -2.0254532    -1.84345184  24.57065         23.556079         25.58523      W   ## 2     -0.1539228     0.04739719  12.91624          9.359051         16.47342      W   ## 3     -1.7893875    -1.55670326  24.40066         23.013037         25.78829          ## Fitting warnings: ##   1 date: iteration limit exceeded ##   1 date: last global step failed to locate a point lower than estimate. Either estimate is an approximate local minimum of the function or steptol is too small ## Predictions (3 dates): ##         date       GPP GPP.lower GPP.upper          ER   ER.lower    ER.upper msgs.fit msgs.pred ## 1 2012-09-18 2.4687694        NA        NA -1.93445254 -2.0254532 -1.84345184      W             ## 2 2012-09-19 0.3838757        NA        NA -0.05326281 -0.1539228  0.04739719      W             ## 3 2012-09-20 2.4077931        NA        NA -1.67304539 -1.7893875 -1.55670326 get_params(mm_saturator) %>% select(date, warnings, errors) ##         date ## 1 2012-09-18 ## 2 2012-09-19 ## 3 2012-09-20 ##                                                                                                                                                 warnings ## 1 last global step failed to locate a point lower than estimate. Either estimate is an approximate local minimum of the function or steptol is too small ## 2                                                                                                                               iteration limit exceeded ## 3                                                                                                                                                        ##   errors ## 1        ## 2        ## 3 predict_metab(mm_saturator) %>% select(date, warnings, errors) ##         date warnings errors ## 1 2012-09-18                 ## 2 2012-09-19                 ## 3 2012-09-20 predict_DO(mm_saturator) %>% head ##         date          solar.time DO.obs   DO.sat depth temp.water light   DO.mod ## 1 2012-09-18 2012-09-18 04:05:58   8.41 9.083329  0.16       3.60     0 8.410000 ## 2 2012-09-18 2012-09-18 04:20:58   8.42 9.093063  0.16       3.56     0 8.403197 ## 3 2012-09-18 2012-09-18 04:35:58   8.42 9.105254  0.16       3.51     0 8.399110 ## 4 2012-09-18 2012-09-18 04:50:58   8.43 9.112582  0.16       3.48     0 8.397120 ## 5 2012-09-18 2012-09-18 05:05:58   8.45 9.127267  0.16       3.42     0 8.397068 ## 6 2012-09-18 2012-09-18 05:20:58   8.46 9.137079  0.16       3.38     0 8.398825 plot_DO_preds(mm_saturator) mm_saturator2 <-    mm_name('mle', GPP_fun='satlight', ER_fun='constant') %>%    specs() %>%   metab(dat, data_daily=select(get_params(mm_saturator), date, init.Pmax=Pmax, init.alpha=alpha)) get_params(mm_saturator2) ##         date      Pmax   Pmax.sd       alpha     alpha.sd  ER.daily ER.daily.sd K600.daily ## 1 2012-09-18  6.033048 0.1614450 0.008326878 0.0002252293 -1.934453  0.04636854   24.57065 ## 2 2012-09-19  7.269965 0.2810085 0.009041367 0.0003329973 -2.239061  0.07721965   26.60997 ## 3 2012-09-20 -6.226684 0.2437185 0.007375292 0.0002816281 -1.673045  0.05940581   24.40066 ##   K600.daily.sd warnings errors ## 1     0.5166937                 ## 2     0.7961571                 ## 3     0.7089138 mm_saturator3 <-    mm_name('mle', GPP_fun='satlight', ER_fun='constant') %>%    specs(init.Pmax=6.2, init.alpha=0.008) %>%   metab(dat) get_params(mm_saturator3) ##         date     Pmax   Pmax.sd       alpha     alpha.sd  ER.daily ER.daily.sd K600.daily ## 1 2012-09-18 6.033048 0.1614592 0.008326878 0.0002252284 -1.934452  0.04637106   24.57065 ## 2 2012-09-19 7.270001 0.2806163 0.009041332 0.0003330178 -2.239060  0.07715527   26.61006 ## 3 2012-09-20 6.226684 0.2451105 0.007375292 0.0002815623 -1.673045  0.05956607   24.40066 ##   K600.daily.sd ## 1     0.5167332 ## 2     0.7952317 ## 3     0.7120805 ##                                                                                                                                                 warnings ## 1 last global step failed to locate a point lower than estimate. Either estimate is an approximate local minimum of the function or steptol is too small ## 2                                                                                                                                                        ## 3                                                                                                                                                        ##   errors ## 1        ## 2        ## 3 mm_saturator4 <-    mm_name('mle', GPP_fun='satlight', ER_fun='constant') %>%    specs(init.Pmax=6.2, init.alpha=0.008) %>%   metab(dat, transmute(get_params(mm_saturator), date, init.Pmax=Pmax[1], init.alpha=alpha[1])[2,]) get_params(mm_saturator4) ##         date     Pmax   Pmax.sd       alpha     alpha.sd  ER.daily ER.daily.sd K600.daily ## 1 2012-09-18 6.033048 0.1614592 0.008326878 0.0002252284 -1.934452  0.04637106   24.57065 ## 2 2012-09-19 7.270001 0.2806150 0.009041378 0.0003330192 -2.239069  0.07715562   26.61007 ## 3 2012-09-20 6.226684 0.2451105 0.007375292 0.0002815623 -1.673045  0.05956607   24.40066 ##   K600.daily.sd ## 1     0.5167332 ## 2     0.7952307 ## 3     0.7120805 ##                                                                                                                                                                                                                                    warnings ## 1 data_daily$init.Pmax==NA so using specs; data_daily$init.alpha==NA so using specs; last global step failed to locate a point lower than estimate. Either estimate is an approximate local minimum of the function or steptol is too small ## 2                                                                                                                                                                                                                                           ## 3                                                                                                                                                         data_daily$init.Pmax==NA so using specs; data_daily$init.alpha==NA so using specs ##   errors ## 1        ## 2        ## 3 plot_DO_preds(mm_classic) plot_DO_preds(mm_saturator4)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/installation.html","id":"installing-streammetabolizer","dir":"Articles","previous_headings":"","what":"Installing streamMetabolizer","title":"Installation","text":"install streamMetabolizer package, use remotes package (running install.packages('remotes') first needed). use remotes::install_github() convenient set GitHub Personal Access Token (PAT). several methods setting PATs within R; simplest call `Sys.setenv(GITHUB_PAT=“yyyy”), replacing yyyy PAT established GitHub website. may first need install unitted dependency: can install cutting edge version streamMetabolizer command:","code":"remotes::install_github('appling/unitted') remotes::install_github(   \"USGS-R/streamMetabolizer\", # soon to be \"DOI-USGS/streamMetabolizer\"   build_vignettes = TRUE)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/installation.html","id":"software-dependencies-for-bayesian-models","dir":"Articles","previous_headings":"Installing streamMetabolizer","what":"Software dependencies for Bayesian models","title":"Installation","text":"major dependency Bayesian models rstan package, installation package rarely simple call install.packages(). Start rstan wiki page --date installation instructions, differ operating system.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/model_structures.html","id":"basic-model-types-in-streammetabolizer","dir":"Articles","previous_headings":"","what":"Basic model types in streamMetabolizer","title":"Model Structures","text":"Many model structures available streamMetabolizer package. fall three general types: bayes - Inverse Bayesian modeling GPP, ER, K600 mle - Inverse modeling maximum likelihood estimation GPP, ER, optionally K600 night - Nighttime regression estimation K600 ER Two additional model types can useful specific situations: Kmodel - Builds multi-day relationship K600 predictor variables; can used conjunction mle /night sim - Simulates dissolved oxygen “data” model testing","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/model_structures.html","id":"specific-model-structure","dir":"Articles","previous_headings":"","what":"Specific model structure","title":"Model Structures","text":"complete specification model structure begins basic type also includes information model error assumptions, hierarchical components, numerical integration method, process equations used describe GPP ER, . model structure fully specified concise cryptic model name. Examples “b_np_oipi_tr_plrckm.stan” “m_np_oi_tr_plrckm.nlm”. never need remember concise names; instead, can construct interpret names using mm_name mm_parse_name functions, respectively.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/model_structures.html","id":"setting-a-model-name","dir":"Articles","previous_headings":"","what":"Setting a model name","title":"Model Structures","text":"mm_name() function creates cryptic (complete concise) model name several options can specify. example: See help file ?mm_name learn structural options can adjust.","code":"mm_name(type='bayes') # the default Bayesian model ## [1] \"b_np_oipi_tr_plrckm.stan\" mm_name(type='bayes', pool_K600='normal') # a Bayesian model with simple pooling of K600 to a shared mean ## [1] \"b_Kn_oipi_tr_plrckm.stan\" mm_name(type='mle') # the default MLE model ## [1] \"m_np_oi_tr_plrckm.nlm\" mm_name(type='mle', ode_method='euler') # an MLE model with a simpler ode_method ## [1] \"m_np_oi_eu_plrckm.nlm\""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/model_structures.html","id":"interpreting-a-model-name","dir":"Articles","previous_headings":"","what":"Interpreting a model name","title":"Model Structures","text":"mm_parse_name() function splits cryptic model name component features. example: See help file ?mm_parse_name, refer ?mm_name definitions column names output mm_parse_name.","code":"mm_parse_name(c('b_np_oipi_tr_plrckm.stan', 'm_np_pi_tr_psrqkm.nlm')) ##    type pool_K600 err_obs_iid err_proc_acor err_proc_iid err_proc_GPP ## 1 bayes      none        TRUE         FALSE         TRUE        FALSE ## 2   mle      none       FALSE         FALSE         TRUE        FALSE ##   ode_method  GPP_fun   ER_fun deficit_src engine ## 1  trapezoid linlight constant      DO_mod   stan ## 2  trapezoid satlight  q10temp      DO_mod    nlm"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/model_structures.html","id":"listing-all-the-options","dir":"Articles","previous_headings":"","what":"Listing all the options","title":"Model Structures","text":"can see full list available model structures calling mm_valid_names() (’ll just print sampling full list):","code":"valid_names <- mm_valid_names(type=c('bayes','mle','night')) length(valid_names) ## [1] 882 c(valid_names[seq(1,length(valid_names),length.out=20)], '...') ##  [1] \"b_np_oipi_tr_plrckm.stan\"  \"b_Kb0_oi_eu_psrckm.stan\"   ##  [3] \"b_Kbx_oipi_eu_plrckm.stan\" \"b_Kl_oipi_tr_psrcko.stan\"  ##  [5] \"b_Kl0_oipp_eu_plrcko.stan\" \"b_Klx_pi_eu_psrcko.stan\"   ##  [7] \"b_Kn_pipp_tr_plrckm.stan\"  \"b_Knx_oi_eu_plrckm.stan\"   ##  [9] \"b_np_oi_tr_psrcko.stan\"    \"m_np_oi_o6_plrckm.nlm\"     ## [11] \"m_np_oi_o10_psrckm.nlm\"    \"m_np_pi_o13_pqrckm.nlm\"    ## [13] \"m_np_pi_o16_plrqkm.nlm\"    \"m_np_pi_tr_pqrqkm.nlm\"     ## [15] \"m_np_oi_o2_plrcko.nlm\"     \"m_np_oi_o5_psrcko.nlm\"     ## [17] \"m_np_oi_o9_pqrcko.nlm\"     \"m_np_pi_o12_plrqko.nlm\"    ## [19] \"m_np_pi_o15_psrqko.nlm\"    \"n_np_pi_eu_rckf.lm\"        ## [21] \"...\""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/model_structures.html","id":"using-a-model-name","dir":"Articles","previous_headings":"","what":"Using a model name","title":"Model Structures","text":"model name hand, pass name metab() fit model selected structure. See Quickstart tutorial .","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_bayes.html","id":"why-bayesian-models","dir":"Articles","previous_headings":"","what":"Why Bayesian models?","title":"Bayesian Models","text":"Bayesian models slower alternatives, offer several advantages: * can state-space models, including observation error process error. * can hierarchically structured, allowing use information many days data inform estimates individual day. * produce accurate nuanced uncertainty estimates.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_bayes.html","id":"configuring-bayesian-models","dir":"Articles","previous_headings":"","what":"Configuring Bayesian models","title":"Bayesian Models","text":"structure specifications Bayesian models require special attention. information, see help file ?specs, especially Relevant arguments section parameter definitions. Also see vignette called ‘fit_fix_k’.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_bayes.html","id":"stan-mcmc-information","dir":"Articles","previous_headings":"Inspecting Bayesian models","what":"Stan MCMC information","title":"Bayesian Models","text":"fitting streamMetabolizer model, can pull original Stan model object using get_mcmc(mm) mm fitted metabolism model. ’ll need rstan package inspect outputs , run library(rstan) proceeding. See ?stanfit ideas inspect Stan model object. go-first method traceplot() (inc_warmup=TRUE arg traceplot() can handy). plot(), print(), summary() also useful.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_bayes.html","id":"model-warnings-and-errors","dir":"Articles","previous_headings":"Inspecting Bayesian models","what":"Model warnings and errors","title":"Bayesian Models","text":"Unlike model types streamMetabolizer, Bayesian models sometimes overall warnings errors specific one day. , see note ‘warnings’ ‘errors’ columns model printout, can see full message[s] elements list returned get_fit(). ’s also [smaller] possibility errors warnings directly associated metabolism prediction rather fitting, inspectable ‘warnings’ ‘errors’ columns data.frame returned predict_metab().","code":"# here's where you'd find fitting messages: select(get_params(mm), warnings, errors) get_fit(mm)$warnings get_fit(mm)$errors  # and prediction messages select(predict_metab(mm), warnings, errors)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_mle.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"MLE Models","text":"haven’t already installed package, see Installation tutorial. Next load R libraries. streamMetabolizer required run models, ’ll also using dplyr inspect results.","code":"library(streamMetabolizer) library(dplyr)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_mle.html","id":"preparing-the-input-data","dir":"Articles","previous_headings":"","what":"1. Preparing the input data","title":"MLE Models","text":"Load small example dataset package (data French Creek Laramie, WY, courtesy Bob Hall). ’ll use streamMetabolizer standard defining day run 4 (day_start=4) 4 (day_end=28).","code":"dat <- data_metab(num_days='3', res='15', day_start=4, day_end=28)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_mle.html","id":"configuring-the-model","dir":"Articles","previous_headings":"","what":"2. Configuring the model","title":"MLE Models","text":"two steps configuring metabolism model streamMetabolizer. Identify name model structure want using mm_name(). Set specifications model using defaults fromspecs() starting point.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_mle.html","id":"a--choose-a-model-structure","dir":"Articles","previous_headings":"2. Configuring the model","what":"2a. Choose a model structure","title":"MLE Models","text":"Call mm_name choose specific MLE model name/structure. fit default MLE model. Many others available (see Model Structures GPP ER equations), one common fast.","code":"mle_name <- mm_name(type='mle') mle_name ## [1] \"m_np_oi_tr_plrckm.nlm\""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_mle.html","id":"b--set-the-specifications","dir":"Articles","previous_headings":"2. Configuring the model","what":"2b. Set the specifications","title":"MLE Models","text":"chosen model, next need define list specifications model. specs function creates list appropriate model chose. See ?specs definitions specifications. Note specifications help file omitted output specs(mle_name) - MLE models simple don’t many parameters set. parameters included mle_specs can modified, either calling specs() replacing value mle_specs list. command sets inital values GPP, ER, K600 likelihood maximization. (’ve done just illustration; model results aren’t affected particular changes particular dataset, seldom need edit values.)","code":"mle_specs <- specs(mle_name) mle_specs ## Model specifications: ##   model_name        m_np_oi_tr_plrckm.nlm                                        ##   day_start         4                                                            ##   day_end           28                                                           ##   day_tests         full_day, even_timesteps, complete_data, pos_discharge, p... ##   required_timestep NA                                                           ##   init.GPP.daily    8                                                            ##   init.ER.daily     -10                                                          ##   init.K600.daily   10 mle_specs <- specs(mle_name, init.GPP.daily=2, init.ER.daily=-1, init.K600.daily=3)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_mle.html","id":"fitting-the-model","dir":"Articles","previous_headings":"","what":"3. Fitting the model","title":"MLE Models","text":"Now actually fit model using metab function. ’s optional, sometimes helpful, include sort metadata info, ’ve done . ’ve chosen put metadata character vector, metadata can take format like.","code":"mm <- metab(mle_specs, data=dat, info=c(site='French Creek, WY', source='Bob Hall'))"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/models_mle.html","id":"inspecting-the-model","dir":"Articles","previous_headings":"3. Fitting the model","what":"4. Inspecting the model","title":"MLE Models","text":"Models show lots relevant information simply print command line. can also extract specific pieces information using designated accessor functions. example, info data saved fitted model object can pulled get_info get_data, respectively. can also get information model fitting process. function plot daily metabolism estimates.  also function plot dissolved oxygen predictions (lines) along original observations (points).  can output daily instantaneous predictions data.frames inspection.","code":"mm ## metab_model of type metab_mle  ##   User-supplied metadata: ##               site             source  ## \"French Creek, WY\"         \"Bob Hall\"  ## streamMetabolizer version 0.12.1  ## Specifications: ##   model_name        m_np_oi_tr_plrckm.nlm                                        ##   day_start         4                                                            ##   day_end           28                                                           ##   day_tests         full_day, even_timesteps, complete_data, pos_discharge, p... ##   required_timestep NA                                                           ##   init.GPP.daily    2                                                            ##   init.ER.daily     -1                                                           ##   init.K600.daily   3                                                            ## Fitting time: 1.551 secs elapsed ## Parameters (3 dates): ##         date GPP.daily GPP.daily.lower GPP.daily.upper   ER.daily ## 1 2012-09-18 2.814768         2.160463        3.469073 -2.113856  ## 2 2012-09-19 3.271369         2.562592        3.980145 -2.466321  ## 3 2012-09-20 2.590855         2.121370        3.060339 -1.712003  ##   ER.daily.lower ER.daily.upper K600.daily K600.daily.lower K600.daily.upper ## 1      -2.646426      -1.581285  31.05944          24.49085         37.62803 ## 2      -3.051683      -1.880959  33.23987          26.63806         39.84167 ## 3      -2.069836      -1.354171  28.71773          24.02290         33.41257 ##   msgs.fit ## 1          ## 2          ## 3          ## Predictions (3 dates): ##         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper ## 1 2012-09-18 2.814768  2.160463  3.469073 -2.113856 -2.646426 -1.581285 ## 2 2012-09-19 3.271369  2.562592  3.980145 -2.466321 -3.051683 -1.880959 ## 3 2012-09-20 2.590855  2.121370  3.060339 -1.712003 -2.069836 -1.354171 ##   msgs.fit msgs.pred ## 1                    ## 2                    ## 3 get_info(mm) ##               site             source  ## \"French Creek, WY\"         \"Bob Hall\" head(get_data(mm)) ##         date          solar.time DO.obs   DO.sat depth temp.water light ## 1 2012-09-18 2012-09-18 04:05:58   8.41 9.083329  0.16       3.60     0 ## 2 2012-09-18 2012-09-18 04:20:58   8.42 9.093063  0.16       3.56     0 ## 3 2012-09-18 2012-09-18 04:35:58   8.42 9.105254  0.16       3.51     0 ## 4 2012-09-18 2012-09-18 04:50:58   8.43 9.112582  0.16       3.48     0 ## 5 2012-09-18 2012-09-18 05:05:58   8.45 9.127267  0.16       3.42     0 ## 6 2012-09-18 2012-09-18 05:20:58   8.46 9.137079  0.16       3.38     0 ##     DO.mod ## 1 8.410000 ## 2 8.421013 ## 3 8.431849 ## 4 8.442322 ## 5 8.452734 ## 6 8.463325 get_fitting_time(mm) # the time it took to fit the model ##    user  system elapsed  ##   1.524   0.026   1.551 get_version(mm) # the streamMetabolizer version used to fit the model ## [1] \"0.12.1\" get_specs(mm) # the specifications we passed in ## Model specifications: ##   model_name        m_np_oi_tr_plrckm.nlm                                        ##   day_start         4                                                            ##   day_end           28                                                           ##   day_tests         full_day, even_timesteps, complete_data, pos_discharge, p... ##   required_timestep NA                                                           ##   init.GPP.daily    2                                                            ##   init.ER.daily     -1                                                           ##   init.K600.daily   3 plot_metab_preds(mm) plot_DO_preds(mm) predict_metab(mm) ##         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper ## 1 2012-09-18 2.814768  2.160463  3.469073 -2.113856 -2.646426 -1.581285 ## 2 2012-09-19 3.271369  2.562592  3.980145 -2.466321 -3.051683 -1.880959 ## 3 2012-09-20 2.590855  2.121370  3.060339 -1.712003 -2.069836 -1.354171 ##   msgs.fit warnings errors ## 1                          ## 2                          ## 3 head(predict_DO(mm)) ##         date          solar.time DO.obs   DO.sat depth temp.water light ## 1 2012-09-18 2012-09-18 04:05:58   8.41 9.083329  0.16       3.60     0 ## 2 2012-09-18 2012-09-18 04:20:58   8.42 9.093063  0.16       3.56     0 ## 3 2012-09-18 2012-09-18 04:35:58   8.42 9.105254  0.16       3.51     0 ## 4 2012-09-18 2012-09-18 04:50:58   8.43 9.112582  0.16       3.48     0 ## 5 2012-09-18 2012-09-18 05:05:58   8.45 9.127267  0.16       3.42     0 ## 6 2012-09-18 2012-09-18 05:20:58   8.46 9.137079  0.16       3.38     0 ##     DO.mod ## 1 8.410000 ## 2 8.421013 ## 3 8.431849 ## 4 8.442322 ## 5 8.452734 ## 6 8.463325"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/ode_methods.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"ODE Methods","text":"vignette demonstrates can choose compare ODE solution method, numerical algorithm used translate given set daily metabolism parameters time series dissolved oxygen predictions.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/ode_methods.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"ODE Methods","text":"Load streamMetabolizer helper packages. Get data work : ’re requesting three days data 30-minute resolution. Thanks Bob Hall test data.","code":"library(streamMetabolizer) library(dplyr) library(ggplot2) dat <- data_metab('3','30')"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/ode_methods.html","id":"numerical-integration","dir":"Articles","previous_headings":"","what":"Numerical integration","title":"ODE Methods","text":"Inspired Song et al. 2016, can now several types numerical integration compare . lsoda often fails converge, rk4 trapezoid perform well similarly one another (trapezoid faster). trapezoid available MLE Bayesian models. fit MLE models using four different ODE methods. Now create data.frame compare options. can plot predictions method.  inspect details, can also plot predictions deviations rk4 method.","code":"mm_euler <- metab(specs(mm_name('mle', ode_method='euler')), dat) mm_trapezoid <- metab(specs(mm_name('mle', ode_method='trapezoid')), dat) mm_rk4 <- metab(specs(mm_name('mle', ode_method='rk4')), dat) mm_lsoda <- metab(specs(mm_name('mle', ode_method='lsoda')), dat) ## Warning in metab_fun(specs = specs, data = data, data_daily = data_daily, : we've seen bad results ## with ODE methods 'lsoda', 'lsodes', and 'lsodar'. Use at your own risk ## DINTDY-  T (=R1) illegal       ## In above message, R1 = 28 ##   ##       T not in interval TCUR - HU (= R1) to TCUR (=R2)       ## In above message, R1 = 27.1702, R2 = 27.1702 ##   ## DINTDY-  T (=R1) illegal       ## In above message, R1 = 29 ##   ##       T not in interval TCUR - HU (= R1) to TCUR (=R2)       ## In above message, R1 = 27.1702, R2 = 27.1702 ##   ## DLSODA-  Trouble in DINTDY.  ITASK = I1, TOUT = R1 ## In above message, I1 = 1 ##   ## In above message, R1 = 29 ## DO.standard <- rep(predict_DO(mm_rk4)$'DO.mod', times=4) ode_preds <- bind_rows(   mutate(predict_DO(mm_euler), method='euler'),   mutate(predict_DO(mm_trapezoid), method='trapezoid'),   mutate(predict_DO(mm_rk4), method='rk4'),   mutate(predict_DO(mm_lsoda), method='lsoda')) %>%   mutate(DO.mod.diffeuler = DO.mod - DO.standard) ggplot(ode_preds, aes(x=solar.time)) +   geom_point(aes(y=DO.obs), color='grey', alpha=0.3) +   geom_line(aes(y=DO.mod, color=method), size=1) +   theme_bw() ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. ## Warning: Removed 48 rows containing missing values (`geom_line()`). ggplot(ode_preds, aes(x=solar.time)) +   geom_point(aes(y=pmax(-0.2, pmin(0.2, DO.mod.diffeuler)), color=method), size=1, alpha=0.8) +   scale_y_continuous(limits=c(-0.2,0.2)) +   ylab(\"Deviations from rk4 (capped at +/- 0.2)\") +   theme_bw() ## Warning: Removed 48 rows containing missing values (`geom_point()`)."},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Simulations","text":"vignette shows simulate dissolved oxygen ‘observations’ purpose exploring testing metabolism models.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Simulations","text":"Load streamMetabolizer helper packages. Get data work : ’re requesting three days data 15-minute resolution. Thanks Bob Hall test data.","code":"library(streamMetabolizer) library(dplyr) library(ggplot2) dat <- data_metab('3', '15')"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"creating-a-sim-model","dir":"Articles","previous_headings":"","what":"Creating a Sim Model","title":"Simulations","text":"create simulation model, Choose model structure Choose daily metabolism parameters Choose model specifications Create model Generate predictions (simulations) model","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"choosing-the-model-structure","dir":"Articles","previous_headings":"Creating a Sim Model","what":"1. Choosing the model structure","title":"Simulations","text":"can simulate data using GPP ER functions available MLE models. Simulations done models type 'sim' otherwise take similar arguments MLE model. ’ll use model ER function temperature.","code":"name_sim_q10 <- mm_name('sim', ER_fun='q10temp')"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"choosing-the-daily-parameters","dir":"Articles","previous_headings":"Creating a Sim Model","what":"2. Choosing the daily parameters","title":"Simulations","text":"simulate data, need specify daily parameters beforehand. model structure determines parameters needed. three good ways learn daily parameters need specify.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"a--trial-and-error","dir":"Articles","previous_headings":"Creating a Sim Model > 2. Choosing the daily parameters","what":"A. Trial and error","title":"Simulations","text":"learn parameter needs trial error, simply create model equations want without daily inputs, ask parameters, read error message get list parameters. ’s fine use defaults specifications now. Great: need GPP.daily, ER20, K600.daily. Now can pick values parameters put data.frame.","code":"mm_sim_q10_trial <- metab(specs(name_sim_q10), dat) get_params(mm_sim_q10_trial) ##         date K600.daily GPP.daily       ER20 err.obs.sigma err.obs.phi err.proc.sigma err.proc.phi ## 1 2012-09-18   0.000000  5.044464  -3.974127          0.01           0            0.2            0 ## 2 2012-09-19   0.000000  5.727886 -10.283336          0.01           0            0.2            0 ## 3 2012-09-20   5.040664  7.255083 -10.702817          0.01           0            0.2            0 ##   discharge.daily ## 1        24.96247 ## 2        18.21601 ## 3        25.16261 params_sim_q10a <- data.frame(date=as.Date(paste0('2012-09-',18:20)), GPP.daily=2.1, ER20=-5:-3, K600.daily=16) params_sim_q10a ##         date GPP.daily ER20 K600.daily ## 1 2012-09-18       2.1   -5         16 ## 2 2012-09-19       2.1   -4         16 ## 3 2012-09-20       2.1   -3         16"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"b--generate-parameters-from-another-model","dir":"Articles","previous_headings":"Creating a Sim Model > 2. Choosing the daily parameters","what":"B. Generate parameters from another model","title":"Simulations","text":"can also use fitted parameters another model input simulation model. method useful identifying realistic parameters /exploring model fitting process didn’t work well. First fit MLE model data using GPP_fun ER_fun want. ’s fine () use defaults specifications. ask parameters right format (without columns uncertainty messages).","code":"mm_mle_q10 <- metab(specs(mm_name('mle', ER_fun='q10temp')), data=dat) params_sim_q10b <- get_params(mm_mle_q10, uncertainty='none', messages=FALSE) params_sim_q10b ##         date GPP.daily      ER20 K600.daily ## 1 2012-09-18  2.051333 -2.696135   22.36965 ## 2 2012-09-19  2.436224 -3.147503   24.27164 ## 3 2012-09-20  2.090918 -2.370546   22.84253"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"c--look-at-mm_name","dir":"Articles","previous_headings":"Creating a Sim Model > 2. Choosing the daily parameters","what":"C. Look at ?mm_name","title":"Simulations","text":"Try . put lots details help file. Check documentation GPP_fun ER_fun args particular. reading documentation ’ll create data.frame format options B.","code":"?mm_name"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"choosing-the-specifications","dir":"Articles","previous_headings":"Creating a Sim Model","what":"3. Choosing the specifications","title":"Simulations","text":"choosing parameters, next step choose rest specifications. main difference sim models models can choose values probability distributions observation /process errors. See ?specs details distribution parameters err_obs_sigma, err_obs_phi, err_proc_sigma, err_proc_phi.","code":"specs_sim_q10 <- specs(name_sim_q10, err_obs_sigma=0, err_proc_sigma=1, K600_daily=NULL, GPP_daily=NULL, ER20=NULL) specs_sim_q10 ## Model specifications: ##   model_name        s_np_oipcpi_tr_plrqkm.rnorm                                       ##   day_start         4                                                                 ##   day_end           28                                                                ##   day_tests         full_day, even_timesteps, complete_data, pos_discharge, pos_depth ##   required_timestep NA                                                                ##   discharge_daily   function; see element [['discharge_daily']] for details           ##   DO_mod_1          NULL                                                              ##   K600_daily        NULL                                                              ##   GPP_daily         NULL                                                              ##   ER20              NULL                                                              ##   err_obs_sigma     0                                                                 ##   err_obs_phi       0                                                                 ##   err_proc_sigma    1                                                                 ##   err_proc_phi      0                                                                 ##   err_round         NA                                                                ##   sim_seed          NA"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"creating-a-model","dir":"Articles","previous_headings":"Creating a Sim Model","what":"4. Creating a model","title":"Simulations","text":"Now can create simulation model much MLE Bayesian model. ’ll make two models , one parameter sets created .","code":"mm_sim_q10a <- metab(specs_sim_q10, dat, data_daily=params_sim_q10a) mm_sim_q10b <- metab(specs_sim_q10, dat, data_daily=params_sim_q10b)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"generating-predictions","dir":"Articles","previous_headings":"Creating a Sim Model","what":"5. Generating predictions","title":"Simulations","text":"Predictions simulations one model type sim. output predict_DO sim models includes three concentration columns. .pure concentrations GPP, ER, K600 parameters exactly described occurred stream. ’s process error model, .mod differ .pure .mod also contains process error fourth driver (top GPP, ER, reaeration) -situ concentrations. (.mod .pure identical ’s process error.) Lastly, .obs simulation sensor might record; includes everything .mod plus observation error representing inaccuracies sensor reads records concentration. three variables plotted muted-color line (.pure), bold dark line (.mod), brightly colored points (.obs). .pure mostly hidden behind others unless errors large.","code":"head(predict_DO(mm_sim_q10a)) ##         date          solar.time   DO.sat depth temp.water light  DO.pure   DO.mod   DO.obs ## 1 2012-09-18 2012-09-18 04:05:58 9.083329  0.16       3.60     0 8.410000 8.410000 8.410000 ## 2 2012-09-18 2012-09-18 04:20:58 9.093063  0.16       3.56     0 8.333532 8.293360 8.293360 ## 3 2012-09-18 2012-09-18 04:35:58 9.105254  0.16       3.51     0 8.266667 8.309765 8.309765 ## 4 2012-09-18 2012-09-18 04:50:58 9.112582  0.16       3.48     0 8.208204 8.276758 8.276758 ## 5 2012-09-18 2012-09-18 05:05:58 9.127267  0.16       3.42     0 8.157374 8.227139 8.227139 ## 6 2012-09-18 2012-09-18 05:20:58 9.137079  0.16       3.38     0 8.113493 8.197983 8.197983 head(predict_DO(mm_sim_q10b)) ##         date          solar.time   DO.sat depth temp.water light  DO.pure   DO.mod   DO.obs ## 1 2012-09-18 2012-09-18 04:05:58 9.083329  0.16       3.60     0 8.410000 8.410000 8.410000 ## 2 2012-09-18 2012-09-18 04:20:58 9.093063  0.16       3.56     0 8.431047 8.433251 8.433251 ## 3 2012-09-18 2012-09-18 04:35:58 9.105254  0.16       3.51     0 8.450642 8.466022 8.466022 ## 4 2012-09-18 2012-09-18 04:50:58 9.112582  0.16       3.48     0 8.468822 8.483553 8.483553 ## 5 2012-09-18 2012-09-18 05:05:58 9.127267  0.16       3.42     0 8.485984 8.432807 8.432807 ## 6 2012-09-18 2012-09-18 05:20:58 9.137079  0.16       3.38     0 8.502466 8.394072 8.394072 plot_DO_preds(mm_sim_q10a, y_var='conc') plot_DO_preds(mm_sim_q10b, y_var='conc')"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"simulating-errors","dir":"Articles","previous_headings":"","what":"Simulating Errors","title":"Simulations","text":"main purpose simulation models generate ‘observations’ error, .e., noise, see whether models can recover underlying parameters despite noise. section ’ll use simulation GPP saturating function light. ’ll use method B choose daily parameters.","code":"specs_sim_sat <- specs(mm_name('sim', GPP_fun='satlight'), err_obs_sigma=0, err_proc_sigma=1, K600_daily=NULL, Pmax=NULL, alpha=NULL, ER_daily=NULL) params_sim_sat <- get_params(metab(specs(mm_name('mle', GPP_fun='satlight')), data=dat), uncertainty='none', messages=FALSE)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"innovative-errors","dir":"Articles","previous_headings":"Simulating Errors","what":"Innovative errors","title":"Simulations","text":"default, simulations generate new noise time request predictions.","code":"mm_sim_sat_i <- metab(specs_sim_sat, dat, data_daily=params_sim_sat) plot_DO_preds(mm_sim_sat_i, y_var='conc') plot_DO_preds(mm_sim_sat_i, y_var='conc')"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"fixed-errors","dir":"Articles","previous_headings":"Simulating Errors","what":"Fixed errors","title":"Simulations","text":"Alternatively, can revise value sim_seed number (number) simulation produces noise time.","code":"mm_sim_sat_f <- metab(revise(specs_sim_sat, sim_seed=47), dat, data_daily=params_sim_sat) plot_DO_preds(mm_sim_sat_f, y_var='conc') plot_DO_preds(mm_sim_sat_f, y_var='conc')"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"inspecting-models","dir":"Articles","previous_headings":"","what":"Inspecting Models","title":"Simulations","text":"’ll use slightly longer dataset demonstrate potential random noise levels observations (every time run predict_DO()) daily parameters (every time define data_daily). Sim models print parameters asterisks denote values fixed rather fitted. Sim models produce daily estimates GPP ER, help choosing simulation parameters. GPP ER predictions error bars ’re direct calculations daily parameters.","code":"dat <- data_metab('10', '30') params <- data.frame(date=as.Date(paste0('2012-09-',18:27)), Pmax=rnorm(10, 6, 2), alpha=rnorm(10, 0.01, 0.001), ER20=rnorm(10, -4, 2), K600.daily=16) specs <- specs(mm_name('sim', GPP_fun='satlight', ER_fun='q10temp'), err_obs_sigma=0.2, err_proc_sigma=1, K600_daily=NULL, Pmax=NULL, alpha=NULL, ER20=NULL) mm <- metab(specs, data=dat, data_daily=params) mm ## metab_model of type metab_sim  ## streamMetabolizer version 0.12.1  ## Specifications: ##   model_name        s_np_oipcpi_tr_psrqkm.rnorm                                       ##   day_start         4                                                                 ##   day_end           28                                                                ##   day_tests         full_day, even_timesteps, complete_data, pos_discharge, pos_depth ##   required_timestep NA                                                                ##   discharge_daily   function; see element [['discharge_daily']] for details           ##   DO_mod_1          NULL                                                              ##   K600_daily        NULL                                                              ##   Pmax              NULL                                                              ##   alpha             NULL                                                              ##   ER20              NULL                                                              ##   err_obs_sigma     0.2                                                               ##   err_obs_phi       0                                                                 ##   err_proc_sigma    1                                                                 ##   err_proc_phi      0                                                                 ##   err_round         NA                                                                ##   sim_seed          NA                                                                ## Fitting time: 0.948 secs elapsed ## Parameters (10 dates)(* = fixed value): ##          date K600.daily      Pmax        alpha       ER20 err.obs.sigma err.obs.phi err.proc.sigma ## 1  2012-09-18        16* 8.499653* 0.010029735* -4.780125*          0.2           0              1  ## 2  2012-09-19        16* 7.007731* 0.010537178* -4.657027*          0.2           0              1  ## 3  2012-09-20        16* 3.238979* 0.009774623* -3.654986*          0.2           0              1  ## 4  2012-09-21        16* 6.647592* 0.011448446* -5.116775*          0.2           0              1  ## 5  2012-09-22        16* 7.267074* 0.011769600* -3.637974*          0.2           0              1  ## 6  2012-09-23        16* 7.610239* 0.011205473* -8.047155*          0.2           0              1  ## 7  2012-09-24        16* 8.687355* 0.008570020* -1.581533*          0.2           0              1  ## 8  2012-09-25        16* 6.872180* 0.010270915* -5.840345*          0.2           0              1  ## 9  2012-09-26        16* 5.671489* 0.009372155* -7.103388*          0.2           0              1  ## 10 2012-09-27        16* 8.824851* 0.011480065* -3.531540*          0.2           0              1  ##    err.proc.phi discharge.daily msgs.fit ## 1            0        18.48279        NA ## 2            0        20.53385        NA ## 3            0        26.98325        NA ## 4            0        24.80945        NA ## 5            0        19.54204        NA ## 6            0        24.12056        NA ## 7            0        23.64281        NA ## 8            0        19.08338        NA ## 9            0        18.24980        NA ## 10           0        20.94758        NA ## Predictions (10 dates): ##          date      GPP GPP.lower GPP.upper        ER ER.lower ER.upper msgs.fit msgs.pred ## 1  2012-09-18 3.322718        NA        NA -2.733984       NA       NA       NA           ## 2  2012-09-19 2.917873        NA        NA -2.714620       NA       NA       NA           ## 3  2012-09-20 1.495126        NA        NA -2.132107       NA       NA       NA           ## 4  2012-09-21 2.823602        NA        NA -2.997445       NA       NA       NA           ## 5  2012-09-22 3.032138        NA        NA -2.116472       NA       NA       NA           ## 6  2012-09-23 3.088538        NA        NA -4.810156       NA       NA       NA           ## 7  2012-09-24 3.063456        NA        NA -0.946805       NA       NA       NA           ## 8  2012-09-25 2.768727        NA        NA -3.188522       NA       NA       NA           ## 9  2012-09-26 2.326526        NA        NA -3.966624       NA       NA       NA           ## 10 2012-09-27 3.379752        NA        NA -1.901252       NA       NA       NA plot_metab_preds(mm)"},{"path":"http://usgs-r.github.io/streamMetabolizer/articles/simulations.html","id":"multi-day-simulations","dir":"Articles","previous_headings":"","what":"Multi-Day Simulations","title":"Simulations","text":"can also use sim models simulate variation across many days. Let’s start generating 60-day timeseries water temperature, .sat, etc. concatenating 6 copies 10 days French Creek data: can specify distribution rather specific values GPP, ER, /K600 parameters. fact, default don’t specify daily data: functions get called generate new values K600.daily, GPP.daily, ER.daily time call get_params, predict_metab, predict_DO. (’ll random values time set sim_seed.) can also set err_obs_sigma error terms daily values /functions. defaults simple numeric values get replicated every date, values can also vectors functions, GPP_daily, etc. simulation emphasized day--day variation err_obs_sigma. ’s simulation emphasizing variation err_proc_sigma err_proc_phi: daily parameter functions assign specs() can refer previous daily parameters list. example, ER_daily can function GPP.daily. Values GPP.daily may specified GPP.daily column data_daily GPP_daily argument specs(); ER function refer period-separated name, GPP.daily. K600_daily function can also take advantage pre-specified model structures relating K discharge. December 2016, Kb formulation (pool_K600 = 'binned') one available. ’s good one! See parameters can set calling specs one preliminary time Kb model name: new relevant arguments K600_lnQ_nodes_centers, K600_lnQ_cnode_meanlog, K600_lnQ_cnode_sdlog, K600_lnQ_nodediffs_meanlog, K600_lnQ_nodediffs_sdlog, lnK600_lnQ_nodes. defaults might work just fine , changing lnK600_lnQ_nodes especially non-recommended. ’s probably useful dial noise relating K600.daily lnK600_lnQ_nodes: model, even K~Q relationship simulated call get_params, predict_metab, predict_DO. can inspect relationship looking K600_eqn attribute output get_params: centers nodes essential pieces final piecewise relationship (blue points line). can also identify predictions specific dates discharges along line (purple points) K600 params result adding noise predictions (red points):  ```","code":"dat <- data_metab('10','15') datlen <- as.numeric(diff(range(dat$solar.time)) + as.difftime(15, units='mins'), units='days') dat20 <- bind_rows(lapply((0:1)*10, function(add) {   mutate(dat, solar.time = solar.time + as.difftime(add, units='days')) })) sp <- specs(mm_name('sim')) lapply(unclass(sp)[c('K600_daily','GPP_daily','ER_daily')], function(fun) {   list(code=attr(fun, 'srcref'), example_vals=fun(n=10)) }) ## $K600_daily ## $K600_daily$code ## NULL ##  ## $K600_daily$example_vals ##  [1] 0.0000000 0.0000000 3.0583640 0.0000000 0.1887827 0.4720585 1.8686292 6.0485319 0.0000000 ## [10] 8.9566118 ##  ##  ## $GPP_daily ## $GPP_daily$code ## NULL ##  ## $GPP_daily$example_vals ##  [1]  3.161192  6.373849  9.711270 10.109875 14.943583  6.628890  5.215721  5.332303 10.981088 ## [10]  4.136745 ##  ##  ## $ER_daily ## $ER_daily$code ## NULL ##  ## $ER_daily$example_vals ##  [1]  -7.3203544 -10.7802735  -5.8063843  -6.9261870  -9.8178819 -18.4065687 -12.8070041  -6.6681187 ##  [9] -10.5264190  -0.4049555 mm <- metab(sp, dat20, data_daily=NULL) get_params(mm)[c('date','K600.daily','GPP.daily','ER.daily')] ##          date K600.daily  GPP.daily   ER.daily ## 1  2012-09-18   8.615447  6.2576824 -14.132916 ## 2  2012-09-19   3.124526 11.4300476  -2.311922 ## 3  2012-09-20   0.000000  6.6522123  -6.585340 ## 4  2012-09-21   1.225783  8.5743273  -8.483403 ## 5  2012-09-22   3.199606 11.5508729 -11.722357 ## 6  2012-09-23   4.243296  3.4825514 -11.198810 ## 7  2012-09-24   8.064749 10.7628141 -10.547439 ## 8  2012-09-25   2.644212  7.5847369  -9.663539 ## 9  2012-09-26   0.000000  0.1680949 -13.505357 ## 10 2012-09-27   6.564739  7.5989614 -15.330240 ## 11 2012-09-28   0.000000  6.2629215 -14.659204 ## 12 2012-09-29   0.000000 13.6382443 -13.038606 ## 13 2012-09-30   0.000000  3.0040451  -7.564109 ## 14 2012-10-01   1.745152  5.4595456  -3.798250 ## 15 2012-10-02   6.769505  0.3578242 -12.448780 ## 16 2012-10-03   0.000000  7.2189583  -5.966864 ## 17 2012-10-04   5.175161  9.5603642 -16.537495 ## 18 2012-10-05  12.837549  7.2544885  -6.059058 ## 19 2012-10-06   8.962305 12.4436716 -12.446286 ## 20 2012-10-07   6.293684  3.0785577  -7.594937 sp <- specs('sim', err_obs_sigma=function(n, ...) -0.01*((1:n) - (n/2))^2 + 1, err_proc_sigma=function(n, ...) rnorm(n, 0.1, 0.005), err_proc_phi=seq(0, 1, length.out=20), GPP_daily=3, ER_daily=-4, K600_daily=16) mm <- metab(sp, dat20) get_params(mm) ##          date K600.daily GPP.daily ER.daily err.obs.sigma err.obs.phi err.proc.sigma err.proc.phi ## 1  2012-09-18         16         3       -4          0.19           0     0.10435026   0.00000000 ## 2  2012-09-19         16         3       -4          0.36           0     0.10223254   0.05263158 ## 3  2012-09-20         16         3       -4          0.51           0     0.10185578   0.10526316 ## 4  2012-09-21         16         3       -4          0.64           0     0.09580782   0.15789474 ## 5  2012-09-22         16         3       -4          0.75           0     0.10400943   0.21052632 ## 6  2012-09-23         16         3       -4          0.84           0     0.09601550   0.26315789 ## 7  2012-09-24         16         3       -4          0.91           0     0.09450419   0.31578947 ## 8  2012-09-25         16         3       -4          0.96           0     0.09455692   0.36842105 ## 9  2012-09-26         16         3       -4          0.99           0     0.10673801   0.42105263 ## 10 2012-09-27         16         3       -4          1.00           0     0.09326621   0.47368421 ## 11 2012-09-28         16         3       -4          0.99           0     0.09772286   0.52631579 ## 12 2012-09-29         16         3       -4          0.96           0     0.09997611   0.57894737 ## 13 2012-09-30         16         3       -4          0.91           0     0.09687015   0.63157895 ## 14 2012-10-01         16         3       -4          0.84           0     0.09281628   0.68421053 ## 15 2012-10-02         16         3       -4          0.75           0     0.10334325   0.73684211 ## 16 2012-10-03         16         3       -4          0.64           0     0.10145690   0.78947368 ## 17 2012-10-04         16         3       -4          0.51           0     0.10332814   0.84210526 ## 18 2012-10-05         16         3       -4          0.36           0     0.09862601   0.89473684 ## 19 2012-10-06         16         3       -4          0.19           0     0.09368491   0.94736842 ## 20 2012-10-07         16         3       -4          0.00           0     0.09834675   1.00000000 ##    discharge.daily ## 1         18.12660 ## 2         15.04297 ## 3         18.41768 ## 4         19.62252 ## 5         22.61341 ## 6         15.64998 ## 7         19.77422 ## 8         20.97165 ## 9         25.86877 ## 10        23.04301 ## 11        19.60549 ## 12        14.96829 ## 13        20.03466 ## 14        19.62021 ## 15        17.46475 ## 16        21.48743 ## 17        22.15637 ## 18        24.34946 ## 19        20.03454 ## 20        21.62585 plot_DO_preds(mm) sp <- specs('sim', err_obs_sigma=0.01, err_proc_sigma=function(n, ...) rep(c(0.5, 4), each=10), err_proc_phi=rep(seq(0, 0.8, length.out=10), times=2), GPP_daily=3, ER_daily=-4, K600_daily=16) mm <- metab(sp, dat20) get_params(mm) ##          date K600.daily GPP.daily ER.daily err.obs.sigma err.obs.phi err.proc.sigma err.proc.phi ## 1  2012-09-18         16         3       -4          0.01           0            0.5   0.00000000 ## 2  2012-09-19         16         3       -4          0.01           0            0.5   0.08888889 ## 3  2012-09-20         16         3       -4          0.01           0            0.5   0.17777778 ## 4  2012-09-21         16         3       -4          0.01           0            0.5   0.26666667 ## 5  2012-09-22         16         3       -4          0.01           0            0.5   0.35555556 ## 6  2012-09-23         16         3       -4          0.01           0            0.5   0.44444444 ## 7  2012-09-24         16         3       -4          0.01           0            0.5   0.53333333 ## 8  2012-09-25         16         3       -4          0.01           0            0.5   0.62222222 ## 9  2012-09-26         16         3       -4          0.01           0            0.5   0.71111111 ## 10 2012-09-27         16         3       -4          0.01           0            0.5   0.80000000 ## 11 2012-09-28         16         3       -4          0.01           0            4.0   0.00000000 ## 12 2012-09-29         16         3       -4          0.01           0            4.0   0.08888889 ## 13 2012-09-30         16         3       -4          0.01           0            4.0   0.17777778 ## 14 2012-10-01         16         3       -4          0.01           0            4.0   0.26666667 ## 15 2012-10-02         16         3       -4          0.01           0            4.0   0.35555556 ## 16 2012-10-03         16         3       -4          0.01           0            4.0   0.44444444 ## 17 2012-10-04         16         3       -4          0.01           0            4.0   0.53333333 ## 18 2012-10-05         16         3       -4          0.01           0            4.0   0.62222222 ## 19 2012-10-06         16         3       -4          0.01           0            4.0   0.71111111 ## 20 2012-10-07         16         3       -4          0.01           0            4.0   0.80000000 ##    discharge.daily ## 1         17.88153 ## 2         20.52637 ## 3         19.92024 ## 4         22.88503 ## 5         21.77318 ## 6         16.45494 ## 7         17.08716 ## 8         19.06880 ## 9         21.52810 ## 10        19.10346 ## 11        17.64336 ## 12        20.78854 ## 13        20.55039 ## 14        23.39010 ## 15        20.56999 ## 16        20.06276 ## 17        16.96100 ## 18        21.39005 ## 19        17.15138 ## 20        17.99042 plot_DO_preds(mm) sp <- specs('sim', err_obs_sigma=0.01, err_proc_sigma=0.4, K600_daily=16, GPP_daily=function(n, ...) round(rnorm(n, 4, 1), 1), ER_daily=function(GPP.daily, ...) GPP.daily*-2) mm <- metab(sp, dat20) get_params(mm) ##          date K600.daily GPP.daily ER.daily err.obs.sigma err.obs.phi err.proc.sigma err.proc.phi ## 1  2012-09-18         16       5.2    -10.4          0.01           0            0.4            0 ## 2  2012-09-19         16       1.5     -3.0          0.01           0            0.4            0 ## 3  2012-09-20         16       3.2     -6.4          0.01           0            0.4            0 ## 4  2012-09-21         16       4.9     -9.8          0.01           0            0.4            0 ## 5  2012-09-22         16       3.9     -7.8          0.01           0            0.4            0 ## 6  2012-09-23         16       4.6     -9.2          0.01           0            0.4            0 ## 7  2012-09-24         16       3.2     -6.4          0.01           0            0.4            0 ## 8  2012-09-25         16       3.7     -7.4          0.01           0            0.4            0 ## 9  2012-09-26         16       4.3     -8.6          0.01           0            0.4            0 ## 10 2012-09-27         16       4.5     -9.0          0.01           0            0.4            0 ## 11 2012-09-28         16       3.8     -7.6          0.01           0            0.4            0 ## 12 2012-09-29         16       5.3    -10.6          0.01           0            0.4            0 ## 13 2012-09-30         16       4.3     -8.6          0.01           0            0.4            0 ## 14 2012-10-01         16       5.4    -10.8          0.01           0            0.4            0 ## 15 2012-10-02         16       5.8    -11.6          0.01           0            0.4            0 ## 16 2012-10-03         16       4.8     -9.6          0.01           0            0.4            0 ## 17 2012-10-04         16       4.6     -9.2          0.01           0            0.4            0 ## 18 2012-10-05         16       2.5     -5.0          0.01           0            0.4            0 ## 19 2012-10-06         16       3.9     -7.8          0.01           0            0.4            0 ## 20 2012-10-07         16       5.2    -10.4          0.01           0            0.4            0 ##    discharge.daily ## 1         20.83054 ## 2         17.16700 ## 3         16.35257 ## 4         23.20141 ## 5         22.61177 ## 6         22.95073 ## 7         20.21548 ## 8         21.80246 ## 9         18.95588 ## 10        14.16091 ## 11        20.13013 ## 12        20.68812 ## 13        17.33819 ## 14        18.48938 ## 15        20.27718 ## 16        16.76679 ## 17        18.82079 ## 18        20.08138 ## 19        21.28689 ## 20        24.07756 sp <- specs(mm_name('sim', pool_K600='binned', ER_fun='q10temp'), sim_seed=6332) mm <- metab(revise(sp, K600_daily=function(n, K600_daily_predlog, ...) pmax(0, rnorm(n, exp(K600_daily_predlog), 0.4))), dat20) pars <- get_params(mm) pars ##          date discharge.daily K600.daily GPP.daily       ER20 err.obs.sigma err.obs.phi ## 1  2012-09-18        17.95254   3.276343 10.861268  -4.839845          0.01           0 ## 2  2012-09-19        19.74833   4.258166  4.278131  -4.599670          0.01           0 ## 3  2012-09-20        24.11093   6.660064  4.872679  -5.062334          0.01           0 ## 4  2012-09-21        19.23720   2.995546 10.715018  -6.466619          0.01           0 ## 5  2012-09-22        21.83327   5.494783  3.220689  -7.685111          0.01           0 ## 6  2012-09-23        18.66778   3.104385  9.406120 -12.425723          0.01           0 ## 7  2012-09-24        21.66651   5.629606  7.829844 -13.288060          0.01           0 ## 8  2012-09-25        23.27941   4.914728 12.902530  -5.806561          0.01           0 ## 9  2012-09-26        18.18747   3.135139  1.363060 -10.178470          0.01           0 ## 10 2012-09-27        22.76868   5.704705  4.159898  -7.718060          0.01           0 ## 11 2012-09-28        19.56126   3.960659  8.879820  -6.513834          0.01           0 ## 12 2012-09-29        20.50053   4.006042 10.583638  -4.917149          0.01           0 ## 13 2012-09-30        17.56558   2.382708  1.277344  -7.584540          0.01           0 ## 14 2012-10-01        23.58988   6.083747  6.481855 -12.646758          0.01           0 ## 15 2012-10-02        20.66988   4.140573  4.473403 -10.472093          0.01           0 ## 16 2012-10-03        22.45883   5.352439  9.705709 -15.281010          0.01           0 ## 17 2012-10-04        24.31525   6.654290  3.102061  -5.419053          0.01           0 ## 18 2012-10-05        20.59640   4.464318  1.188528  -8.078135          0.01           0 ## 19 2012-10-06        22.09928   5.644090  9.026385  -9.683760          0.01           0 ## 20 2012-10-07        23.84877   6.174243  7.358561  -8.962819          0.01           0 ##    err.proc.sigma err.proc.phi ## 1             0.2            0 ## 2             0.2            0 ## 3             0.2            0 ## 4             0.2            0 ## 5             0.2            0 ## 6             0.2            0 ## 7             0.2            0 ## 8             0.2            0 ## 9             0.2            0 ## 10            0.2            0 ## 11            0.2            0 ## 12            0.2            0 ## 13            0.2            0 ## 14            0.2            0 ## 15            0.2            0 ## 16            0.2            0 ## 17            0.2            0 ## 18            0.2            0 ## 19            0.2            0 ## 20            0.2            0 attr(pars, 'K600_eqn') ## $K600_lnQ_nodes_centers ## [1] 2.7 2.9 3.1 3.3 ##  ## $K600_lnQ_cnode_meanlog ##  [1] 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 ## [11] 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 ##  ## $K600_lnQ_cnode_sdlog ##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ##  ## $K600_lnQ_nodediffs_meanlog ##  [1] 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 ##  ## $K600_lnQ_nodediffs_sdlog ##  [1] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ##  ## $lnK600_lnQ_nodes ## [1] 0.4988654 1.1196713 1.7336039 1.9001201 ##  ## $K600_daily_predlog ##  [1] 1.081589 1.374665 1.802429 1.294170 1.682755 1.201935 1.659220 1.773209 1.121921 1.754740 ## [11] 1.345448 1.489414 1.013952 1.784239 1.514669 1.743331 1.809455 1.503737 1.719929 1.793327 KQ <- as.data.frame(attr(pars, 'K600_eqn')[c('K600_lnQ_nodes_centers', 'lnK600_lnQ_nodes')]) Kpred <- mutate(select(pars, date, discharge.daily, K600.daily), K600_daily_predlog=attr(pars, 'K600_eqn')$K600_daily_predlog) ggplot(KQ, aes(x=K600_lnQ_nodes_centers, y=lnK600_lnQ_nodes)) + geom_line(color='blue') + geom_point(color='blue') +    geom_point(data=Kpred, aes(x=log(discharge.daily), y=K600_daily_predlog), color='purple') +   geom_point(data=Kpred, aes(x=log(discharge.daily), y=log(K600.daily)), color='red')"},{"path":"http://usgs-r.github.io/streamMetabolizer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alison P. Appling. Author, maintainer. Robert O. Hall. Author. Maite Arroita. Author. Charles B. Yackulic. Author.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Appling, Alison P., Robert O. Hall, Charles B. Yackulic, Maite Arroita. “Overcoming Equifinality: Leveraging Long Time Series Stream Metabolism Estimation.” Journal Geophysical Research: Biogeosciences 123, . 2 (February 2018): 624–45. https://doi.org/10.1002/2017JG004140.","code":"@Article{,   author = {Alison P. Appling and Robert O. {Hall Jr.} and Charles B. Yackulic and Maite Arroita},   title = {Overcoming Equifinality: Leveraging Long Time Series for Stream Metabolism Estimation},   journal = {Journal of Geophysical Research: Biogeosciences},   year = {2018},   volume = {123},   number = {2},   doi = {10.1002/2017JG004140},   url = {https://github.com/USGS-R/streamMetabolizer}, }"},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"streammetabolizer-models-for-estimating-aquatic-photosynthesis-and-respiration","dir":"","previous_headings":"","what":"Models for Estimating Aquatic Photosynthesis and Respiration","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"streamMetabolizer R package uses inverse modeling estimate aquatic photosynthesis respiration (collectively, metabolism) time series data dissolved oxygen, water temperature, depth, light. package assists data preparation, handles data gaps modeling, provides tabular graphical reports model outputs. Several time-honored methods implemented along many promising new variants produce accurate precise metabolism estimates. package described, special focus Bayesian model options, Appling et al. 2018a. application 356 streams across U.S. described Appling et al. 2018b. Appling, . P., Hall, R. O., Yackulic, C. B., & Arroita, M. (2018a). Overcoming equifinality: Leveraging long time series stream metabolism estimation. Journal Geophysical Research: Biogeosciences, 123(2), 624–645. https://doi.org/10.1002/2017JG004140 Appling, . P., Read, J. S., Winslow, L. ., Arroita, M., Bernhardt, E. S., Griffiths, N. ., Hall, R. O., Harvey, J. W., Heffernan, J. B., Stanley, E. H., Stets, E. G., & Yackulic, C. B. (2018b). metabolic regimes 356 rivers United States. Scientific Data, 5(1), 180292. https://doi.org/10.1038/sdata.2018.292 see recommended citation package, please run citation('streamMetabolizer') R prompt.","code":"! In summer or fall 2023, this package will move from ! https://github.com/USGS-R/streamMetabolizer to ! https://github.com/DOI-USGS/streamMetabolizer. ! Please update your links accordingly. citation('streamMetabolizer') ##  ## To cite streamMetabolizer in publications, please use: ##  ##   Appling, Alison P., Robert O. Hall, Charles B. Yackulic, and Maite ##   Arroita. “Overcoming Equifinality: Leveraging Long Time Series for ##   Stream Metabolism Estimation.” Journal of Geophysical Research: ##   Biogeosciences 123, no. 2 (February 2018): 624–45. ##   https://doi.org/10.1002/2017JG004140. ##  ## A BibTeX entry for LaTeX users is ##  ##   @Article{, ##     author = {Alison P. Appling and Robert O. {Hall Jr.} and Charles B. Yackulic and Maite Arroita}, ##     title = {Overcoming Equifinality: Leveraging Long Time Series for Stream Metabolism Estimation}, ##     journal = {Journal of Geophysical Research: Biogeosciences}, ##     year = {2018}, ##     volume = {123}, ##     number = {2}, ##     doi = {10.1002/2017JG004140}, ##     url = {https://github.com/USGS-R/streamMetabolizer}, ##   }"},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"install streamMetabolizer package, use remotes package (running install.packages('remotes') first needed). use remotes::install_github() convenient set GitHub Personal Access Token (PAT). several methods setting PATs within R; simplest call `Sys.setenv(GITHUB_PAT=“yyyy”), replacing yyyy PAT established GitHub website. may first need install unitted dependency: can install cutting edge version streamMetabolizer command:","code":"remotes::install_github('appling/unitted') remotes::install_github(   \"USGS-R/streamMetabolizer\", # soon to be \"DOI-USGS/streamMetabolizer\"   build_vignettes = TRUE)"},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"software-dependencies-for-bayesian-models","dir":"","previous_headings":"Installation","what":"Software dependencies for Bayesian models","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"major dependency Bayesian models rstan package, installation package rarely simple call install.packages(). Start rstan wiki page --date installation instructions, differ operating system.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"installing loading streamMetabolizer, run vignette() R see tutorials getting started customizing metabolism models. can also view pre-built html versions vignettes “inst/doc” folder source code, e.g., inst/doc/get_started.html, can download open browser.","code":"vignette(package='streamMetabolizer') ## displays a list of available vignettes  vignette('get_started', package='streamMetabolizer') ## displays an html or pdf rendering of the 'get_started' vignette"},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"development-and-maintenance-status","dir":"","previous_headings":"","what":"Development and Maintenance Status","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"streamMetabolizer USGS Archive Research Package: Project funding ended maintenance time limited, attempt provide bug fixes lightweight support able. Submit questions suggestions https://github.com/USGS-R/streamMetabolizer/issues.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"want encourage warm, welcoming, safe environment contributing project. See CODE_OF_CONDUCT.md information. technical details contribute, see CONTRIBUTING.md","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"development-history","dir":"","previous_headings":"Contributing","what":"Development History","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"streamMetabolizer developed 2015-2018 support USGS Powell Center (working group Continental Patterns Stream Metabolism), USGS National Water Quality Program, USGS Office Water Information.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"model-archive","dir":"","previous_headings":"","what":"Model Archive","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"following version R package dependencies used recently pass embedded tests within package. guarantee reproducible results using future versions R updated versions package dependencies; however, aim test update future modeling environments.","code":"sessioninfo::session_info()  ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.2.3 (2023-03-15) ##  os       macOS Ventura 13.4.1 ##  system   x86_64, darwin17.0 ##  ui       RStudio ##  language (EN) ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       America/New_York ##  date     2023-07-02 ##  rstudio  2023.06.0+421 Mountain Hydrangea (desktop) ##  pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown) ##  ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────── ##  package           * version  date (UTC) lib source ##  cli                 3.6.1    2023-03-23 [1] CRAN (R 4.2.0) ##  deSolve             1.35     2023-03-12 [1] CRAN (R 4.2.0) ##  digest              0.6.32   2023-06-26 [1] CRAN (R 4.2.0) ##  dplyr               1.1.2    2023-04-20 [1] CRAN (R 4.2.0) ##  evaluate            0.21     2023-05-05 [1] CRAN (R 4.2.0) ##  fansi               1.0.4    2023-01-22 [1] CRAN (R 4.2.0) ##  fastmap             1.1.1    2023-02-24 [1] CRAN (R 4.2.0) ##  generics            0.1.3    2022-07-05 [1] CRAN (R 4.2.0) ##  glue                1.6.2    2022-02-24 [1] CRAN (R 4.2.0) ##  htmltools           0.5.5    2023-03-23 [1] CRAN (R 4.2.0) ##  knitr               1.43     2023-05-25 [1] CRAN (R 4.2.0) ##  LakeMetabolizer     1.5.5    2022-11-15 [1] CRAN (R 4.2.0) ##  lazyeval            0.2.2    2019-03-15 [1] CRAN (R 4.2.0) ##  lifecycle           1.0.3    2022-10-07 [1] CRAN (R 4.2.0) ##  lubridate           1.9.2    2023-02-10 [1] CRAN (R 4.2.0) ##  magrittr            2.0.3    2022-03-30 [1] CRAN (R 4.2.0) ##  pillar              1.9.0    2023-03-22 [1] CRAN (R 4.2.0) ##  pkgconfig           2.0.3    2019-09-22 [1] CRAN (R 4.2.0) ##  plyr                1.8.8    2022-11-11 [1] CRAN (R 4.2.0) ##  purrr               1.0.1    2023-01-10 [1] CRAN (R 4.2.0) ##  R6                  2.5.1    2021-08-19 [1] CRAN (R 4.2.0) ##  Rcpp                1.0.10   2023-01-22 [1] CRAN (R 4.2.0) ##  rLakeAnalyzer       1.11.4.1 2019-06-09 [1] CRAN (R 4.2.0) ##  rlang               1.1.1    2023-04-28 [1] CRAN (R 4.2.0) ##  rmarkdown           2.22     2023-06-01 [1] CRAN (R 4.2.0) ##  rstudioapi          0.14     2022-08-22 [1] CRAN (R 4.2.0) ##  sessioninfo         1.2.2    2021-12-06 [1] CRAN (R 4.2.0) ##  streamMetabolizer * 0.12.1   2023-07-02 [1] local ##  tibble              3.2.1    2023-03-20 [1] CRAN (R 4.2.0) ##  tidyr               1.3.0    2023-01-24 [1] CRAN (R 4.2.0) ##  tidyselect          1.2.0    2022-10-10 [1] CRAN (R 4.2.0) ##  timechange          0.2.0    2023-01-11 [1] CRAN (R 4.2.0) ##  unitted             0.2.9    2023-06-05 [1] Github (appling/unitted@d1f1172) ##  utf8                1.2.3    2023-01-31 [1] CRAN (R 4.2.0) ##  vctrs               0.6.3    2023-06-14 [1] CRAN (R 4.2.0) ##  xfun                0.39     2023-04-20 [1] CRAN (R 4.2.0) ##  yaml                2.3.7    2023-01-23 [1] CRAN (R 4.2.0) ##  ##  [1] /Library/Frameworks/R.framework/Versions/4.2/Resources/library"},{"path":"http://usgs-r.github.io/streamMetabolizer/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Models for Estimating Aquatic Photosynthesis and Respiration","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/Kmodel_aggregate_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate unit values to daily values — Kmodel_aggregate_day","title":"Aggregate unit values to daily values — Kmodel_aggregate_day","text":"use predicting K","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/Kmodel_aggregate_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate unit values to daily values — Kmodel_aggregate_day","text":"","code":"Kmodel_aggregate_day(   data_ply,   ply_validity,   ...,   columns = c(\"discharge\", \"velocity\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/Kmodel_aggregate_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate unit values to daily values — Kmodel_aggregate_day","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) ply_validity output mm_is_valid_day applied  data_ply tests specified day_tests. tests  run function called. result TRUE ply entirely valid, character vector containing one error  messages tests failed. ... args passed untouched function calling  mm_model_by_ply, mm_model_by_ply, finally function. columns character vector names columns aggregate","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/Kmodel_allply.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a K model — Kmodel_allply","title":"Fit a K model — Kmodel_allply","text":"model predict daily K estimates preliminary daily K estimates. Called metab_Kmodel().","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/Kmodel_allply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a K model — Kmodel_allply","text":"","code":"Kmodel_allply(   data_daily_all,   engine,   weights,   predictors,   transforms,   other_args )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/Kmodel_allply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a K model — Kmodel_allply","text":"data_daily_all data use input, columns including K600.daily.obs, weight, predictors engine software function use fitting model. specified via mm_name rather . type='bayes', always 'stan' indicating software package use MCMC process (see http://mc-stan.org/). types c('mle','night','sim') one option per model (R functions; need named noted suffix model name, e.g., \"m_np_oi_tr_plrckm.nlm\" uses nlm() model fitting). type='Kmodel', name interpolation regression method relating K predictor[s] choice. One c(\"mean\", \"lm\", \"loess\"). weights Kmodel, character vector indicating type weighting use. Set c() weights. One c(\"1/CI\", \"K600/CI\", c()). predictors Kmodel, character vector variables (column names data data_daily) use predicting K. Leave blank set c() predictors. Otherwise, one may included: c(\"date\", \"velocity.daily\", \"discharge.daily\"). transforms Kmodel, named character vector names functions (probably 'log' NA) apply K600.daily /predictors. K600.daily probably logged. vector names must match values predictors, although elements predictors must included transforms. Recommended transforms include c(K600.daily='log', date=NA, velocity.daily=\"log\", discharge.daily=\"log\") other_args arguments passed fitting function given specs$engine. na.rm=TRUE already passed mean (actually implemented sum, anyway).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/add_specs_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the metabolism model specifications class to a list — add_specs_class","title":"Add the metabolism model specifications class to a list — add_specs_class","text":"Add metabolism model specifications class list","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/add_specs_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the metabolism model specifications class to a list — add_specs_class","text":"","code":"add_specs_class(specs_list)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/bayes_1ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Make daily metabolism estimates from input parameters — bayes_1ply","title":"Make daily metabolism estimates from input parameters — bayes_1ply","text":"Called metab_bayes().","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/bayes_1ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make daily metabolism estimates from input parameters — bayes_1ply","text":"","code":"bayes_1ply(data_ply, data_daily_ply, ply_date, ply_validity, ..., specs)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/bayes_1ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make daily metabolism estimates from input parameters — bayes_1ply","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) data_daily_ply NULL data.frame containing inputs daily  timestep. ply_date modal date ply data data_daily,  date ply referred topresent. ply_validity output mm_is_valid_day applied  data_ply tests specified day_tests. tests  run function called. result TRUE ply entirely valid, character vector containing one error  messages tests failed. ... args passed untouched function calling  mm_model_by_ply, mm_model_by_ply, finally function. specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/bayes_1ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make daily metabolism estimates from input parameters — bayes_1ply","text":"data.frame estimates MCMC model diagnostics","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/bayes_allply.html","id":null,"dir":"Reference","previous_headings":"","what":"Make daily metabolism estimates from input parameters using a hierarchical\napproach. — bayes_allply","title":"Make daily metabolism estimates from input parameters using a hierarchical\napproach. — bayes_allply","text":"Called metab_bayes().","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/bayes_allply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make daily metabolism estimates from input parameters using a hierarchical\napproach. — bayes_allply","text":"","code":"bayes_allply(data_all, data_daily_all, removed, specs)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/bayes_allply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make daily metabolism estimates from input parameters using a hierarchical\napproach. — bayes_allply","text":"data_all data.frame form mm_data(solar.time, .obs, .sat, depth, temp.water, light) containing data just one estimation-day (may >24 hours yields estimates one 24-hour period) data_daily_all data.frame daily priors, appropriate given model_path removed data.frame dates removed specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/bayes_allply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make daily metabolism estimates from input parameters using a hierarchical\napproach. — bayes_allply","text":"data.frame estimates MCMC model diagnostics","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_deficit.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated: Calculate a vector of dissolved oxygen deficits — calc_DO_deficit","title":"Deprecated: Calculate a vector of dissolved oxygen deficits — calc_DO_deficit","text":"Deprecated: Submit GitHub issue want calc_DO_deficit() stick around. Creates .deficit vector input metabolism models.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_deficit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated: Calculate a vector of dissolved oxygen deficits — calc_DO_deficit","text":"","code":"calc_DO_deficit(DO.obs, temp.water, pressure.air, salinity.water = 0, ...)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_deficit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated: Calculate a vector of dissolved oxygen deficits — calc_DO_deficit","text":".obs numeric vector dissolved oxygen concentration observations, mgO2 L^-1, unitted object dissolved oxygen concentrations. temp.water numeric vector water temperature degrees Celsius, unitted object water temperatures. pressure.air barometric pressure millibars, unitted object barometric pressure. salinity.water numeric vector salinity PSU, unitted object salinity. Defaults zero. Length must one equal length temp.water. ... additional parameters passed LakeMetabolizer::o2..sat.base","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_deficit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated: Calculate a vector of dissolved oxygen deficits — calc_DO_deficit","text":"vector .deficit values","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_deficit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated: Calculate a vector of dissolved oxygen deficits — calc_DO_deficit","text":"","code":"if (FALSE) { # Warning: this function is deprecated. calc_DO_deficit(DO.obs=7, temp.water=25, pressure.air=900, salinity.water=2.43) library(unitted) calc_DO_deficit(   DO.obs = u(c(7,7.5,7),'mgO2 L^-1'),   temp.water = u(c(25,24.5,18.9), 'degC'),   pressure.air = u(c(900,903,910), 'mb'),   salinity.water = u(2.43, 'PSU')) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_sat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the equilibrium saturation concentration of oxygen in water at the\nsupplied conditions — calc_DO_sat","title":"Calculates the equilibrium saturation concentration of oxygen in water at the\nsupplied conditions — calc_DO_sat","text":"Calculates equilibrium saturation concentration oxygen water supplied conditions","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_sat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the equilibrium saturation concentration of oxygen in water at the\nsupplied conditions — calc_DO_sat","text":"","code":"calc_DO_sat(   temp.water,   pressure.air,   salinity.water = u(0, \"PSU\"),   model = \"garcia-benson\",   ... )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_sat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the equilibrium saturation concentration of oxygen in water at the\nsupplied conditions — calc_DO_sat","text":"temp.water numeric vector water temperature degrees Celsius, unitted object water temperatures. pressure.air barometric pressure millibars, unitted object barometric pressure. salinity.water numeric vector salinity PSU, unitted object salinity. Defaults zero. model character. One 'garcia-benson', 'garcia', 'weiss', 'benson', 'garcia-benson' recommended. ... additional parameters passed LakeMetabolizer::o2..sat.base","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_sat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the equilibrium saturation concentration of oxygen in water at the\nsupplied conditions — calc_DO_sat","text":"numeric vector dissolved oxygen equilibrium saturation concentrations, mg/L, units attached input vectors unitted.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_DO_sat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the equilibrium saturation concentration of oxygen in water at the\nsupplied conditions — calc_DO_sat","text":"","code":"calc_DO_sat(temp=21, press=1000.1, sal=0) # no units checking if no units provided #> [1] 8.795956 library(unitted) calc_DO_sat(temp=u(21,\"degC\"), press=u(1000.1,\"mb\"), sal=u(0,\"PSU\")) # units are checked #> unitted numeric (mgO2 L^-1) #> [1] 8.795956"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_air_pressure.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the average air pressure for a site — calc_air_pressure","title":"Calculates the average air pressure for a site — calc_air_pressure","text":"Estimates air pressure air temperature elevation","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_air_pressure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the average air pressure for a site — calc_air_pressure","text":"","code":"calc_air_pressure(   temp.air = u(15, \"degC\"),   elevation = u(762, \"m\"),   attach.units = deprecated() )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_air_pressure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the average air pressure for a site — calc_air_pressure","text":"temp.air air temperature degrees C. Default 15 degC. elevation site elevation sea level m. Default rough mean elevation USA 2500 ft (http://www.infoplease.com/ipa/A0001792.html) attach.units (deprecated, effectively FALSE future) logical. returned vector unitted object?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_air_pressure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the average air pressure for a site — calc_air_pressure","text":"numeric vector barometric pressures mb, units attached   requested.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_air_pressure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the average air pressure for a site — calc_air_pressure","text":"","code":"calc_air_pressure(15, 762) #> [1] 925.7246 calc_air_pressure(15, 100) #> [1] 1001.308"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign continuous values in a vector to discrete bins — calc_bins","title":"Assign continuous values in a vector to discrete bins — calc_bins","text":"Assigns value vec new, discrete value corresponding  bin. function provides one interface functions  `base::cut`, `ggplot2::cut_interval`, `ggplot2::cut_number`.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign continuous values in a vector to discrete bins — calc_bins","text":"","code":"calc_bins(   vec,   method = c(\"bounds\", \"interval\", \"number\", \"width\"),   ...,   bounds )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign continuous values in a vector to discrete bins — calc_bins","text":"vec numeric vector whose values binned.  log(discharge.daily) good candidate using function  pooling K600 values. method single character string indicating automated bin selection method use ... arguments (e.g. n, width) passed  ggplot function corresponding value cuts, cuts character  (otherwise ignored) bounds method=='bounds', numeric vector bin boundaries","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign continuous values in a vector to discrete bins — calc_bins","text":"","code":"ln.disch <- log(rlnorm(100))  # for use in setting specs brks <- calc_bins(ln.disch, 'width', width=0.8)$bounds specs('b_Kb_oipi_tr_plrckm.stan', K600_lnQ_nodes_centers=brks) #> Model specifications: #>   model_name               b_Kb_oipi_tr_plrckm.stan                              #>   engine                   stan                                                  #>   split_dates              FALSE                                                 #>   keep_mcmcs               TRUE                                                  #>   keep_mcmc_data           TRUE                                                  #>   day_start                4                                                     #>   day_end                  28                                                    #>   day_tests                full_day, even_timesteps, complete_data, pos_disch... #>   required_timestep        NA                                                    #>   K600_lnQ_nodes_centers   -2.8000000001, -2, -1.2, -0.4, 0.4, 1.2, 2, 2.8000... #>   GPP_daily_mu             3.1                                                   #>   GPP_daily_lower          -Inf                                                  #>   GPP_daily_sigma          6                                                     #>   ER_daily_mu              -7.1                                                  #>   ER_daily_upper           Inf                                                   #>   ER_daily_sigma           7.1                                                   #>   K600_lnQ_nodediffs_sdlog 0.5                                                   #>   K600_lnQ_nodes_meanlog   2.484906649788, 2.484906649788, 2.484906649788, 2.... #>   K600_lnQ_nodes_sdlog     1.32, 1.32, 1.32, 1.32, 1.32, 1.32, 1.32, 1.32        #>   K600_daily_sigma_sigma   0.24                                                  #>   err_obs_iid_sigma_scale  0.03                                                  #>   err_proc_iid_sigma_scale 5                                                     #>   params_in                GPP_daily_mu, GPP_daily_lower, GPP_daily_sigma, ER... #>   params_out               GPP, ER, DO_R2, GPP_daily, ER_daily, K600_daily, K... #>   n_chains                 4                                                     #>   n_cores                  4                                                     #>   burnin_steps             500                                                   #>   saved_steps              500                                                   #>   thin_steps               1                                                     #>   verbose                  FALSE                                                  # variations  # by 'number' method bins_num <- calc_bins(ln.disch, 'number', n=5) df_num <- data.frame(t=1:length(ln.disch), vec=ln.disch, bin=bins_num$names[bins_num$vec]) table(bins_num$vec) #>  #>  1  2  3  4  5  #> 20 20 20 20 20   # by 'interval' method bins_int <- calc_bins(ln.disch, 'interval', n=5) df_int <- data.frame(t=1:length(ln.disch), vec=ln.disch, bin=bins_int$names[bins_int$vec]) table(bins_int$vec) #>  #>  1  2  3  4  5  #> 12 22 38 20  8   # by 'width' method bins_wid <- calc_bins(ln.disch, 'width', width=0.2, boundary=0) df_wid <- data.frame(t=1:length(ln.disch), vec=ln.disch, bin=bins_wid$names[bins_wid$vec]) table(bins_wid$vec) #>  #>  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 25  #>  1  3  2  2  4  1  6  7  5  7 10 10  6  7  4  8  4  3  2  1  5  1  1   # choose your own arbitrary breaks bins_arb <- calc_bins(ln.disch, bounds=seq(-4,4,by=1)) df_arb <- data.frame(t=1:length(ln.disch), vec=ln.disch, bin=bins_arb$names[bins_arb$vec]) table(bins_arb$vec) #>  #>  2  3  4  5  6  7  #>  4 15 39 29 12  1  if (FALSE) { library(ggplot2) ggplot(df_num, aes(x=t, y=vec, color=bin)) + geom_point() +    geom_hline(data=as.data.frame(bins_num['bounds']), aes(yintercept=bounds)) ggplot(df_int, aes(x=t, y=vec, color=bin)) + geom_point() +   geom_hline(data=as.data.frame(bins_int['bounds']), aes(yintercept=bounds)) ggplot(df_wid, aes(x=t, y=vec, color=bin)) + geom_point() +   geom_hline(data=as.data.frame(bins_wid['bounds']), aes(yintercept=bounds)) ggplot(df_arb, aes(x=t, y=vec, color=bin)) + geom_point() +   geom_hline(data=as.data.frame(bins_arb['bounds']), aes(yintercept=bounds)) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_declination_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate declination angle as in Yard et al. (2005) — calc_declination_angle","title":"Calculate declination angle as in Yard et al. (2005) — calc_declination_angle","text":"Calculate declination angle Yard et al. (2005)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_declination_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate declination angle as in Yard et al. (2005) — calc_declination_angle","text":"","code":"calc_declination_angle(jday, format = c(\"degrees\", \"radians\"))"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_declination_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate declination angle as in Yard et al. (2005) — calc_declination_angle","text":"jday day year number 0 (Jan 1) 364 (365 also OK leap year) format format input output. May \"degrees\" \"radians\".","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_declination_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate declination angle as in Yard et al. (2005) — calc_declination_angle","text":"numeric value vector, units specified format,   indicating declination angle corresponding value supplied  jday.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_declination_angle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate declination angle as in Yard et al. (2005) — calc_declination_angle","text":"Yard, Michael D., Glenn E. Bennett, Steve N. Mietz, Lewis G.   Coggins Jr., Lawrence E. Stevens, Susan Hueftle, Dean W. Blinn.   Influence Topographic Complexity Solar Insolation Estimates   Colorado River, Grand Canyon, AZ. Ecological Modelling 183, . 2-3   (April 25, 2005): 157-72. doi:10.1016/j.ecolmodel.2004.07.027.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_declination_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate declination angle as in Yard et al. (2005) — calc_declination_angle","text":"","code":"decdf <- data.frame(jday=1:366,   dec=streamMetabolizer:::calc_declination_angle(1:366)) if (FALSE) { library(ggplot2) ggplot(unitted::v(decdf), aes(x=jday, y=dec)) + geom_line() }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate depth from discharge and hydraulic geometry coefficients — calc_depth","title":"Estimate depth from discharge and hydraulic geometry coefficients — calc_depth","text":"Uses relationship \\(d=c*Q^f\\) (parameter names definitions  Leopold Maddock, 1953; default values c f Raymond et al.  2012)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate depth from discharge and hydraulic geometry coefficients — calc_depth","text":"","code":"calc_depth(Q, c = u(0.409, \"m\"), f = u(0.294, \"\"))"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate depth from discharge and hydraulic geometry coefficients — calc_depth","text":"Q discharge (m^3 s^-1) c coefficient representing depth unit discharge (usually m) f exponent depth-discharge relation (unitless)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate depth from discharge and hydraulic geometry coefficients — calc_depth","text":"d, stream depth, units c","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_depth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate depth from discharge and hydraulic geometry coefficients — calc_depth","text":"Raymond, Peter ., Christopher J. Zappa, David Butman, Thomas L.    Bott, Jody Potter, Patrick Mulholland, Andrew E. Laursen, William H.    McDowell, Denis Newbold. Scaling gas transfer velocity    hydraulic geometry streams small rivers. Limnology & Oceanography:    Fluids & Environments 2 (2012): 41-53. Leopold, L.B., Thomas Maddock Jr. Hydraulic Geometry   Stream Channels Physiographic Implications. Report. Professional   Paper, 1953. USGS Publications Warehouse.   https://pubs.er.usgs.gov/publication/pp252.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate depth from discharge and hydraulic geometry coefficients — calc_depth","text":"","code":"Qs <- seq(1,9,2) calc_depth(Q=Qs) #> [1] 0.4090000 0.5649330 0.6564785 0.7247398 0.7803162 calc_depth(Q=Qs, f=0.4) #> [1] 0.4090000 0.6347048 0.7785945 0.8907637 0.9849639 library(unitted) calc_depth(Q=u(Qs, \"m^3 s^-1\"), c=u(40,\"cm\")) #> unitted numeric (cm) #> [1] 40.00000 55.25017 64.20327 70.87920 76.31454 calc_depth(Q=u(Qs, \"m^3 s^-1\"), f=u(0.36)) #> unitted numeric (m) #> [1] 0.4090000 0.6074170 0.7300498 0.8240596 0.9020915"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_hour_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate hour angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html. — calc_hour_angle","title":"Calculate hour angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html. — calc_hour_angle","text":"approximation hour clock time; actually given solar time","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_hour_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate hour angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html. — calc_hour_angle","text":"","code":"calc_hour_angle(hour, format = c(\"degrees\", \"radians\"))"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_hour_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate hour angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html. — calc_hour_angle","text":"hour numeric value vector. hour since [solar] midnight number 0 23.999 format format input output. May \"degrees\" \"radians\".","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_hour_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate hour angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html. — calc_hour_angle","text":"numeric value vector, units specified format,   indicating angle corresponding value supplied hour.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_hour_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate hour angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html. — calc_hour_angle","text":"","code":"hourdf <- data.frame(hour=c(0:12,12.5:23.5),   hragl=streamMetabolizer:::calc_hour_angle(c(0:12,12.5:23.5))) if (FALSE) { library(ggplot2) ggplot(hourdf, aes(x=hour, y=hragl)) +   geom_hline(yintercept=0, color=\"gold\") + geom_line() }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_is_daytime.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines if specified datetime is during the daytime\nReturns T/F indicating whether a datetime occurs during the daytime (sunlight hours) — calc_is_daytime","title":"Determines if specified datetime is during the daytime\nReturns T/F indicating whether a datetime occurs during the daytime (sunlight hours) — calc_is_daytime","text":"Determines specified datetime daytime Returns T/F indicating whether datetime occurs daytime (sunlight hours)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_is_daytime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines if specified datetime is during the daytime\nReturns T/F indicating whether a datetime occurs during the daytime (sunlight hours) — calc_is_daytime","text":"","code":"calc_is_daytime(datetimes, lat)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_is_daytime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines if specified datetime is during the daytime\nReturns T/F indicating whether a datetime occurs during the daytime (sunlight hours) — calc_is_daytime","text":"datetimes Vector dates POSIXct POSIXlt (see DateTimeClasses) format, SOLAR time lat Single latitude value site. South negative, north positive","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_is_daytime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines if specified datetime is during the daytime\nReturns T/F indicating whether a datetime occurs during the daytime (sunlight hours) — calc_is_daytime","text":"boolean vector length datetimes","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_is_daytime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determines if specified datetime is during the daytime\nReturns T/F indicating whether a datetime occurs during the daytime (sunlight hours) — calc_is_daytime","text":"Luke . Winslow","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_is_daytime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines if specified datetime is during the daytime\nReturns T/F indicating whether a datetime occurs during the daytime (sunlight hours) — calc_is_daytime","text":"","code":"if (FALSE) { # Warning: this function is deprecated. calc_is_daytime(datetimes=as.POSIXct(paste('2013-03-31', c('1:00','11:00'))), lat=40.75) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate modeled light from solar.time — calc_light","title":"Calculate modeled light from solar.time — calc_light","text":"Calculate photosynthetically active radiation (PAR) series date-times site coordinates.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate modeled light from solar.time — calc_light","text":"","code":"calc_light(   solar.time,   latitude,   longitude,   max.PAR = u(2326, \"umol m^-2 s^-1\"),   attach.units = deprecated() )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_light.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate modeled light from solar.time — calc_light","text":"solar.time mean solar time, required input metabolism models. See mm_data calc_solar_time. latitude numeric value vector indicating site latitude decimal degrees (never radians deg-min-sec, matter format ) -90 (South Pole) 90 (North Pole). longitude numeric, degrees, either positive unitted (\"degE\"  \"degW\") sign indicating direction (positive = East), describing  location site max.PAR numeric unitted_numeric: PAR (umol m^-2 s^-1) day reach peak light attach.units (deprecated, effectively FALSE future) logical. returned vector unitted object?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate modeled light from solar.time — calc_light","text":"","code":"solar.time <- lubridate::force_tz(as.POSIXct('2016-09-27 12:00'), 'UTC') calc_light(solar.time, 40, -120) #> [1] 1720.981 library(unitted) calc_light(u(solar.time), u(40, 'degN'), u(-120, 'degE'), u(2315, 'umol m^-2 s^-1')) #> Warning: The `solar.time.unitted` argument of `calc_light()` is deprecated as of #> streamMetabolizer 0.12.0. #> ℹ streamMetabolizer will someday stop using units and the unitted package. #> ℹ The deprecated feature was likely used in the streamMetabolizer package. #>   Please report the issue at #>   <https://github.com/USGS-R/streamMetabolizer/issues>. #> in calc_light, setting attach.units=TRUE because is.unitted(solar.time) #> Warning: The `attach.units` argument of `calc_solar_insolation()` is deprecated as of #> streamMetabolizer 0.12.0. #> ℹ streamMetabolizer will someday stop using units and the unitted package. #> ℹ The deprecated feature was likely used in the streamMetabolizer package. #>   Please report the issue at #>   <https://github.com/USGS-R/streamMetabolizer/issues>. #> unitted numeric (umol m^-2 s^-1) #> [1] 1712.842"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_light_merged.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge modeled and observed PAR into a single timeseries — calc_light_merged","title":"Merge modeled and observed PAR into a single timeseries — calc_light_merged","text":"Merge two time series (one observed, one modeled) photosynthetically active radiation (PAR) series date-times. can also think way smoothly interpolate time series observations.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_light_merged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge modeled and observed PAR into a single timeseries — calc_light_merged","text":"","code":"calc_light_merged(   PAR.obs = mm_data(solar.time, light),   solar.time,   latitude,   longitude,   max.PAR = NA,   max.gap = as.difftime(3, units = \"hours\"),   attach.units = deprecated() )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_light_merged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge modeled and observed PAR into a single timeseries — calc_light_merged","text":"PAR.obs 2-column data.frame columns solar.time light, argument default, containing full time series observed light (lower temporal resolution PAR.mod) solar.time vector mean solar times light modeled merged values PAR.obs latitude numeric value vector indicating site latitude decimal degrees (never radians deg-min-sec, matter format ) -90 (South Pole) 90 (North Pole). longitude numeric, degrees, either positive unitted (\"degE\"  \"degW\") sign indicating direction (positive = East), describing  location site max.PAR maximum PAR, calc_light. NA, function best guess max.PAR make modeled light pretty similar cloud-free days observed light max.gap difftime NA. difftime, maximum gap light observation time point solar.time, beyond value given light solar.time. NA, values modeled, even many days away light observation. attach.units (deprecated, effectively FALSE future) logical. returned vector unitted object?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_light_merged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge modeled and observed PAR into a single timeseries — calc_light_merged","text":"","code":"if (FALSE) { library(dplyr) library(ggplot2) library(unitted) timebounds <- as.POSIXct(c('2008-03-12 00:00', '2008-03-12 23:59'), tz='UTC') coords <- list(lat=32.4, lon=-96.5) PAR.obs <- tibble::tibble(   solar.time=seq(timebounds[1], timebounds[2], by=as.difftime(3, units='hours')),   light=c(0, 0, 85.9, 1160.5, 1539.0, 933.9, 0, 0) ) %>% as.data.frame() PAR.mod <- tibble::tibble(   solar.time=seq(timebounds[1], timebounds[2], by=as.difftime(0.25, units='hours')),   light=calc_light(solar.time, latitude=coords$lat, longitude=coords$lon) ) %>% as.data.frame() PAR.merged <- calc_light_merged(PAR.obs, PAR.mod$solar.time,   latitude=coords$lat, longitude=coords$lon, max.gap=as.difftime(20, units='hours')) ggplot(bind_rows(mutate(v(PAR.obs), type='obs'), mutate(v(PAR.mod), type='mod'),                  mutate(v(PAR.merged), type='merged')) %>%        mutate(type=ordered(type, levels=c('obs','mod','merged'))),   aes(x=solar.time, y=light, color=type)) + geom_line() + geom_point() + theme_bw() }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_solar_insolation.html","id":null,"dir":"Reference","previous_headings":"","what":"Model solar insolation on a horizontal surface (W/m2 == J/s/m2) as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_solar_insolation","title":"Model solar insolation on a horizontal surface (W/m2 == J/s/m2) as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_solar_insolation","text":"Model solar insolation horizontal surface (W/m2 == J/s/m2) http://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_solar_insolation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model solar insolation on a horizontal surface (W/m2 == J/s/m2) as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_solar_insolation","text":"","code":"calc_solar_insolation(   app.solar.time,   latitude,   max.insolation = convert_PAR_to_SW(2326),   format = c(\"degrees\", \"radians\"),   attach.units = deprecated() )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_solar_insolation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model solar insolation on a horizontal surface (W/m2 == J/s/m2) as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_solar_insolation","text":"app.solar.time POSIXct vector date-time values apparent solar time, e.g., returned convert_UTC_to_solartime(..., time.type=\"apparent solar\") latitude numeric value vector indicating site latitude decimal degrees (never radians deg-min-sec, matter format ) -90 (South Pole) 90 (North Pole). max.insolation insolation rate solar noon, W/m2 == J/s/m2. varies greatly atmospheric conditions format format input output. May \"degrees\" \"radians\". attach.units (deprecated, effectively FALSE future) logical. returned vector unitted object?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_solar_insolation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model solar insolation on a horizontal surface (W/m2 == J/s/m2) as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_solar_insolation","text":"","code":"insdf <- data.frame(   lat=rep(c(0,20,40,60), each=48*4),   date=rep(as.Date(sprintf('2004-%d-15', rep(c(1,4,7,10), each=48)), tz='UTC'), times=4),   hour=rep(seq(0,23.5,0.5), times=4*4) ) insdf <- transform(insdf, datetime=lubridate::with_tz(as.POSIXct(date), 'UTC') +   as.difftime(hour, units='hours')) insdf <- transform(insdf, date=as.character(date)) insdf <- transform(insdf, ins=calc_solar_insolation(datetime, lat)) if (FALSE) { library(ggplot2) ggplot(insdf, aes(color=date, y=ins, x=hour)) +   geom_line() + facet_wrap(~lat) +   ggtitle('solar insolation by latitude (panels) and day of year (colors)') }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_solar_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate solar.time from local.time — calc_solar_time","title":"Calculate solar.time from local.time — calc_solar_time","text":"Calculate appropriate solar.time column input metab(). input  must POSIXct clock time correct timezone information  embedded object, whether tz UTC, local time daylight savings, local standard time. output always mean solar time (apparent; see convert_UTC_to_solaritme).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_solar_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate solar.time from local.time — calc_solar_time","text":"","code":"calc_solar_time(local.time, longitude)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_solar_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate solar.time from local.time — calc_solar_time","text":"local.time POSIXct date+time interest, already local time specified tz attribute longitude numeric, degrees, either positive unitted (\"degE\"  \"degW\") sign indicating direction (positive = East)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_solar_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate solar.time from local.time — calc_solar_time","text":"","code":"local.time <- as.POSIXct('2016-05-27 12:00:00', tz='America/New_York') solar.time <- calc_solar_time(local.time, longitude=-74)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_sun_rise_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the time of sunrise and sunset — calc_sun_rise_set","title":"Calculates the time of sunrise and sunset — calc_sun_rise_set","text":"Calculates time sunrise sunset based latitude date.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_sun_rise_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the time of sunrise and sunset — calc_sun_rise_set","text":"","code":"calc_sun_rise_set(date, latitude)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_sun_rise_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the time of sunrise and sunset — calc_sun_rise_set","text":"date Vector dates Date format. latitude Single latitude value site. South negative,  North positive","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_sun_rise_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the time of sunrise and sunset — calc_sun_rise_set","text":"data.frame sunrise sunset (apparent solar time, nominally UTC)","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_sun_rise_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the time of sunrise and sunset — calc_sun_rise_set","text":"","code":"calc_sun_rise_set(latitude=40.75,    date=as.POSIXlt(c('2013-03-31', '2017-07-01'))) #> Warning: submit a GitHub issue if you want calc_sun_rise_set() to stick around #>               sunrise              sunset #> 1 2013-03-31 05:46:41 2013-03-31 18:13:18 #> 2 2017-07-01 04:33:24 2017-07-01 19:26:35"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_velocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate velocity from discharge and hydraulic geometry coefficients — calc_velocity","title":"Estimate velocity from discharge and hydraulic geometry coefficients — calc_velocity","text":"Uses relationship \\(U=k*Q^m\\) (parameter names definitions  Leopold Maddock, 1953; default values k m Raymond et al.  2012)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_velocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate velocity from discharge and hydraulic geometry coefficients — calc_velocity","text":"","code":"calc_velocity(Q, k = u(0.194, \"m s^-1\"), m = u(0.285, \"\"))"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_velocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate velocity from discharge and hydraulic geometry coefficients — calc_velocity","text":"Q discharge (m^3 s^-1) k coefficient representing velocity unit discharge (usually m/s; e Raymond et al.) m exponent velocity-discharge relation (unitless; f Raymond et al.)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_velocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate velocity from discharge and hydraulic geometry coefficients — calc_velocity","text":"v (= V = U), stream flow velcoity, units k","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_velocity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate velocity from discharge and hydraulic geometry coefficients — calc_velocity","text":"Raymond, Peter ., Christopher J. Zappa, David Butman, Thomas L.    Bott, Jody Potter, Patrick Mulholland, Andrew E. Laursen, William H.    McDowell, Denis Newbold. Scaling gas transfer velocity    hydraulic geometry streams small rivers. Limnology & Oceanography:    Fluids & Environments 2 (2012): 41-53. Leopold, L.B., Thomas Maddock Jr. Hydraulic Geometry   Stream Channels Physiographic Implications. Report. Professional   Paper, 1953. USGS Publications Warehouse.   https://pubs.er.usgs.gov/publication/pp252.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_velocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate velocity from discharge and hydraulic geometry coefficients — calc_velocity","text":"","code":"Qs <- seq(1,9,2) calc_velocity(Q=Qs) #> [1] 0.1940000 0.2653269 0.3069080 0.3377961 0.3628782 calc_velocity(Q=Qs, k=0.4) #> [1] 0.4000000 0.5470658 0.6328000 0.6964869 0.7482024 library(unitted) calc_velocity(Q=u(Qs, \"m^3 s^-1\"), m=u(40)) #> unitted numeric (m s^-1) #> [1] 1.940000e-01 2.358587e+18 1.764420e+27 1.235160e+33 2.867491e+37 calc_velocity(Q=u(Qs, \"m^3 s^-1\"), k=u(0.36, \"m s^-1\")) #> unitted numeric (m s^-1) #> [1] 0.3600000 0.4923592 0.5695200 0.6268382 0.6733822"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_zenith_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate zenith angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_zenith_angle","title":"Calculate zenith angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_zenith_angle","text":"Calculate zenith angle http://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_zenith_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate zenith angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_zenith_angle","text":"","code":"calc_zenith_angle(   latitude,   declination.angle,   hour.angle,   format = c(\"degrees\", \"radians\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_zenith_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate zenith angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_zenith_angle","text":"latitude numeric value vector indicating site latitude decimal degrees (never radians deg-min-sec, matter format ) -90 (South Pole) 90 (North Pole). declination.angle numeric value vector, units specified format, indicating declination angle. hour.angle numeric value vector, units specified format, indicating angle. format format output. May \"degrees\" \"radians\".","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/calc_zenith_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate zenith angle as in\nhttp://education.gsfc.nasa.gov/experimental/July61999siteupdate/inv99Project.Site/Pages/solar.insolation.html — calc_zenith_angle","text":"","code":"zendf <- data.frame(   lat=rep(c(0,20,40,60), each=24*4),   jday=rep(rep(c(1,101,201,301), each=24), times=4),   hour=rep(c(0:12,13.5:23.5), times=4*4)) zendf <- transform(zendf,   dec=streamMetabolizer:::calc_declination_angle(jday),   hragl=streamMetabolizer:::calc_hour_angle(hour)) zendf <- transform(zendf,   zen=streamMetabolizer:::calc_zenith_angle(lat, dec, hragl)) if (FALSE) { library(ggplot2) ggplot(unitted::v(zendf), aes(x=hour, y=zen, color=jday, group=jday)) +   geom_line() + facet_wrap(~lat) +   ggtitle('zenith angles by latitude (panels) and day of year (colors)') }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/compress_msgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compress warnings and errors in to a single column — compress_msgs","title":"Compress warnings and errors in to a single column — compress_msgs","text":"Compress two columns warning error messages one short-hand column","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/compress_msgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compress warnings and errors in to a single column — compress_msgs","text":"","code":"compress_msgs(   ddat,   colname = \"messages\",   warnings.overall = c(),   errors.overall = c() )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/compress_msgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compress warnings and errors in to a single column — compress_msgs","text":"ddat data.frame including warnings errors columns colname name column summary placed warnings.overall general warnings (whole model) included summary errors.overall general errors (whole model) included summary","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_PAR_to_SW.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from photosynthetically active to shortwave radiation — convert_PAR_to_SW","title":"Convert from photosynthetically active to shortwave radiation — convert_PAR_to_SW","text":"Convert photosynthetically active radiation (PAR) shortwave radiation  (SW). Uses fixed ratio PAR SW, ignoring minor seasonal changes ratio (see Britton Dodd (1976)).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_PAR_to_SW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from photosynthetically active to shortwave radiation — convert_PAR_to_SW","text":"","code":"convert_PAR_to_SW(par, coef = 0.473)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_PAR_to_SW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from photosynthetically active to shortwave radiation — convert_PAR_to_SW","text":"par Vector photosynthetically active radiation (400-700 nm;  umol/m^2/sec) coef Numerical coefficient convert PAR (umol/m^2/sec) SW  (W/m^2). Defaults value Britton Dodd (1976).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_PAR_to_SW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from photosynthetically active to shortwave radiation — convert_PAR_to_SW","text":"Numeric vector shortwave values units W/m^2","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_PAR_to_SW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert from photosynthetically active to shortwave radiation — convert_PAR_to_SW","text":"","code":"convert_PAR_to_SW(par=400, coef=0.47) #> [1] 188 convert_PAR_to_SW(unitted::u(1000, \"umol m^-2 s^-1\")) #> unitted numeric (W m^-2) #> [1] 473"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_SW_to_PAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from shortwave to photosynthetically active radiation — convert_SW_to_PAR","title":"Convert from shortwave to photosynthetically active radiation — convert_SW_to_PAR","text":"Convert shortwave radiation (SW) photosynthetically active radiation  (PAR). Uses fixed ratio SW PAR, ignoring minor seasonal  changes ratio (see Britton Dodd (1976)).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_SW_to_PAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from shortwave to photosynthetically active radiation — convert_SW_to_PAR","text":"","code":"convert_SW_to_PAR(sw, coef = 2.114)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_SW_to_PAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from shortwave to photosynthetically active radiation — convert_SW_to_PAR","text":"sw Vector shortwave radiation (W/m^2) coef Numerical coefficient convert SW (W/m^2) PAR  (umol/m^2/sec). Defaults value Britton Dodd (1976).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_SW_to_PAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from shortwave to photosynthetically active radiation — convert_SW_to_PAR","text":"Numeric vector PAR values units umol/m^2/sec","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_SW_to_PAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert from shortwave to photosynthetically active radiation — convert_SW_to_PAR","text":"","code":"convert_SW_to_PAR(sw=800) #> [1] 1691.2 convert_SW_to_PAR(sw=800, coef=2.1) #> [1] 1680 convert_SW_to_PAR(unitted::u(473, \"W m^-2\")) #> unitted numeric (umol m^-2 s^-1) #> [1] 999.922"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_localtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time from UTC to local time. — convert_UTC_to_localtime","title":"Convert time from UTC to local time. — convert_UTC_to_localtime","text":"Convert time UTC local time, either standard daylight  savings. Recommended post-analysis visualization ; functions  streamMetabolizer use times UTC. know timezone code local site, use with_tz instead.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_localtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time from UTC to local time. — convert_UTC_to_localtime","text":"","code":"convert_UTC_to_localtime(   date.time,   latitude,   longitude,   time.type = c(\"standard local\", \"daylight local\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_localtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time from UTC to local time. — convert_UTC_to_localtime","text":"date.time POSIXct object date time UTC latitude numeric, degrees, either positive unitted (\"degN\"  \"degS\") sign indicating direction (positive = North) longitude numeric, degrees, either positive unitted (\"degE\"  \"degW\") sign indicating direction (positive = East) time.type character. type time zone desired - either standard  time without daylight savings time daylight time daylight  savings appropriate days","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_localtime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert time from UTC to local time. — convert_UTC_to_localtime","text":"https://stackoverflow.com/questions/23414340/convert--local-time-zone-using-latitude--longitude","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_solartime.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert DateTime from UTC to local solar time — convert_UTC_to_solartime","title":"Convert DateTime from UTC to local solar time — convert_UTC_to_solartime","text":"Convert DateTime UTC local solar time, may either apparent  solar (perfect match noon solar zenith) mean solar (exactly 24 hours solar noons).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_solartime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert DateTime from UTC to local solar time — convert_UTC_to_solartime","text":"","code":"convert_UTC_to_solartime(   date.time,   longitude,   time.type = c(\"apparent solar\", \"mean solar\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_solartime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert DateTime from UTC to local solar time — convert_UTC_to_solartime","text":"date.time date-time values POSIXct format UTC timezone. longitude numeric, degrees, either positive unitted (\"degE\"  \"degW\") sign indicating direction (positive = East) time.type character. \"apparent solar\", .e. true solar time, noon  sun zenith. \"mean solar\" approximates apparent solar  time noons exactly 24 hours apart. Elsewhere package, variables named \"solar.time\" mean solar time, whereas \"app.solar.time\" apparent solar \".solar.time\" either.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_solartime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert DateTime from UTC to local solar time — convert_UTC_to_solartime","text":"POSIXct object says tz=\"UTC\" actually    solar time, noon close solar noon","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_UTC_to_solartime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert DateTime from UTC to local solar time — convert_UTC_to_solartime","text":"Yard, Bennett, Mietz, Coggins, Stevens, Hueftle, Blinn. 2005.   Influence topographic complexity solar insolation estimates    Colorado River, Grand Canyon, AZ. Ecological Modelling.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_date_to_doyhr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a date to a day of year (1-366) with decimal hours — convert_date_to_doyhr","title":"Convert a date to a day of year (1-366) with decimal hours — convert_date_to_doyhr","text":"Inspired / copied LakeMetabolizer date2doy","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_date_to_doyhr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a date to a day of year (1-366) with decimal hours — convert_date_to_doyhr","text":"","code":"convert_date_to_doyhr(date)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_date_to_doyhr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a date to a day of year (1-366) with decimal hours — convert_date_to_doyhr","text":"date datetime object POSIXct POSIXt","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_date_to_doyhr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a date to a day of year (1-366) with decimal hours — convert_date_to_doyhr","text":"Numeric value expressing date number days, decimal   hours, since 00:00 December 31 preceding year (.e., January 1st   00:01 ~1.01)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_date_to_doyhr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a date to a day of year (1-366) with decimal hours — convert_date_to_doyhr","text":"","code":"streamMetabolizer:::convert_date_to_doyhr(as.POSIXct(\"2015-02-03 12:01:00 UTC\")) #> [1] 34.50069"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_doyhr_to_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a a day of year (1-366) with decimal hours to a date — convert_doyhr_to_date","title":"Convert a a day of year (1-366) with decimal hours to a date — convert_doyhr_to_date","text":"Convert day year (1-366) decimal hours date","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_doyhr_to_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a a day of year (1-366) with decimal hours to a date — convert_doyhr_to_date","text":"","code":"convert_doyhr_to_date(   doyhr,   year,   tz = \"UTC\",   origin = as.POSIXct(\"1970-01-01 00:00:00\", tz = \"UTC\"),   ... )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_doyhr_to_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a a day of year (1-366) with decimal hours to a date — convert_doyhr_to_date","text":"doyhr Numeric value expressing date number days, decimal hours, since 00:00 December 31 preceding year year Numeric 4-digit year tz time zone pass .POSIXct() origin origin pass .POSIXct() ... arguments pass .POSIXct()","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_doyhr_to_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a a day of year (1-366) with decimal hours to a date — convert_doyhr_to_date","text":"datetime object POSIXct","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_doyhr_to_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a a day of year (1-366) with decimal hours to a date — convert_doyhr_to_date","text":"","code":"streamMetabolizer:::convert_doyhr_to_date(34.500695, 2015) #> [1] \"2015-02-03 12:01:00 UTC\""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_k600_to_kGAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the gas exchange velocity for gas of interest w/ no unit conversions — convert_k600_to_kGAS","title":"Returns the gas exchange velocity for gas of interest w/ no unit conversions — convert_k600_to_kGAS","text":"Returns gas exchange velocity gas interest w/ unit conversions","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_k600_to_kGAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the gas exchange velocity for gas of interest w/ no unit conversions — convert_k600_to_kGAS","text":"","code":"convert_k600_to_kGAS(k600, temperature, gas = \"O2\")"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_k600_to_kGAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the gas exchange velocity for gas of interest w/ no unit conversions — convert_k600_to_kGAS","text":"k600 k600 vector numbers single number temperature Water temperature (deg C) vector array numbers single number gas gas conversion, string (e.g., 'CO2' 'O2')","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_k600_to_kGAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the gas exchange velocity for gas of interest w/ no unit conversions — convert_k600_to_kGAS","text":"Numeric value gas exchange velocity gas","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_kGAS_to_k600.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the gas exchange velocity as k600 for gas of interest w/ no unit conversions — convert_kGAS_to_k600","title":"Returns the gas exchange velocity as k600 for gas of interest w/ no unit conversions — convert_kGAS_to_k600","text":"Returns gas exchange velocity k600 gas interest w/ unit conversions","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_kGAS_to_k600.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the gas exchange velocity as k600 for gas of interest w/ no unit conversions — convert_kGAS_to_k600","text":"","code":"convert_kGAS_to_k600(kGAS, temperature, gas = \"O2\")"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_kGAS_to_k600.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the gas exchange velocity as k600 for gas of interest w/ no unit conversions — convert_kGAS_to_k600","text":"kGAS k gas vector numbers single number temperature Water temperature (deg C) vector array numbers single number gas gas conversion, string (e.g., 'CO2' 'O2')","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_kGAS_to_k600.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the gas exchange velocity as k600 for gas of interest w/ no unit conversions — convert_kGAS_to_k600","text":"Numeric value gas exchange velocity gas","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_localtime_to_UTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time from local time to UTC. — convert_localtime_to_UTC","title":"Convert time from local time to UTC. — convert_localtime_to_UTC","text":"Convert time local time (either standard daylight savings)  UTC.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_localtime_to_UTC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time from local time to UTC. — convert_localtime_to_UTC","text":"","code":"convert_localtime_to_UTC(local.time)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_localtime_to_UTC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time from local time to UTC. — convert_localtime_to_UTC","text":"local.time POSIXct date+time interest, already local time specified tz attribute","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_localtime_to_UTC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert time from local time to UTC. — convert_localtime_to_UTC","text":"https://stackoverflow.com/questions/23414340/convert--local-time-zone-using-latitude--longitude","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_solartime_to_UTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert DateTime from local solar time to UTC — convert_solartime_to_UTC","title":"Convert DateTime from local solar time to UTC — convert_solartime_to_UTC","text":"Convert DateTime UTC local solar time, may either apparent  solar (perfect match noon solar zenith) mean solar (exactly 24 hours solar noons).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_solartime_to_UTC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert DateTime from local solar time to UTC — convert_solartime_to_UTC","text":"","code":"convert_solartime_to_UTC(   any.solar.time,   longitude,   time.type = c(\"apparent solar\", \"mean solar\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_solartime_to_UTC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert DateTime from local solar time to UTC — convert_solartime_to_UTC","text":".solar.time either apparent mean solar time (specified  time.type); date-time values POSIXct format. Timezone must UTC. longitude numeric, degrees, either positive unitted (\"degE\"  \"degW\") sign indicating direction (positive = East), describing  location site time.type character indicating whether .solar.time values  apparent mean solar time. \"apparent solar\", .e. true solar time,  noon sun zenith. \"mean solar\" approximates apparent  solar time noons exactly 24 hours apart.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_solartime_to_UTC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert DateTime from local solar time to UTC — convert_solartime_to_UTC","text":"POSIXct object UTC","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/convert_solartime_to_UTC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert DateTime from local solar time to UTC — convert_solartime_to_UTC","text":"Yard, Bennett, Mietz, Coggins, Stevens, Hueftle, Blinn. 2005.   Influence topographic complexity solar insolation estimates    Colorado River, Grand Canyon, AZ. Ecological Modelling.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_DO.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a function to compute the numerical integration of a dDOdt function — create_calc_DO","title":"Create a function to compute the numerical integration of a dDOdt function — create_calc_DO","text":"Create function compute numerical integration dDOdt function","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_DO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a function to compute the numerical integration of a dDOdt function — create_calc_DO","text":"","code":"create_calc_DO(   calc_dDOdt,   ode_method = environment(calc_dDOdt)$ode_method,   err.obs = 0 )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_DO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a function to compute the numerical integration of a dDOdt function — create_calc_DO","text":"calc_dDOdt function create_calc_dDOdt ode_method character. method use solving ordinary differential equation . Options: euler, formerly Euler: final change t=1 t=2 solely function GPP, ER, , etc. t=1 trapezoid, formerly pairmeans: final change t=1 t=2 function mean values GPP, ER, etc. across t=1 t=2. type='mle', options also include rk2 character method accepted ode deSolve package (lsoda, lsode, lsodes, lsodar, vode, daspk, rk4, ode23, ode45, radau, bdf, bdf_d, adams, impAdams, impAdams_d; note many well tested context streamMetabolizer models) err.obs optional numerical vector length nrow(data) units gO2 m^3. Appropriate simulation, vector observation errors  added calculated values simulate observation error.  usually (MLE prediction fitted MLE/Bayesian/nighttime  regression model) err.obs missing 0","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_DO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a function to compute the numerical integration of a dDOdt function — create_calc_DO","text":"function return negative log likelihood data    given set metab.pars","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_DO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a function to compute the numerical integration of a dDOdt function — create_calc_DO","text":"","code":"if (FALSE) { # prepare data for examples data <- data_metab('3','30')[97:144,][seq(1,48,by=2),] # preds.init <- list(GPP.daily=2.82,ER.daily=-2.12,K600.daily=31.27) preds.init <- as.list(dplyr::select(   predict_metab(metab(specs(mm_name('mle', ode_method='trapezoid')), data=data)),   GPP.daily=GPP, ER.daily=ER, K600.daily=K600)) DOtime <- data$solar.time dDOtime <- data$solar.time[-nrow(data)] + (data$solar.time[2] - data$solar.time[1])/2  # integration of dDOdt by euler, trapezoid, rk2, rk4, and lsoda methods plot(x=DOtime, y=data$DO.obs, pch=3, cex=0.6) # euler dDOdt <- create_calc_dDOdt(data, ode_method='euler', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO <- create_calc_DO(dDOdt, ode_method='euler') DO.mod.euler <- DO(metab.pars=preds.init) lines(x=DOtime, y=DO.mod.euler, type='l', col='chartreuse3') # trapezoid=pairmeans dDOdt <- create_calc_dDOdt(data, ode_method='trapezoid', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO <- create_calc_DO(dDOdt, ode_method='trapezoid') DO.mod.trap <- DO(metab.pars=preds.init) lines(x=DOtime, y=DO.mod.trap, type='l', col='gold') # lsoda dDOdt <- create_calc_dDOdt(data, ode_method='lsoda', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO <- create_calc_DO(dDOdt, ode_method='lsoda') DO.mod <- DO(metab.pars=preds.init) lines(x=DOtime, y=DO.mod, type='l', col='navy') # rk2 dDOdt <- create_calc_dDOdt(data, ode_method='rk2', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO <- create_calc_DO(dDOdt, ode_method='rk2') DO.mod <- DO(metab.pars=preds.init) lines(x=DOtime, y=DO.mod, type='l', col='blue') # rk4 dDOdt <- create_calc_dDOdt(data, ode_method='rk4', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO <- create_calc_DO(dDOdt, ode_method='rk4') DO.mod <- DO(metab.pars=preds.init) lines(x=DOtime, y=DO.mod, type='l', col='magenta')  # with observation and/or process error plot(x=DOtime, y=data$DO.obs, col='black', pch=3, cex=0.6) dDOdt <- create_calc_dDOdt(data, ode_method='trapezoid', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO <- create_calc_DO(dDOdt, ode_method='trapezoid', err.obs=rnorm(nrow(data), 0, 0)) DO.mod.obs <- DO(preds.init) lines(x=DOtime, y=DO.mod.obs, col='black', lty=1) dDOdt <- create_calc_dDOdt(data, ode_method='trapezoid', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO <- create_calc_DO(dDOdt, ode_method='trapezoid', err.obs=rnorm(nrow(data), 0, 0.3)) DO.mod.obserr <- DO(preds.init) lines(x=DOtime, y=DO.mod.obserr, col='blue', lty=2) dDOdt <- create_calc_dDOdt(data, ode_method='trapezoid', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod', err.proc=rnorm(nrow(data), 0, 2)) DO <- create_calc_DO(dDOdt, ode_method='trapezoid', err.obs=rnorm(nrow(data), 0, 0.1)) DO.mod.operr <- DO(preds.init) lines(x=DOtime, y=DO.mod.operr, col='red', lty=2) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_NLL.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a function to compute the negative log likelihood of a set of \nmetabolism parameter values — create_calc_NLL","title":"Create a function to compute the negative log likelihood of a set of \nmetabolism parameter values — create_calc_NLL","text":"Produces function can given nlm(). K600.daily may passed function within p vector (fitting K600.daily) additional argument (fixing ).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_NLL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a function to compute the negative log likelihood of a set of \nmetabolism parameter values — create_calc_NLL","text":"","code":"create_calc_NLL(   calc_DO,   par.names = environment(environment(calc_DO)$calc_dDOdt)$metab.needs,   err_obs_iid = FALSE,   err_proc_iid = FALSE )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_NLL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a function to compute the negative log likelihood of a set of \nmetabolism parameter values — create_calc_NLL","text":"calc_DO function create_calc_DO par.names vector names parameters can expected calls  function created one (calc_NLL function) err_obs_iid logical. IID observation error included? , model fit differences successive measurements, rather measurements . err_proc_iid logical. IID process error included?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_NLL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a function to compute the negative log likelihood of a set of \nmetabolism parameter values — create_calc_NLL","text":"function return negative log likelihood data    given set metab.pars. metab.pars first argument returned   function; names defined par.names.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_NLL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a function to compute the negative log likelihood of a set of \nmetabolism parameter values — create_calc_NLL","text":"","code":"data <- data_metab('1','30')[seq(1,48,by=2),] dDOdt <- create_calc_dDOdt(data, ode_method='trapezoid', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO <- create_calc_DO(dDOdt) NLL <- create_calc_NLL(DO, err_obs_iid=TRUE) NLL(metab.pars=c(GPP.daily=2, ER.daily=-2, K600.daily=25)) #> [1] 1.60391 NLL(metab.pars=c(GPP.daily=2, ER.daily=-2, K600.daily=25), DO.mod.1=8) #> [1] 3.86777 NLL(metab.pars=c(GPP.daily=4, ER.daily=-7, K600.daily=15)) #> [1] 52.37003 NLL2 <- create_calc_NLL(DO, par.names=c('GPP.daily','ER.daily'), err_obs_iid=TRUE) NLL2(metab.pars=c(GPP.daily=2, ER.daily=-2), K600.daily=25) #> [1] 1.60391 NLL3 <- create_calc_NLL(DO,    par.names=c('GPP.daily','ER.daily','K600.daily','DO.mod.1'), err_obs_iid=TRUE) NLL3(metab.pars=c(GPP.daily=2, ER.daily=-2, K600.daily=25, DO.mod.1=9)) #> [1] 3.551421 nlm(NLL, p=c(GPP.daily=2, ER.daily=-2, K600.daily=25)) #> $minimum #> [1] -8.833364 #>  #> $estimate #> [1]  2.829716 -2.121566 31.265547 #>  #> $gradient #> [1] -1.065293e-06 -6.522455e-07  3.630488e-08 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 21 #>  nlm(NLL2, p=c(GPP.daily=2, ER.daily=-2), K600.daily=31.265) #> $minimum #> [1] -8.833364 #>  #> $estimate #> [1]  2.829662 -2.121524 #>  #> $gradient #> [1] 5.022103e-09 1.657858e-07 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 9 #>  nlm(NLL3, p=c(GPP.daily=2, ER.daily=-2, K600.daily=25, DO.mod.1=9)) #> $minimum #> [1] -8.837646 #>  #> $estimate #> [1]  2.824270 -2.118702 31.201832  8.424478 #>  #> $gradient #> [1] -3.410858e-06  2.419673e-06  5.526309e-07  9.568673e-07 #>  #> $code #> [1] 2 #>  #> $iterations #> [1] 22 #>"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_dDOdt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a function that generates a 1-day timeseries of DO.mod — create_calc_dDOdt","title":"Create a function that generates a 1-day timeseries of DO.mod — create_calc_dDOdt","text":"Creates closure bundles data helper functions single function returns dDOdt gO2 m^-3 timestep^-1 given time t.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_dDOdt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a function that generates a 1-day timeseries of DO.mod — create_calc_dDOdt","text":"","code":"create_calc_dDOdt(data, ode_method, GPP_fun, ER_fun, deficit_src, err.proc = 0)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_dDOdt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a function that generates a 1-day timeseries of DO.mod — create_calc_dDOdt","text":"data data.frame metab, except data must contain exactly one date worth inputs (~24 hours according specs$day_start specs$day_end). ode_method character. method use solving ordinary differential equation . Options: euler, formerly Euler: final change t=1 t=2 solely function GPP, ER, , etc. t=1 trapezoid, formerly pairmeans: final change t=1 t=2 function mean values GPP, ER, etc. across t=1 t=2. type='mle', options also include rk2 character method accepted ode deSolve package (lsoda, lsode, lsodes, lsodar, vode, daspk, rk4, ode23, ode45, radau, bdf, bdf_d, adams, impAdams, impAdams_d; note many well tested context streamMetabolizer models) GPP_fun character. Function dictating gross primary productivity (GPP) varies within day. Options: linlight: GPP linear function light intercept 0 slope varies day. GPP(t) = GPP.daily * light(t) / mean.light GPP.daily: daily mean GPP, partitioned timestep-specific rates according fraction day's average light occurs timestep (specifically, mean.light mean first 24 hours date's data window) satlight: GPP saturating function light. GPP(t) = Pmax * tanh(alpha * light(t) / Pmax) Pmax: maximum possible GPP alpha: descriptor rate increase GPP function light satlightq10temp: GPP saturating function light exponential function temperature. GPP(t) = Pmax * tanh(alpha * light(t) / Pmax) * 1.036 ^ (temp.water(t) - 20) Pmax: maximum possible GPP alpha: descriptor rate increase GPP function light NA: applicable type='Kmodel', GPP estimated ER_fun character. Function dictating ecosystem respiration (ER) varies within day. Options: constant: ER constant every timestep day. ER(t) = ER.daily ER.daily: daily mean ER, equal instantaneous ER times q10temp: ER timestep exponential function water temperature temperature-normalized base rate. ER(t) = ER20 * 1.045 ^ (temp.water(t) - 20) ER20: value ER temp.water 20 degrees C NA: applicable type='Kmodel', ER estimated deficit_src character. estimate (observed modeled) deficit computed? Options: DO_mod: deficit time t (.sat(t) - DO_mod(t)), difference equilibrium-saturation value current best estimate true concentration time DO_obs: deficit time t (.sat(t) - .obs(t)), difference equilibrium-saturation value measured concentration time DO_obs_filter: applicable type='night': smoothing filter applied measured .obs values applying nighttime regression NA: applicable type='Kmodel', deficit estimated err.proc optional numerical vector length nrow(data). Process error units gO2 m^-2 d^-1 (MAY DIFFER USED !). Appropriate simulation, vector process errors added calculated values GPP ER (divided depth multiplied timestep duration) simulate process error. usually (MLE prediction fitted MLE/Bayesian/nighttime regression model) err.proc missing 0","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_dDOdt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a function that generates a 1-day timeseries of DO.mod — create_calc_dDOdt","text":"function accepts args t (time 0:(n-1) n   number timesteps), .mod.t (value .mod time t   gO2 m^-3), metab (list metabolism parameters; see   parameters included list, create dDOdt   function call environment(dDOdt)$metab.needs)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_dDOdt.html","id":"ode-method-trapezoid-","dir":"Reference","previous_headings":"","what":"ode_method 'trapezoid'","title":"Create a function that generates a 1-day timeseries of DO.mod — create_calc_dDOdt","text":"'pairmeans' 'trapezoid' identical. analytical solution trapezoid rule starting point:   .mod[t+1] =   .mod[t] +    (((GPP[t]+GPP[t+1])/2) / (depth[t]+depth[t+1])/2    + ((ER[t]+ER[t+1])/2) / (depth[t]+depth[t+1])/2    + (k.O2[t](.sat[t] - .mod[t]) + k.O2[t+1](.sat[t+1] - .mod[t+1]))/2    + ((err.proc[t]+err.proc[t+1])/2) / (depth[t]+depth[t+1])/2    ) * timestep  solution:  .mod[t+1] - .mod[t] =  (- .mod[t] * (k.O2[t]+k.O2[t+1])/2    + (GPP[t]+GPP[t+1] +       ER[t]+ER[t+1] +       err.proc[t]+err.proc[t+1]      ) / (depth[t]+depth[t+1])    + (k.O2[t]*.sat[t] + k.O2[t+1]*.sat[t+1])/2  ) * timestep / (1 + timestep*k.O2[t+1]/2)  treating err.proc rate gO2/m2/d, just like GPP & ER, err.proc=0 model fitting.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/create_calc_dDOdt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a function that generates a 1-day timeseries of DO.mod — create_calc_dDOdt","text":"","code":"if (FALSE) { data <- data_metab('1','30')[seq(1,48,by=2),] dDOdt.obs <- diff(data$DO.obs) preds.init <- as.list(dplyr::select(   predict_metab(metab(specs(mm_name('mle', ode_method='euler')), data=data)),   GPP.daily=GPP, ER.daily=ER, K600.daily=K600)) DOtime <- data$solar.time dDOtime <- data$solar.time[-nrow(data)] + (data$solar.time[2] - data$solar.time[1])/2  # args to create_calc_dDOdt determine which values are needed in metab.pars dDOdt <- create_calc_dDOdt(data, ode_method='trapezoid', GPP_fun='satlight',   ER_fun='q10temp', deficit_src='DO_mod') names(formals(dDOdt)) # always the same: args to pass to dDOdt() environment(dDOdt)$metab.needs # get the names to be included in metab.pars dDOdt(t=23, state=c(DO.mod=data$DO.obs[1]),   metab.pars=list(Pmax=0.2, alpha=0.01, ER20=-0.05, K600.daily=3))$dDOdt  # different required args; try in a timeseries dDOdt <- create_calc_dDOdt(data, ode_method='euler', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') environment(dDOdt)$metab.needs # get the names to be included in metab # approximate dDOdt and DO using DO.obs for DO deficits & Eulerian integration DO.mod.m <- data$DO.obs[1] dDOdt.mod.m <- NA for(t in 1:23) {  dDOdt.mod.m[t] <- dDOdt(t=t, state=c(DO.mod=DO.mod.m[t]),     metab.pars=list(GPP.daily=2, ER.daily=-1.4, K600.daily=21))$dDOdt  DO.mod.m[t+1] <- DO.mod.m[t] + dDOdt.mod.m[t] } par(mfrow=c(2,1), mar=c(3,3,1,1)+0.1) plot(x=DOtime, y=data$DO.obs) lines(x=DOtime, y=DO.mod.m, type='l', col='purple') plot(x=dDOtime, y=dDOdt.obs) lines(x=dDOtime, y=dDOdt.mod.m, type='l', col='blue') par(mfrow=c(1,1), mar=c(5,4,4,2)+0.1)  # compute & plot a full timeseries with ode() integration dDOdt <- create_calc_dDOdt(data, ode_method='euler', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') DO.mod.o <- deSolve::ode(   y=c(DO.mod=data$DO.obs[1]),   parms=list(GPP.daily=2, ER.daily=-1.4, K600.daily=21),   times=1:nrow(data), func=dDOdt, method='euler')[,'DO.mod'] par(mfrow=c(2,1), mar=c(3,3,1,1)+0.1) plot(x=DOtime, y=data$DO.obs) lines(x=DOtime, y=DO.mod.m, type='l', col='purple') lines(x=DOtime, y=DO.mod.o, type='l', col='red', lty=2) dDOdt.mod.o <- diff(DO.mod.o) plot(x=dDOtime, y=dDOdt.obs) lines(x=dDOtime, y=dDOdt.mod.m, type='l', col='blue') lines(x=dDOtime, y=dDOdt.mod.o, type='l', col='green', lty=2) par(mfrow=c(1,1), mar=c(5,4,4,2)+0.1)  # see how values of metab.pars affect the dDOdt predictions library(dplyr); library(ggplot2); library(tidyr) dDOdt <- create_calc_dDOdt(data, ode_method='euler', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod') apply_dDOdt <- function(GPP.daily, ER.daily, K600.daily) {   DO.mod.m <- data$DO.obs[1]   dDOdt.mod.m <- NA   for(t in 1:23) {    dDOdt.mod.m[t] <- dDOdt(t=t, state=c(DO.mod=DO.mod.m[t]),     list(GPP.daily=GPP.daily, ER.daily=ER.daily, K600.daily=K600.daily))$dDOdt    DO.mod.m[t+1] <- DO.mod.m[t] + dDOdt.mod.m[t]   }   dDOdt.mod.m } dDO.preds <- tibble::tibble(   solar.time = dDOtime,   dDO.preds.base = apply_dDOdt(3, -5, 15),   dDO.preds.dblGPP = apply_dDOdt(6, -5, 15),   dDO.preds.dblER = apply_dDOdt(3, -10, 15),   dDO.preds.dblK = apply_dDOdt(3, -5, 30)) dDO.preds %>%   gather(key=dDO.series, value=dDO.dt, starts_with('dDO.preds')) %>%   ggplot(aes(x=solar.time, y=dDO.dt, color=dDO.series)) + geom_line() + theme_bw()  # try simulating process eror data <- data_metab('1','30')[seq(1,48,by=2),] plot(x=data$solar.time, y=data$DO.obs) dDOdt.noerr <- create_calc_dDOdt(data, ode_method='rk4', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod', err.proc=rep(0, nrow(data))) DO.mod.noerr <- deSolve::ode(   y=c(DO.mod=data$DO.obs[1]),   parms=list(GPP.daily=2, ER.daily=-1.4, K600.daily=21),   times=1:nrow(data), func=dDOdt.noerr, method='rk4')[,'DO.mod'] lines(x=data$solar.time, y=DO.mod.noerr, type='l', col='purple') # with error dDOdt.err <- create_calc_dDOdt(data, ode_method='rk4', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod', err.proc=rep(+0.4, nrow(data))) DO.mod.err <- deSolve::ode(   y=c(DO.mod=data$DO.obs[1]),   parms=list(GPP.daily=2, ER.daily=-1.4, K600.daily=21),   times=1:nrow(data), func=dDOdt.err, method='rk4')[,'DO.mod'] lines(x=data$solar.time, y=DO.mod.err, type='l', col='red', lty=2) # with same error each timestep is same as with reduced ER dDOdt.noerr2 <- create_calc_dDOdt(data, ode_method='rk4', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod', err.proc=rep(0, nrow(data))) DO.mod.noerr2 <- deSolve::ode(   y=c(DO.mod=data$DO.obs[1]),   parms=list(GPP.daily=2, ER.daily=-1.4+0.4, K600.daily=21),   times=1:nrow(data), func=dDOdt.noerr2, method='rk4')[,'DO.mod'] lines(x=data$solar.time, y=DO.mod.noerr2, type='l', col='green', lty=3) # with different timestep, same error value should mean very similar curve data <- data_metab('1','30') dDOdt.err2 <- create_calc_dDOdt(data, ode_method='rk4', GPP_fun='linlight',   ER_fun='constant', deficit_src='DO_mod', err.proc=rep(0.4, nrow(data))) DO.mod.err2 <- deSolve::ode(   y=c(DO.mod=data$DO.obs[1]),   parms=list(GPP.daily=2, ER.daily=-1.4, K600.daily=21),   times=1:nrow(data), func=dDOdt.err2, method='rk4')[,'DO.mod'] lines(x=data$solar.time, y=DO.mod.err2, type='l', col='black', lty=2) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/data_metab.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a demo dataset for modeling metabolism — data_metab","title":"Get a demo dataset for modeling metabolism — data_metab","text":"Get formatted data.frame inputs metabolism can modeled. test data provided Bob Hall.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/data_metab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a demo dataset for modeling metabolism — data_metab","text":"","code":"data_metab(   num_days = c(\"1\", \"3\", \"10\"),   res = c(\"5\", \"10\", \"15\", \"30\"),   flaws = c(\"missing middle\", \"missing start\", \"missing end\", \"missorted\",     \"duplicated\"),   day_start = 4,   day_end = 28,   attach.units = deprecated() )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/data_metab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a demo dataset for modeling metabolism — data_metab","text":"num_days number days include data. character format certain numbers days permitted (see defaults Usage accepted options) res character specifying desired resolution data minutes (character; see defaults Usage accepted options) flaws character specifying one flaws include data, empty (c()) flaws. default flaws. day_start start time (inclusive) day's data number hours midnight begins date. example, day_start=-1.5 indicates data describing 2006-06-26 begin 2006-06-25 22:30, first observation time occurs time day_start fall exactly observation time. metabolism models working single days input data, conventional/useful begin day evening , e.g., -1.5, end just next sunrise, e.g., 30. multiple consecutive days, may make sense start just sunrise (e.g., 4) end 24 hours later. nighttime regression, date assigned chunk data date whose evening contains data. default therefore 12 36 metab_night, times darkness used. day_end end time (exclusive) day's data number hours midnight begins date. example, day_end=30 indicates data describing 2006-06-26 end last observation time occurs 2006-06-27 06:00. See day_start recommended start end times. attach.units (deprecated, effectively FALSE future) logical, default TRUE backward compatibility. units attached data.frame?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/data_metab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a demo dataset for modeling metabolism — data_metab","text":"","code":"head(data_metab()) #>               solar.time DO.obs   DO.sat depth temp.water light #> 5688 2012-09-18 04:00:58   8.39 9.076040  0.16       3.63     0 #> 5689 2012-09-18 04:05:58   8.41 9.083329  0.16       3.60     0 #> 5690 2012-09-18 04:10:58   8.40 9.088194  0.16       3.58     0 #> 5691 2012-09-18 04:15:58   8.41 9.090628  0.16       3.57     0 #> 5692 2012-09-18 04:20:58   8.42 9.093063  0.16       3.56     0 #> 5693 2012-09-18 04:25:58   8.42 9.097936  0.16       3.54     0 head(data_metab(res='30')) #>               solar.time DO.obs   DO.sat depth temp.water    light #> 5689 2012-09-18 04:05:58   8.41 9.083329  0.16       3.60   0.0000 #> 5695 2012-09-18 04:35:58   8.42 9.105254  0.16       3.51   0.0000 #> 5701 2012-09-18 05:05:58   8.45 9.127267  0.16       3.42   0.0000 #> 5707 2012-09-18 05:35:58   8.47 9.149369  0.16       3.33   0.0000 #> 5713 2012-09-18 06:05:58   8.55 9.166621  0.16       3.26 134.3296 #> 5719 2012-09-18 06:35:58   8.71 9.174032  0.16       3.23 361.1082"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/define_pkg_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a package environment for storing data specific to a project during an\nR session — define_pkg_env","title":"Define a package environment for storing data specific to a project during an\nR session — define_pkg_env","text":"Define package environment storing data specific project R session","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/define_pkg_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a package environment for storing data specific to a project during an\nR session — define_pkg_env","text":"","code":"define_pkg_env()"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/define_pkg_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a package environment for storing data specific to a project during an\nR session — define_pkg_env","text":"package environment","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/format_mcmc_mat_nosplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Format MCMC output into a list of data.frames — format_mcmc_mat_nosplit","title":"Format MCMC output into a list of data.frames — format_mcmc_mat_nosplit","text":"multi-day unsplit models. Formats output list data.frames, one per unique number nodes sharing variable name","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/format_mcmc_mat_nosplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format MCMC output into a list of data.frames — format_mcmc_mat_nosplit","text":"","code":"format_mcmc_mat_nosplit(   mcmc_mat,   data_list_d,   data_list_n,   model_name,   keep_mcmc,   runmcmc_out )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/format_mcmc_mat_nosplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format MCMC output into a list of data.frames — format_mcmc_mat_nosplit","text":"mcmc_mat matrix extracted Stan","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/format_mcmc_mat_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Format MCMC output into a one-row data.frame — format_mcmc_mat_split","title":"Format MCMC output into a one-row data.frame — format_mcmc_mat_split","text":"split_dates models. Formats output one-row data.frame row-binding data.frames","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/format_mcmc_mat_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format MCMC output into a one-row data.frame — format_mcmc_mat_split","text":"","code":"format_mcmc_mat_split(   mcmc_mat,   names_params,   names_stats,   keep_mcmc,   runmcmc_out )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/format_mcmc_mat_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format MCMC output into a one-row data.frame — format_mcmc_mat_split","text":"mcmc_mat matrix extracted Stan names_params character vector names parameters names_stats character vector names statistics","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the fitting data from a metabolism model. — get_data","title":"Extract the fitting data from a metabolism model. — get_data","text":"function metab_model_interface. Returns data passed metabolism model.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the fitting data from a metabolism model. — get_data","text":"","code":"get_data(metab_model)  # S3 method for metab_model get_data(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the fitting data from a metabolism model. — get_data","text":"metab_model metabolism model, implementing metab_model_interface, return data","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the fitting data from a metabolism model. — get_data","text":"data.frame","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the fitting data from a metabolism model. — get_data","text":"metab_model: implementation shared many model types","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data_daily.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the daily fitting data, if any, from a metabolism model. — get_data_daily","title":"Extract the daily fitting data, if any, from a metabolism model. — get_data_daily","text":"function metab_model_interface. Returns daily data passed metabolism model.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data_daily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the daily fitting data, if any, from a metabolism model. — get_data_daily","text":"","code":"get_data_daily(metab_model)  # S3 method for metab_model get_data_daily(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data_daily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the daily fitting data, if any, from a metabolism model. — get_data_daily","text":"metab_model metabolism model, implementing metab_model_interface, return data_daily","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data_daily.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the daily fitting data, if any, from a metabolism model. — get_data_daily","text":"data.frame","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_data_daily.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the daily fitting data, if any, from a metabolism model. — get_data_daily","text":"metab_model: implementation shared many model types","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the internal model from a metabolism model. — get_fit","title":"Extract the internal model from a metabolism model. — get_fit","text":"function metab_model_interface. Returns internal model representation fitted supplied data arguments.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the internal model from a metabolism model. — get_fit","text":"","code":"get_fit(metab_model)  # S3 method for metab_model get_fit(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the internal model from a metabolism model. — get_fit","text":"metab_model metabolism model, implementing metab_model_interface, return data","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the internal model from a metabolism model. — get_fit","text":"internal model representation; may class","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fit.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the internal model from a metabolism model. — get_fit","text":"metab_model: implementation shared many model types","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fitting_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the amount of time that was required to fit the metabolism model. — get_fitting_time","title":"Extract the amount of time that was required to fit the metabolism model. — get_fitting_time","text":"function metab_model_interface. Returns time taken fit model; see proc.time details.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fitting_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the amount of time that was required to fit the metabolism model. — get_fitting_time","text":"","code":"get_fitting_time(metab_model)  # S3 method for metab_model get_fitting_time(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fitting_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the amount of time that was required to fit the metabolism model. — get_fitting_time","text":"metab_model metabolism model, implementing metab_model_interface, return time","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fitting_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the amount of time that was required to fit the metabolism model. — get_fitting_time","text":"proc_time object","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_fitting_time.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the amount of time that was required to fit the metabolism model. — get_fitting_time","text":"metab_model: implementation shared many model types","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the user-supplied metadata about a metabolism model. — get_info","title":"Extract the user-supplied metadata about a metabolism model. — get_info","text":"function metab_model_interface. Returns user-supplied metadata.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the user-supplied metadata about a metabolism model. — get_info","text":"","code":"get_info(metab_model)  # S3 method for metab_model get_info(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the user-supplied metadata about a metabolism model. — get_info","text":"metab_model metabolism model, implementing metab_model_interface, return metadata information.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the user-supplied metadata about a metabolism model. — get_info","text":"user-supplied metadata original format.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_info.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the user-supplied metadata about a metabolism model. — get_info","text":"metab_model: implementation shared many model types","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the log file[s] from a model run — get_log","title":"Return the log file[s] from a model run — get_log","text":"log file created model run, function can retrieve .","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the log file[s] from a model run — get_log","text":"","code":"get_log(metab_model)  # S3 method for metab_bayes get_log(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the log file[s] from a model run — get_log","text":"metab_model Bayesian metabolism model (metab_bayes) return log file, available","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the log file[s] from a model run — get_log","text":"MCMC log file[s] lines","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_log.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Return the log file[s] from a model run — get_log","text":"metab_bayes: log file created Bayesian MCMC run, metab_bayes() attempted capture . Retrieve captured function.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract any MCMC model objects that were stored with the model — get_mcmc","title":"Extract any MCMC model objects that were stored with the model — get_mcmc","text":"function specific metab_bayes models. Returns MCMC object class stanfit (rstan::stanfit), saved metab_model default almost always inspect ; see keep_mcmcs argument specs() options saving space. rstan methods rstan::stanfit objects include summary(), get_stancode(), stan_dens(), stan_diag(), many . See ?'rstan-plotting-functions', rstan::stanfit rstan manual.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract any MCMC model objects that were stored with the model — get_mcmc","text":"","code":"get_mcmc(metab_model)  # S3 method for metab_bayes get_mcmc(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract any MCMC model objects that were stored with the model — get_mcmc","text":"metab_model Bayesian metabolism model (metab_bayes) return MCMC model objects","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract any MCMC model objects that were stored with the model — get_mcmc","text":"MCMC model objects","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract any MCMC model objects that were stored with the model — get_mcmc","text":"metab_bayes: Get Bayesian MCMC model object","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract any MCMC data list[s] that were stored with the model — get_mcmc_data","title":"Extract any MCMC data list[s] that were stored with the model — get_mcmc_data","text":"function specific metab_bayes models. Returns data formatted run MCMC process , nopool models, list data lists. lists saved default; see keep_mcmc_data argument specs options.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract any MCMC data list[s] that were stored with the model — get_mcmc_data","text":"","code":"get_mcmc_data(metab_model)  # S3 method for metab_bayes get_mcmc_data(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract any MCMC data list[s] that were stored with the model — get_mcmc_data","text":"metab_model Bayesian metabolism model (metab_bayes) return data list passed MCMC","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract any MCMC data list[s] that were stored with the model — get_mcmc_data","text":"MCMC data list","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_mcmc_data.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract any MCMC data list[s] that were stored with the model — get_mcmc_data","text":"metab_bayes: Retrieve MCMC data list[s] saved metab_bayes model","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_param_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the daily parameter names from a metabolism model. — get_param_names","title":"Extract the daily parameter names from a metabolism model. — get_param_names","text":"function metab_model_interface. Returns vectors required optional daily metabolism parameters model.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_param_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the daily parameter names from a metabolism model. — get_param_names","text":"","code":"get_param_names(metab_model, ...)  # S3 method for character get_param_names(metab_model, ...)  # S3 method for metab_model get_param_names(metab_model, ...)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_param_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the daily parameter names from a metabolism model. — get_param_names","text":"metab_model metabolism model object model name return list required optional metabolism parameters. ... Placeholder future arguments","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_param_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the daily parameter names from a metabolism model. — get_param_names","text":"Returns list two vectors, names required optional   daily metabolism parameters, respectively.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_param_names.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the daily parameter names from a metabolism model. — get_param_names","text":"character: implementation shared many model types metab_model: Lets pass model object rather character string","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_param_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the daily parameter names from a metabolism model. — get_param_names","text":"","code":"# pass in a character string: get_param_names(mm_name('mle', GPP_fun='satlight')) #> $required #> [1] \"Pmax\"       \"alpha\"      \"ER.daily\"   \"K600.daily\" #>  #> $optional #> [1] \"DO.mod.1\" #>  get_param_names(mm_name('bayes')) #> $required #> [1] \"GPP.daily\"  \"ER.daily\"   \"K600.daily\" #>  #> $optional #> [1] \"DO.mod.1\" #>  get_param_names(mm_name('Kmodel')) #> $required #> [1] \"K600.daily\" #>  #> $optional #> NULL #>  get_param_names(mm_name('night')) #> $required #> [1] \"ER.daily\"   \"K600.daily\" #>  #> $optional #> [1] \"DO.mod.1\" #>  get_param_names(mm_name('sim')) #> $required #> [1] \"K600.daily\"     \"GPP.daily\"      \"ER.daily\"       \"err.obs.sigma\"  #> [5] \"err.obs.phi\"    \"err.proc.sigma\" \"err.proc.phi\"   #>  #> $optional #> [1] \"discharge.daily\" \"DO.mod.1\"        #>   # or pass in a metab_model object: dat <- data_metab('1','30') get_param_names(metab(specs(mm_name('mle', ER_fun='q10temp')), data=dat)) #> $required #> [1] \"GPP.daily\"  \"ER20\"       \"K600.daily\" #>  #> $optional #> [1] \"DO.mod.1\" #>  get_param_names(metab(specs('night'), data=dat)) #> $required #> [1] \"ER.daily\"   \"K600.daily\" #>  #> $optional #> [1] \"DO.mod.1\" #>  get_param_names(metab(specs('sim'), data=dat)) #> $required #> [1] \"K600.daily\"     \"GPP.daily\"      \"ER.daily\"       \"err.obs.sigma\"  #> [5] \"err.obs.phi\"    \"err.proc.sigma\" \"err.proc.phi\"   #>  #> $optional #> [1] \"discharge.daily\" \"DO.mod.1\"        #>"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the metabolism parameters (fitted and/or fixed) from a model. — get_params","title":"Extract the metabolism parameters (fitted and/or fixed) from a model. — get_params","text":"function metab_model_interface. Returns estimates parameters describing rates /shapes GPP, ER, reaeration.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the metabolism parameters (fitted and/or fixed) from a model. — get_params","text":"","code":"get_params(   metab_model,   date_start = NA,   date_end = NA,   uncertainty = c(\"sd\", \"ci\", \"none\"),   messages = TRUE,   fixed = c(\"none\", \"columns\", \"stars\"),   ...,   attach.units = deprecated() )  # S3 method for metab_Kmodel get_params(   metab_model,   date_start = NA,   date_end = NA,   uncertainty = c(\"sd\", \"ci\", \"none\"),   messages = TRUE,   fixed = c(\"none\", \"columns\", \"stars\"),   ...,   attach.units = deprecated(),   use_saved = TRUE )  # S3 method for metab_bayes get_params(   metab_model,   date_start = NA,   date_end = NA,   uncertainty = \"ci\",   messages = TRUE,   ...,   attach.units = deprecated() )  # S3 method for metab_model get_params(   metab_model,   date_start = NA,   date_end = NA,   uncertainty = c(\"sd\", \"ci\", \"none\"),   messages = TRUE,   fixed = c(\"none\", \"columns\", \"stars\"),   ...,   attach.units = deprecated() )  # S3 method for metab_sim get_params(   metab_model,   date_start = NA,   date_end = NA,   uncertainty = c(\"sd\", \"ci\", \"none\"),   messages = TRUE,   fixed = c(\"none\", \"columns\", \"stars\"),   ...,   attach.units = deprecated() )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the metabolism parameters (fitted and/or fixed) from a model. — get_params","text":"metab_model metabolism model, implementing metab_model_interface, use predicting metabolism date_start Date class convertible .Date. first date (inclusive) report parameters. NA, filtering done. date_end Date class convertible .Date. last date (inclusive) report parameters.. NA, filtering done. uncertainty character. columns uncertainty parameter estimates excluded ('none'), reported standard deviations ('sd'), reported lower upper bounds 95 percent confidence interval ('ci')? available (e.g., Bayesian models), 'ci' central value median (50th quantile) ranges 2.5th 97.5th quantiles. 'sd' central value always mean. messages logical. warning error messages fitting procedure included output? fixed character. values pulled data_daily (.e., fixed rather fitted) treated identically ('none'), paired logicals column ending '.fixed' ('columns'), converted character marked leading asterisk ('stars')? ... arguments passed class-specific implementations get_params attach.units (deprecated, effectively FALSE future) logical. units attached output? use_saved logical. OK use predictions saved model?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the metabolism parameters (fitted and/or fixed) from a model. — get_params","text":"data.frame parameters needed predict GPP, ER, D, ,   one row per date","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_params.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the metabolism parameters (fitted and/or fixed) from a model. — get_params","text":"metab_Kmodel: Make daily re-predictions K600.daily based across-days model K600.daily versus predictors. returns estimates K600.daily, daily parameters metab_bayes: little formatting convert Stan output streamMetabolizer parameter names; otherwise get_params.metab_model metab_model: implementation shared many model types metab_sim: Generates new simulated values daily parameters described evaluatable expressions specs, returns fixed values daily parameters set data_daily","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the metabolism parameters (fitted and/or fixed) from a model. — get_params","text":"","code":"dat <- data_metab('3', day_start=12, day_end=36) mm <- metab_night(specs(mm_name('night')), data=dat) get_params(mm) #>         date  ER.daily ER.daily.sd K600.daily K600.daily.sd warnings errors #> 1 2012-09-18 -2.122498  0.11670762   26.17191      1.337894                 #> 2 2012-09-19 -2.927715  0.15616944   34.09664      1.692708                 #> 3 2012-09-20 -2.125522  0.09201041   29.65021      1.184019                 get_params(mm, date_start=get_fit(mm)$date[2]) #>         date  ER.daily ER.daily.sd K600.daily K600.daily.sd warnings errors #> 1 2012-09-19 -2.927715  0.15616944   34.09664      1.692708                 #> 2 2012-09-20 -2.125522  0.09201041   29.65021      1.184019"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the fitting specifications from a metabolism model. — get_specs","title":"Extract the fitting specifications from a metabolism model. — get_specs","text":"function metab_model_interface. Returns specifications passed fitting metabolism model.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the fitting specifications from a metabolism model. — get_specs","text":"","code":"get_specs(metab_model)  # S3 method for metab_model get_specs(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the fitting specifications from a metabolism model. — get_specs","text":"metab_model metabolism model, implementing metab_model_interface, return specifications","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_specs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the fitting specifications from a metabolism model. — get_specs","text":"list specifications passed metab()","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_specs.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the fitting specifications from a metabolism model. — get_specs","text":"metab_model: implementation shared many model types","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the version of streamMetabolizer that was used to fit the model. — get_version","title":"Extract the version of streamMetabolizer that was used to fit the model. — get_version","text":"function metab_model_interface. Returns version streamMetabolizer used fit model.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the version of streamMetabolizer that was used to fit the model. — get_version","text":"","code":"get_version(metab_model)  # S3 method for metab_model get_version(metab_model)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the version of streamMetabolizer that was used to fit the model. — get_version","text":"metab_model metabolism model, implementing metab_model_interface, return data","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the version of streamMetabolizer that was used to fit the model. — get_version","text":"character representation package version","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/get_version.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Extract the version of streamMetabolizer that was used to fit the model. — get_version","text":"metab_model: implementation shared many model types","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a short dataset from French Creek — load_french_creek","title":"Load a short dataset from French Creek — load_french_creek","text":"Load short dataset French Creek","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a short dataset from French Creek — load_french_creek","text":"","code":"load_french_creek(attach.units = deprecated())"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a short dataset from French Creek — load_french_creek","text":"attach.units (deprecated, effectively FALSE future) logical, default TRUE backward compatibility. units attached data.frame?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a short dataset from French Creek — load_french_creek","text":"data.frame, unitted attach.units==TRUE","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a short dataset from French Creek using Bob Hall's code — load_french_creek_std","title":"Load a short dataset from French Creek using Bob Hall's code — load_french_creek_std","text":"function requires chron, package formally required streamMetabolizer package overall. Ensure chron installed install install.packages('chron').","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a short dataset from French Creek using Bob Hall's code — load_french_creek_std","text":"","code":"load_french_creek_std(attach.units = deprecated())"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a short dataset from French Creek using Bob Hall's code — load_french_creek_std","text":"attach.units (deprecated, effectively FALSE future) logical, default TRUE backward compatibility. units attached data.frame?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a short dataset from French Creek using Bob Hall's code — load_french_creek_std","text":"data.frame, unitted attach.units==TRUE","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a short dataset from French Creek using Bob Hall's code — load_french_creek_std","text":"function produces version French Creek dataset agrees much possible raw code Bob Hall, comparison functions written streamMetabolizer. Line numbers comments (L22, etc.) refer 'stream_metab_usa/starter_files/One station metab code.R'","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate outputs using Bob's code for comparison — load_french_creek_std_mle","title":"Generate outputs using Bob's code for comparison — load_french_creek_std_mle","text":"Bob's code includes MLE nighttime regression models. function generates output models, keeping code much intact possible. exception using solar.time rather local.time, consistency streamMetabolizer's recommendations","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate outputs using Bob's code for comparison — load_french_creek_std_mle","text":"","code":"load_french_creek_std_mle(   french,   K = 35,   estimate = c(\"PRK\", \"K\", \"PR\"),   start = c(dates = \"08/23/12\", times = \"22:00:00\"),   end = c(dates = \"08/25/12\", times = \"06:00:00\"),   plot = FALSE )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std_mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate outputs using Bob's code for comparison — load_french_creek_std_mle","text":"french French Creek dataset K optional. specified, number K600 assume (units 1/d) estimate character indicating type model fit start character vector specifying time 'day' (time period use producing estimate single date) begins. vector 2 elements, dates times, pass chron() end character vector specifying time 'day' ends. vector 2 elements, dates times, pass chron() plot logical - plots produced?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_french_creek_std_mle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate outputs using Bob's code for comparison — load_french_creek_std_mle","text":"function requires chron package, suggested rather required streamMetabolizer package. wish run function, ensure chron installed install install.packages('chron').","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_spring_creek.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a short dataset from Spring Creek — load_spring_creek","title":"Load a short dataset from Spring Creek — load_spring_creek","text":"Load short dataset Spring Creek","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_spring_creek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a short dataset from Spring Creek — load_spring_creek","text":"","code":"load_spring_creek(attach.units = deprecated())"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_spring_creek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a short dataset from Spring Creek — load_spring_creek","text":"attach.units (deprecated, effectively FALSE future) logical, default TRUE backward compatibility. units attached data.frame?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/load_spring_creek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a short dataset from Spring Creek — load_spring_creek","text":"data.frame, unitted attach.units==TRUE","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_google_timezone.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Google API to determine local time zone — lookup_google_timezone","title":"Use Google API to determine local time zone — lookup_google_timezone","text":"function uses two packages, RCurl XML, required streamMetabolizer package whole. already installed, run install.packages(c('RCurl','XML')) calling lookup_google_timezone.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_google_timezone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Google API to determine local time zone — lookup_google_timezone","text":"","code":"lookup_google_timezone(   latitude,   longitude,   timestamp = if (unitted::v(latitude) >= 0) as.POSIXct(\"2015-01-01 00:00:00\", tz =     \"UTC\") else as.POSIXct(\"2015-07-01 00:00:00\", tz = \"UTC\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_google_timezone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Google API to determine local time zone — lookup_google_timezone","text":"latitude degrees latitude (positive north) location look . longitude degrees longitude (positive east) location look . timestamp POSIXct representation time - determines daylight savings offset, . default Jan 1 northern latitudes July 1 southern latitudes, .e., time surely daylight savings time.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_google_timezone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use Google API to determine local time zone — lookup_google_timezone","text":"parameter definitions copied directly API webpage.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_google_timezone.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use Google API to determine local time zone — lookup_google_timezone","text":"https://developers.google.com/maps/documentation/timezone/","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_timezone.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the local time zone from the coordinates — lookup_timezone","title":"Determine the local time zone from the coordinates — lookup_timezone","text":"Uses Google API (/package cache) determine local timezone name, offset, DST offset site","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_timezone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the local time zone from the coordinates — lookup_timezone","text":"","code":"lookup_timezone(latitude, longitude)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_timezone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the local time zone from the coordinates — lookup_timezone","text":"latitude degrees latitude (positive north) location look . longitude degrees longitude (positive east) location look .","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_timezone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the local time zone from the coordinates — lookup_timezone","text":"","code":"lookup_timezone(41.33, -106.3) #> $tz #> [1] \"America/Denver\" #>  #> $dst_offset #> unitted numeric (hours) #> [1] 0 #>  #> $std_offset #> unitted numeric (hours) #> [1] -7 #>  #> $retry #> [1] 0 #>"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_usgs_elevation.html","id":null,"dir":"Reference","previous_headings":"","what":"Use USGS API (USGS Elevation Point Query Service) to determine approximate \nlocal elevation — lookup_usgs_elevation","title":"Use USGS API (USGS Elevation Point Query Service) to determine approximate \nlocal elevation — lookup_usgs_elevation","text":"meant supply APPROXIMATE elevation, guarantees  precision lifetime API service used function.  function uses two packages, RCurl XML,  required streamMetabolizer package whole.  already installed, run install.packages(c('RCurl','XML'))  calling lookup_usgs_elevation.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_usgs_elevation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use USGS API (USGS Elevation Point Query Service) to determine approximate \nlocal elevation — lookup_usgs_elevation","text":"","code":"lookup_usgs_elevation(latitude, longitude, units = c(\"Meters\", \"Feet\"))"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_usgs_elevation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use USGS API (USGS Elevation Point Query Service) to determine approximate \nlocal elevation — lookup_usgs_elevation","text":"latitude degrees latitude (positive north) location look . longitude degrees longitude (positive east) location  look . units character, one Meters Feet, specifying units return elevation","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/lookup_usgs_elevation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use USGS API (USGS Elevation Point Query Service) to determine approximate \nlocal elevation — lookup_usgs_elevation","text":"https://nationalmap.gov/epqs/","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a metabolism model to data — metab","title":"Fit a metabolism model to data — metab","text":"Runs metabolism model specified specs argument. Returns  fitted model.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a metabolism model to data — metab","text":"","code":"metab(   specs = specs(mm_name()),   data = v(mm_data(NULL)),   data_daily = v(mm_data(NULL)),   info = NULL )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a metabolism model to data — metab","text":"specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values. data data.frame (tbl_df) input data temporal resolution raw observations (unit-value). Columns must names, units, format default. solar.time column must also timezone code ('tzone' attribute) 'UTC'. See 'Formatting data' section full description. data_daily data.frame containing inputs daily timestep. See 'Formatting data_daily' section full  description. info information, format, like store  within metab_model object","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a metabolism model to data — metab","text":"object inheriting metab_model containing fitted    model. object can inspected functions  metab_model_interface.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab.html","id":"formatting-data","dir":"Reference","previous_headings":"","what":"Formatting data","title":"Fit a metabolism model to data — metab","text":"Unit-value model inputs passed via data argument formatted data.frame column names values depend model type, follows. (columns optional, data may equal NULL.) mle night  Example:  bayes  Example:  Kmodel  Example:  sim  Example:","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab.html","id":"formatting-data-daily","dir":"Reference","previous_headings":"","what":"Formatting data_daily","title":"Fit a metabolism model to data — metab","text":"Daily-value model inputs passed via data_daily argument formatted data.frame column names values depend model type, follows. (columns optional, data_daily may equal NULL.) night NULL mle  Example:  bayes  Example:  Kmodel  Example:  sim  Example:","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit a metabolism model to data — metab","text":"Alison Appling","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a metabolism model to data — metab","text":"","code":"dat <- data_metab(num_days='3')  # fit a basic MLE model mm <- metab(specs(mm_name('mle')), data=dat, info='my info') predict_metab(mm) #>         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper #> 1 2012-09-18 2.812955  2.435230  3.190680 -2.103521 -2.410113 -1.796930 #> 2 2012-09-19 3.277526  2.866958  3.688094 -2.470115 -2.808856 -2.131375 #> 3 2012-09-20 2.582700  2.313734  2.851666 -1.709653 -1.914700 -1.504606 #>   msgs.fit warnings errors #> 1                          #> 2      W                   #> 3                          get_info(mm) #> [1] \"my info\" get_fitting_time(mm) #>    user  system elapsed  #>   2.175   0.042   2.225   # with chaining & customization library(dplyr) #> ------------------------------------------------------------------------------ #> You have loaded dplyr after unitted - this is likely to cause problems. #> If you need functions from both dplyr and unitted, please load dplyr first, then unitted: #> library(dplyr); library(unitted) #> ------------------------------------------------------------------------------ #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union mm <- mm_name('mle', ode_method='euler') %>%   specs(init.GPP.daily=40) %>%   metab(data=dat) predict_metab(mm) #>         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper #> 1 2012-09-18 2.809444  2.402234  3.216654 -2.098404 -2.427638 -1.769169 #> 2 2012-09-19 3.271351  2.838930  3.703772 -2.463138 -2.818887 -2.107388 #> 3 2012-09-20 2.568592  2.286376  2.850807 -1.697389 -1.911571 -1.483207 #>   msgs.fit warnings errors #> 1      W                   #> 2      W                   #> 3      W                   if (FALSE) { plot_DO_preds(predict_DO(mm)) plot_DO_preds(predict_DO(mm), y_var='pctsat', style='dygraphs') }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_Kmodel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolation model of daily K for metabolism — metab_Kmodel-class","title":"Interpolation model of daily K for metabolism — metab_Kmodel-class","text":"metab_Kmodel models use initial daily estimates K, along predictors Q (discharge.daily) U (velocity.daily) T (time) leverage available data reach better, less variable daily estimates K","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_Kmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a time series of K estimates to predict consistent values — metab_Kmodel","title":"Combine a time series of K estimates to predict consistent values — metab_Kmodel","text":"Takes daily estimates K, usually nighttime regression, regresses predictors discharge.daily. Returns metab_Kmodel object predicts daily K, nothing else.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_Kmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a time series of K estimates to predict consistent values — metab_Kmodel","text":"","code":"metab_Kmodel(   specs = specs(mm_name(\"Kmodel\")),   data = mm_data(solar.time, discharge, velocity, optional = c(\"all\")),   data_daily = mm_data(date, K600.daily, K600.daily.lower, K600.daily.upper,     discharge.daily, velocity.daily, optional = c(\"K600.daily.lower\", \"K600.daily.upper\",     \"discharge.daily\", \"velocity.daily\")),   info = NULL )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_Kmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a time series of K estimates to predict consistent values — metab_Kmodel","text":"specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values. data data.frame (tbl_df) input data temporal resolution raw observations (unit-value). Columns must names, units, format default. solar.time column must also timezone code ('tzone' attribute) 'UTC'. See 'Formatting data' section full description. data_daily data.frame containing inputs daily timestep. See 'Formatting data_daily' section full  description. info information, format, like store  within metab_model object","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_Kmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a time series of K estimates to predict consistent values — metab_Kmodel","text":"metab_Kmodel object containing fitted model. object can   inspected functions metab_model_interface.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_Kmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine a time series of K estimates to predict consistent values — metab_Kmodel","text":"Possible approaches: \"mean\"Predict K mean K values \"weighted mean\"Predict K mean K values, weighted inverse confidence intervals input K values \"KvQ\"Regress K versus Q, tending toward overall mean ranges Q sparse data \"weighted KvQ\"Regress K versus Q, tending toward overall mean ranges Q sparse data, weighting high-confidence K values heavily \"T smoother\"Predict K using loess spline smoother time \"Q smoother\"Predict K using loess spline smoother discharge.daily \"TQ smoother\"Predict K using loess spline smoother time discharge.daily","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_Kmodel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine a time series of K estimates to predict consistent values — metab_Kmodel","text":"Alison Appling","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_Kmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine a time series of K estimates to predict consistent values — metab_Kmodel","text":"","code":"library(dplyr) # create example data set.seed(24842) example_Ks <- data.frame(date=seq(as.Date(\"2012-08-15\"),as.Date(\"2012-09-15\"),   as.difftime(1,units='days')), discharge.daily=exp(rnorm(32,2,1)), K600.daily=rnorm(32,30,4)) %>%   mutate(K600.daily.lower=K600.daily-5, K600.daily.upper=K600.daily+6)  # mean mm <- metab_Kmodel(   specs(mm_name('Kmodel', engine='mean')),   data_daily=example_Ks) # two warnings expected for engine='mean' get_params(mm) #>          date K600.daily K600.daily.sd         warnings errors #> 1  2012-08-15   29.41813            NA overall warnings        #> 2  2012-08-16   29.41813            NA overall warnings        #> 3  2012-08-17   29.41813            NA overall warnings        #> 4  2012-08-18   29.41813            NA overall warnings        #> 5  2012-08-19   29.41813            NA overall warnings        #> 6  2012-08-20   29.41813            NA overall warnings        #> 7  2012-08-21   29.41813            NA overall warnings        #> 8  2012-08-22   29.41813            NA overall warnings        #> 9  2012-08-23   29.41813            NA overall warnings        #> 10 2012-08-24   29.41813            NA overall warnings        #> 11 2012-08-25   29.41813            NA overall warnings        #> 12 2012-08-26   29.41813            NA overall warnings        #> 13 2012-08-27   29.41813            NA overall warnings        #> 14 2012-08-28   29.41813            NA overall warnings        #> 15 2012-08-29   29.41813            NA overall warnings        #> 16 2012-08-30   29.41813            NA overall warnings        #> 17 2012-08-31   29.41813            NA overall warnings        #> 18 2012-09-01   29.41813            NA overall warnings        #> 19 2012-09-02   29.41813            NA overall warnings        #> 20 2012-09-03   29.41813            NA overall warnings        #> 21 2012-09-04   29.41813            NA overall warnings        #> 22 2012-09-05   29.41813            NA overall warnings        #> 23 2012-09-06   29.41813            NA overall warnings        #> 24 2012-09-07   29.41813            NA overall warnings        #> 25 2012-09-08   29.41813            NA overall warnings        #> 26 2012-09-09   29.41813            NA overall warnings        #> 27 2012-09-10   29.41813            NA overall warnings        #> 28 2012-09-11   29.41813            NA overall warnings        #> 29 2012-09-12   29.41813            NA overall warnings        #> 30 2012-09-13   29.41813            NA overall warnings        #> 31 2012-09-14   29.41813            NA overall warnings        #> 32 2012-09-15   29.41813            NA overall warnings        if (FALSE) { plot(get_params(mm)$date, get_params(mm)$K600.daily) }  # linear model mm <- metab_Kmodel(   specs(mm_name('Kmodel', engine='lm'), predictors='discharge.daily'),   data_daily=example_Ks) get_params(mm) #>          date K600.daily K600.daily.sd warnings errors #> 1  2012-08-15   29.48773            NA                 #> 2  2012-08-16   29.45253            NA                 #> 3  2012-08-17   30.52907            NA                 #> 4  2012-08-18   29.36423            NA                 #> 5  2012-08-19   26.97996            NA                 #> 6  2012-08-20   29.85889            NA                 #> 7  2012-08-21   29.41888            NA                 #> 8  2012-08-22   29.21206            NA                 #> 9  2012-08-23   28.90789            NA                 #> 10 2012-08-24   28.55220            NA                 #> 11 2012-08-25   30.51001            NA                 #> 12 2012-08-26   28.45314            NA                 #> 13 2012-08-27   30.15313            NA                 #> 14 2012-08-28   29.14110            NA                 #> 15 2012-08-29   28.96144            NA                 #> 16 2012-08-30   29.49264            NA                 #> 17 2012-08-31   28.70135            NA                 #> 18 2012-09-01   30.78642            NA                 #> 19 2012-09-02   29.42760            NA                 #> 20 2012-09-03   28.33825            NA                 #> 21 2012-09-04   29.61804            NA                 #> 22 2012-09-05   29.14045            NA                 #> 23 2012-09-06   29.01319            NA                 #> 24 2012-09-07   29.95855            NA                 #> 25 2012-09-08   29.99182            NA                 #> 26 2012-09-09   28.54950            NA                 #> 27 2012-09-10   29.76544            NA                 #> 28 2012-09-11   29.46747            NA                 #> 29 2012-09-12   29.70034            NA                 #> 30 2012-09-13   28.51264            NA                 #> 31 2012-09-14   30.65190            NA                 #> 32 2012-09-15   30.86205            NA                 if (FALSE) { plot(get_data_daily(mm)$discharge.daily, get_params(mm)$K600.daily) }  # loess mm <- metab_Kmodel(    ### breaks ###   specs(mm_name('Kmodel', engine='loess'), predictors='date', other_args=list(span=0.4)),   data_daily=example_Ks) get_params(mm) #>          date K600.daily K600.daily.sd warnings errors #> 1  2012-08-15   26.93642      1.136389                 #> 2  2012-08-16   28.13190      1.087341                 #> 3  2012-08-17   28.79526      1.069291                 #> 4  2012-08-18   29.09960      1.071040                 #> 5  2012-08-19   28.84944      1.075185                 #> 6  2012-08-20   28.29487      1.079092                 #> 7  2012-08-21   27.62516      1.075342                 #> 8  2012-08-22   27.12816      1.079242                 #> 9  2012-08-23   27.21836      1.074020                 #> 10 2012-08-24   27.67841      1.078880                 #> 11 2012-08-25   28.83481      1.073739                 #> 12 2012-08-26   30.20604      1.076872                 #> 13 2012-08-27   31.72782      1.070802                 #> 14 2012-08-28   33.11495      1.073499                 #> 15 2012-08-29   33.64264      1.068786                 #> 16 2012-08-30   33.69489      1.073006                 #> 17 2012-08-31   32.56211      1.070038                 #> 18 2012-09-01   31.32665      1.074744                 #> 19 2012-09-02   31.20208      1.070357                 #> 20 2012-09-03   31.10106      1.074969                 #> 21 2012-09-04   30.84886      1.071741                 #> 22 2012-09-05   30.37960      1.076465                 #> 23 2012-09-06   28.82896      1.072684                 #> 24 2012-09-07   27.27600      1.079072                 #> 25 2012-09-08   26.11465      1.076778                 #> 26 2012-09-09   25.49586      1.082287                 #> 27 2012-09-10   26.40117      1.076760                 #> 28 2012-09-11   27.50791      1.077389                 #> 29 2012-09-12   28.11343      1.072039                 #> 30 2012-09-13   28.71594      1.069151                 #> 31 2012-09-14   29.09925      1.084802                 #> 32 2012-09-15   29.31613      1.132190                 if (FALSE) { plot(get_params(mm)$date, get_params(mm)$K600.daily) }  ## 3-phase workflow (sort of like complete pooling) for estimating K within ## days, then K across days, then GPP and ER within days  # 1. data and specifications for both of the MLE models dat <- data_metab('10','15') mle_specs <- specs(mm_name('mle'))  # fit a first-round MLE and extract the K estimates mm1 <- metab_mle(mle_specs, data=dat) K600_mm1 <- get_params(mm1, uncertainty='ci') %>%   select(date, K600.daily, K600.daily.lower, K600.daily.upper)  # smooth the K600s mm2 <- metab_Kmodel(specs(mm_name('Kmodel', engine='mean'),   day_start=-1, day_end=23), data_daily=K600_mm1) K600_mm2 <- get_params(mm2) %>% select(date, K600.daily)  # refit the MLE with fixed K mm3 <- metab_mle(mle_specs, data=dat, data_daily=K600_mm2) get_params(mm3, fixed='stars') #>          date GPP.daily GPP.daily.sd   ER.daily ER.daily.sd K600.daily warnings #> 1  2012-09-18 2.558979    0.05519044 -1.913915   0.08116142  28.44894*          #> 2  2012-09-19 2.765987    0.05888406 -2.066356   0.08646030  28.44894*          #> 3  2012-09-20 2.564581    0.05024763 -1.693336   0.07446124  28.44894*          #> 4  2012-09-21 2.558030    0.04396162 -1.709250   0.06493983  28.44894*          #> 5  2012-09-22 2.607292    0.05752125 -1.745543   0.08553130  28.44894*          #> 6  2012-09-23 2.835975    0.06980850 -2.159617   0.10599571  28.44894*          #> 7  2012-09-24 2.756248    0.07120201 -2.627882   0.10734383  28.44894*          #> 8  2012-09-25 1.881598    0.06901491 -1.999497   0.10824960  28.44894*          #> 9  2012-09-26 2.139146    0.05002992 -1.970511   0.07780874  28.44894*          #> 10 2012-09-27 1.954997    0.04672300 -1.854895   0.07239294  28.44894*          #>    errors #> 1         #> 2         #> 3         #> 4         #> 5         #> 6         #> 7         #> 8         #> 9         #> 10        predict_metab(mm3) #>          date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper #> 1  2012-09-18 2.558979  2.450808  2.667150 -1.913915 -2.072988 -1.754841 #> 2  2012-09-19 2.765987  2.650576  2.881398 -2.066356 -2.235815 -1.896897 #> 3  2012-09-20 2.564581  2.466098  2.663065 -1.693336 -1.839278 -1.547395 #> 4  2012-09-21 2.558030  2.471866  2.644193 -1.709250 -1.836530 -1.581971 #> 5  2012-09-22 2.607292  2.494553  2.720032 -1.745543 -1.913181 -1.577905 #> 6  2012-09-23 2.835975  2.699153  2.972797 -2.159617 -2.367365 -1.951869 #> 7  2012-09-24 2.756248  2.616695  2.895802 -2.627882 -2.838272 -2.417492 #> 8  2012-09-25 1.881598  1.746331  2.016865 -1.999497 -2.211662 -1.787331 #> 9  2012-09-26 2.139146  2.041090  2.237203 -1.970511 -2.123014 -1.818009 #> 10 2012-09-27 1.954997  1.863422  2.046572 -1.854895 -1.996783 -1.713008 #>    msgs.fit warnings errors #> 1                           #> 2                           #> 3                           #> 4                           #> 5                           #> 6                           #> 7                           #> 8                           #> 9                           #> 10                          if (FALSE) { plot_metab_preds(mm1) plot_metab_preds(mm3) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_bayes-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Metabolism model fitted by Bayesian MCMC — metab_bayes-class","title":"Metabolism model fitted by Bayesian MCMC — metab_bayes-class","text":"metab_bayes models use Bayesian MCMC methods fit values GPP, ER, K given curve.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_bayes.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Bayesian metabolism model fitting function — metab_bayes","title":"Basic Bayesian metabolism model fitting function — metab_bayes","text":"Fits Bayesian model estimate GPP ER input data , temperature, light, etc. See mm_name choose Bayesian model specs relevant options specs argument.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_bayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Bayesian metabolism model fitting function — metab_bayes","text":"","code":"metab_bayes(   specs = specs(mm_name(\"bayes\")),   data = mm_data(solar.time, DO.obs, DO.sat, depth, temp.water, light, discharge,     optional = \"discharge\"),   data_daily = mm_data(date, discharge.daily, optional = \"all\"),   info = NULL )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_bayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Bayesian metabolism model fitting function — metab_bayes","text":"specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values. data data.frame (tbl_df) input data temporal resolution raw observations (unit-value). Columns must names, units, format default. solar.time column must also timezone code ('tzone' attribute) 'UTC'. See 'Formatting data' section full description. data_daily data.frame containing inputs daily timestep. See 'Formatting data_daily' section full  description. info information, format, like store  within metab_model object","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_bayes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Bayesian metabolism model fitting function — metab_bayes","text":"metab_bayes object containing fitted model. object can   inspected functions metab_model_interface   also get_mcmc.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_bayes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic Bayesian metabolism model fitting function — metab_bayes","text":"summer fall 2016, new compilation Stan model gives deprecation warnings including typedef 'size_type' locally defined used [-Wunused-local-typedefs], typedef 'index_range' locally defined used [-Wunused-local-typedefs], typedef 'index' locally defined used [-Wunused-local-typedefs], 'void stan::math::set_zero_all_adjoints()' defined used [-Wunused-function]. OKAY. Subsequent runs compiled Stan model quieter, model work.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_bayes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Basic Bayesian metabolism model fitting function — metab_bayes","text":"Alison Appling, Bob Hall","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_bayes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic Bayesian metabolism model fitting function — metab_bayes","text":"","code":"if (FALSE) { dat <- data_metab('3', res='30') # fast-ish model version, but still too slow to auto-run in examples mm <- metab_bayes(data=dat,   specs(mm_name('bayes', err_proc_iid=FALSE),     n_cores=3, n_chains=3, burnin_steps=300, saved_steps=100)) mm get_fitting_time(mm) predict_metab(mm) plot_DO_preds(predict_DO(mm))  # error and warning messages are printed with the mm object if present dat <- data_metab('3', res='30', flaws=c('missing middle')) mm <- metab(specs(mm_name('bayes', err_proc_iid=FALSE),   n_cores=3, n_chains=3, burnin_steps=300, saved_steps=100, verbose=FALSE),   data=dat) predict_metab(mm)  # view the Stan model file as stored on your system file.edit(get_specs(mm)$model_path) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe the requirements for an argument to metab() — metab_inputs","title":"Describe the requirements for an argument to metab() — metab_inputs","text":"Describe requirements argument metab()","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe the requirements for an argument to metab() — metab_inputs","text":"","code":"metab_inputs(   type = c(\"bayes\", \"mle\", \"night\", \"Kmodel\", \"sim\"),   input = c(\"specs\", \"data\", \"data_daily\", \"info\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe the requirements for an argument to metab() — metab_inputs","text":"type type model want fit input name argument pass metab()","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe the requirements for an argument to metab() — metab_inputs","text":"","code":"metab_inputs('night','specs') #> [1] \"specs(mm_name('night')) # see ?mm_name, ?mm_specs for more options\" metab_inputs('bayes','data') #>      colname          class          units     need #> 1 solar.time POSIXct,POSIXt                required #> 2     DO.obs        numeric      mgO2 L^-1 required #> 3     DO.sat        numeric      mgO2 L^-1 required #> 4      depth        numeric              m required #> 5 temp.water        numeric           degC required #> 6      light        numeric umol m^-2 s^-1 required #> 7  discharge        numeric       m^3 s^-1 optional metab_inputs('Kmodel','data_daily') #>            colname   class    units     need #> 1             date    Date          required #> 2       K600.daily numeric     d^-1 required #> 3 K600.daily.lower numeric     d^-1 optional #> 4 K600.daily.upper numeric     d^-1 optional #> 5  discharge.daily numeric m^3 s^-1 optional #> 6   velocity.daily numeric   m s^-1 optional metab_inputs('mle','info') #> [1] \"info may be NULL, a list, or any other data you want to attach to the output of metab()\""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_mle-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Metabolism model fitted by maximum likelihood estimation — metab_mle-class","title":"Metabolism model fitted by maximum likelihood estimation — metab_mle-class","text":"metab_mle models use non-linear minimization negative log likelihood fit values GPP, ER, K given curve.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum likelihood metabolism model fitting function — metab_mle","title":"Maximum likelihood metabolism model fitting function — metab_mle","text":"Uses maximum likelihood fit model estimate GPP ER input data , temperature, light, etc. Discharge used, , identify exclude days negative discharge.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum likelihood metabolism model fitting function — metab_mle","text":"","code":"metab_mle(   specs = specs(mm_name(\"mle\")),   data = mm_data(solar.time, DO.obs, DO.sat, depth, temp.water, light, discharge,     optional = \"discharge\"),   data_daily = mm_data(date, K600.daily, init.GPP.daily, init.Pmax, init.alpha,     init.ER.daily, init.ER20, init.K600.daily, optional = \"all\"),   info = NULL )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum likelihood metabolism model fitting function — metab_mle","text":"specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values. data data.frame (tbl_df) input data temporal resolution raw observations (unit-value). Columns must names, units, format default. solar.time column must also timezone code ('tzone' attribute) 'UTC'. See 'Formatting data' section full description. data_daily data.frame containing inputs daily timestep. See 'Formatting data_daily' section full  description. info information, format, like store  within metab_model object","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_mle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum likelihood metabolism model fitting function — metab_mle","text":"metab_mle object containing fitted model. object can   inspected functions metab_model_interface.   code column get_fit(mm) defined Value   subsection ?nlm.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_mle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum likelihood metabolism model fitting function — metab_mle","text":"","code":"dat <- data_metab('3','30') # PRK mm <- metab_mle(data=dat) predict_metab(mm) #>         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper #> 1 2012-09-18 2.816207  1.894260  3.738153 -2.116196 -2.867236 -1.365155 #> 2 2012-09-19 3.287146  2.265982  4.308309 -2.479248 -3.322547 -1.635950 #> 3 2012-09-20 2.599133  1.935957  3.262309 -1.718192 -2.224222 -1.212162 #>   msgs.fit warnings errors #> 1                          #> 2                          #> 3                           # PR with fixed K on two days dat_daily <- data.frame(date=as.Date(c(\"2012-09-18\",\"2012-09-20\")), K600.daily=35) metab_mle(data=dat, data_daily=dat_daily) #> metab_model of type metab_mle  #> streamMetabolizer version 0.12.1  #> Specifications: #>   model_name        m_np_oi_tr_plrckm.nlm                                        #>   day_start         4                                                            #>   day_end           28                                                           #>   day_tests         full_day, even_timesteps, complete_data, pos_discharge, p... #>   required_timestep NA                                                           #>   init.GPP.daily    8                                                            #>   init.ER.daily     -10                                                          #>   init.K600.daily   10                                                           #> Fitting time: 1.21 secs elapsed #> Parameters (3 dates): #>         date GPP.daily GPP.daily.lower GPP.daily.upper   ER.daily #> 1 2012-09-18 3.202406         3.018387        3.386425 -2.419569  #> 2 2012-09-19 3.287146         2.265982        4.308309 -2.479248  #> 3 2012-09-20 3.214161         3.042628        3.385693 -2.158125  #>   ER.daily.lower ER.daily.upper K600.daily K600.daily.lower K600.daily.upper #> 1      -2.691317      -2.147821 35.00000NA               NA               NA #> 2      -3.322547      -1.635950  33.31607          23.82513         42.80701 #> 3      -2.413318      -1.902933 35.00000NA               NA               NA #>   msgs.fit #> 1          #> 2      W   #> 3          #> Fitting warnings: #>   1 date: data_daily$K600.daily==NA so fitting by MLE #> Predictions (3 dates): #>         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper #> 1 2012-09-18 3.202406  3.018387  3.386425 -2.419569 -2.691317 -2.147821 #> 2 2012-09-19 3.287146  2.265982  4.308309 -2.479248 -3.322547 -1.635950 #> 3 2012-09-20 3.214161  3.042628  3.385693 -2.158125 -2.413318 -1.902933 #>   msgs.fit msgs.pred #> 1                    #> 2      W             #> 3                     # PRK with day-specific inits on some days dat_daily <- data.frame(date=as.Date(\"2012-09-19\"),   init.GPP.daily=4, init.K600.daily=60) metab_mle(data=dat, data_daily=dat_daily) #> metab_model of type metab_mle  #> streamMetabolizer version 0.12.1  #> Specifications: #>   model_name        m_np_oi_tr_plrckm.nlm                                        #>   day_start         4                                                            #>   day_end           28                                                           #>   day_tests         full_day, even_timesteps, complete_data, pos_discharge, p... #>   required_timestep NA                                                           #>   init.GPP.daily    8                                                            #>   init.ER.daily     -10                                                          #>   init.K600.daily   10                                                           #> Fitting time: 1.171 secs elapsed #> Parameters (3 dates): #>         date GPP.daily GPP.daily.lower GPP.daily.upper   ER.daily #> 1 2012-09-18 2.816207         1.894260        3.738153 -2.116196  #> 2 2012-09-19 3.287148         2.269303        4.304993 -2.479250  #> 3 2012-09-20 2.599133         1.935957        3.262309 -1.718192  #>   ER.daily.lower ER.daily.upper K600.daily K600.daily.lower K600.daily.upper #> 1      -2.867236      -1.365155  31.06500          21.81770         40.31231 #> 2      -3.319998      -1.638502  33.31609          23.85389         42.77829 #> 3      -2.224222      -1.212162  28.73156          22.12035         35.34276 #>   msgs.fit #> 1      W   #> 2          #> 3      W   #> Fitting warnings: #>   2 dates: data_daily$init.GPP.daily==NA so using specs #>   2 dates: data_daily$init.K600.daily==NA so using specs #> Predictions (3 dates): #>         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper #> 1 2012-09-18 2.816207  1.894260  3.738153 -2.116196 -2.867236 -1.365155 #> 2 2012-09-19 3.287148  2.269303  4.304993 -2.479250 -3.319998 -1.638502 #> 3 2012-09-20 2.599133  1.935957  3.262309 -1.718192 -2.224222 -1.212162 #>   msgs.fit msgs.pred #> 1      W             #> 2                    #> 3      W              # Nonlinear GPP or ER equations metab_mle(specs(mm_name('mle', GPP_fun='satlight')), data=dat) #> metab_model of type metab_mle  #> streamMetabolizer version 0.12.1  #> Specifications: #>   model_name        m_np_oi_tr_psrckm.nlm                                        #>   day_start         4                                                            #>   day_end           28                                                           #>   day_tests         full_day, even_timesteps, complete_data, pos_discharge, p... #>   required_timestep NA                                                           #>   init.Pmax         10                                                           #>   init.alpha        1e-04                                                        #>   init.ER.daily     -10                                                          #>   init.K600.daily   10                                                           #> Fitting time: 1.799 secs elapsed #> Parameters (3 dates): #>         date      Pmax Pmax.lower Pmax.upper        alpha alpha.lower #> 1 2012-09-18 6.109019    5.645571   6.572467 0.008351642  0.007714609 #> 2 2012-09-19 7.286736    6.537937   8.035535 0.009177263  0.008270869 #> 3 2012-09-20 6.269003    5.586875   6.951132 0.007380747  0.006604585 #>   alpha.upper   ER.daily ER.daily.lower ER.daily.upper K600.daily #> 1 0.008988675 -1.958642       -2.091696      -1.825588  24.80398  #> 2 0.010083657 -2.260356       -2.468652      -2.052060  26.65519  #> 3 0.008156909 -1.685959       -1.851738      -1.520180  24.46159  #>   K600.daily.lower K600.daily.upper msgs.fit #> 1         23.32547         26.28248          #> 2         24.52053         28.78984          #> 3         22.48988         26.43329          #> Predictions (3 dates): #>         date      GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper #> 1 2012-09-18 2.495253        NA        NA -1.958642 -2.091696 -1.825588 #> 2 2012-09-19 2.892568        NA        NA -2.260356 -2.468652 -2.052060 #> 3 2012-09-20 2.422478        NA        NA -1.685959 -1.851738 -1.520180 #>   msgs.fit msgs.pred #> 1                    #> 2                    #> 3                    metab_mle(specs(mm_name('mle', ER_fun='q10temp')), data=dat) #> metab_model of type metab_mle  #> streamMetabolizer version 0.12.1  #> Specifications: #>   model_name        m_np_oi_tr_plrqkm.nlm                                        #>   day_start         4                                                            #>   day_end           28                                                           #>   day_tests         full_day, even_timesteps, complete_data, pos_discharge, p... #>   required_timestep NA                                                           #>   init.GPP.daily    8                                                            #>   init.ER20         -10                                                          #>   init.K600.daily   10                                                           #> Fitting time: 1.396 secs elapsed #> Parameters (3 dates): #>         date GPP.daily GPP.daily.lower GPP.daily.upper       ER20 ER20.lower #> 1 2012-09-18 2.056615         1.532462        2.580769 -2.704649   -3.453849 #> 2 2012-09-19 2.438948         1.833218        3.044678 -3.149906   -4.011733 #> 3 2012-09-20 2.097309         1.653788        2.540831 -2.377270   -2.962660 #>   ER20.upper K600.daily K600.daily.lower K600.daily.upper msgs.fit #> 1  -1.955450  22.41849          17.33170         27.50528          #> 2  -2.288080  24.24939          18.82827         29.67052          #> 3  -1.791879  22.85723          18.55131         27.16315          #> Predictions (3 dates): #>         date      GPP GPP.lower GPP.upper        ER ER.lower ER.upper msgs.fit #> 1 2012-09-18 2.056615  1.532462  2.580769 -1.546919       NA       NA          #> 2 2012-09-19 2.438948  1.833218  3.044678 -1.836107       NA       NA          #> 3 2012-09-20 2.097309  1.653788  2.540831 -1.386761       NA       NA          #>   msgs.pred #> 1           #> 2           #> 3           if (FALSE) { plot_DO_preds(predict_DO(mm)) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A metabolism model class. — metab_model-class","title":"A metabolism model class. — metab_model-class","text":"metabolism model class.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A metabolism model class. — metab_model-class","text":"info metadata user chooses package metabolism model. metab_daily data.frame daily metabolism predictions. fit internal representation fitted model. fitting_time Usually stored proc_time; time required fit  model. pkg_version string indicating package version used create metab_model object. specs list model specifications supplied fitting  function. data data used fit model. data_daily daily data, , used fit model.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a metab_model object. — metab_model","title":"Create a metab_model object. — metab_model","text":"Generates new model class metab_model (metab_model-class).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a metab_model object. — metab_model","text":"","code":"metab_model(   model_class = \"metab_model\",   info = \"user metadata goes here\",   metab_daily = NULL,   fit = \"generic metab_model class; no actual fit\",   fitting_time = system.time({ }),   specs = list(),   data = mm_data(solar.time, DO.obs, DO.sat, depth, temp.water, light),   data_daily = mm_data(date, optional = \"all\"),   pkg_version = as.character(packageVersion(\"streamMetabolizer\")),   ... )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a metab_model object. — metab_model","text":"model_class character name class inheriting metab_model -  type object create info User-supplied metadata form. metab_daily data.frame daily metabolism estimates produced fit. fit internal representation fitted model. fitting_time proc_time object giving time taken fit  model. specs list model specifications supplied fitting function. data data used fit model. data_daily data_daily used fit model. May  NULL. pkg_version string indicating package version used create  metab_model object. default almost always appropriate. ... arguments passed new() particular model_class","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a metab_model object. — metab_model","text":"metab_model object.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a metab_model object. — metab_model","text":"","code":"metab_model()  #> metab_model  #>   User-supplied metadata: #> [1] \"user metadata goes here\" #> streamMetabolizer version 0.12.1  #> Specifications: #>    #> Fitting time: 0 secs elapsed metab_model(\"metab_mle\", fit=1:5, specs=list(length=5)) #> metab_model of type metab_mle  #>   User-supplied metadata: #> [1] \"user metadata goes here\" #> streamMetabolizer version 0.12.1  #> Specifications: #>   length 5     #> Fitting time: 0 secs elapsed"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model_interface.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions implemented by any streamMetabolizer-compatible metabolism\nmodel. — metab_model_interface","title":"Functions implemented by any streamMetabolizer-compatible metabolism\nmodel. — metab_model_interface","text":"Metabolism models streamMetabolizer package implement common set core functions. functions conceptually packaged metab_model_interface defined .","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model_interface.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Functions implemented by any streamMetabolizer-compatible metabolism\nmodel. — metab_model_interface","text":"collection functions metabolism model   streamMetabolizer implement.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model_interface.html","id":"functions-in-the-interface","dir":"Reference","previous_headings":"","what":"Functions in the interface","title":"Functions implemented by any streamMetabolizer-compatible metabolism\nmodel. — metab_model_interface","text":"show(metab_model) { display(metab_model) } get_params(metab_model, ...) { return(data.frame) } get_param_names(metab_model, ...) { return(list) } predict_metab(metab_model, ...) { return(data.frame)   } predict_DO(metab_model, ...) { return(data.frame) } get_fit(metab_model) { return(fitted.model) } get_fitting_time(metab_model) { return(proc_time) } get_info(metab_model) { return(info) } get_specs(metab_model) { return(specs.list) } get_data(metab_model) { return(data.frame) } get_data_daily(metab_model) { return(data.frame) } get_version(metab_model) { return(version.string) }","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_model_interface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions implemented by any streamMetabolizer-compatible metabolism\nmodel. — metab_model_interface","text":"","code":"methods(class=\"metab_model\") #>  [1] get_data         get_data_daily   get_fit          get_fitting_time #>  [5] get_info         get_param_names  get_params       get_specs        #>  [9] get_version      predict_DO       predict_metab    show             #> see '?methods' for accessing help and source code"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Reaeration model fitted by nighttime regression — metab_night-class","title":"Reaeration model fitted by nighttime regression — metab_night-class","text":"metab_night models use nighttime regression fit values K given time series.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night.html","id":null,"dir":"Reference","previous_headings":"","what":"Nighttime regression for K estimation — metab_night","title":"Nighttime regression for K estimation — metab_night","text":"Fits model estimate K nighttime input data , temperature, light, etc. default day start & end 12 noon preceding present day; algorithm filters data just time points light low. Discharge used, , identify exclude days negative discharge.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nighttime regression for K estimation — metab_night","text":"","code":"metab_night(   specs = specs(mm_name(\"night\")),   data = mm_data(solar.time, DO.obs, DO.sat, depth, temp.water, light, discharge,     optional = \"discharge\"),   data_daily = mm_data(NULL),   info = NULL )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nighttime regression for K estimation — metab_night","text":"specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values. data data.frame (tbl_df) input data temporal resolution raw observations (unit-value). Columns must names, units, format default. solar.time column must also timezone code ('tzone' attribute) 'UTC'. See 'Formatting data' section full description. data_daily data.frame containing inputs daily timestep. See 'Formatting data_daily' section full  description. info information, format, like store  within metab_model object","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nighttime regression for K estimation — metab_night","text":"metab_night object containing fitted model. object can   inspected functions metab_model_interface.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Nighttime regression for K estimation — metab_night","text":"Alison Appling, Maite Arroita, Bob Hall","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nighttime regression for K estimation — metab_night","text":"","code":"dat <- data_metab('3', day_start=12, day_end=35) mm <- metab_night(data=dat) predict_metab(mm) #>         date GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper msgs.fit #> 1 2012-09-18   0        NA        NA -2.122498 -2.351240 -1.893755          #> 2 2012-09-19   0        NA        NA -2.927715 -3.233801 -2.621628          #> 3 2012-09-20   0        NA        NA -2.125522 -2.305859 -1.945185          #>   warnings errors #> 1                 #> 2                 #> 3                 if (FALSE) { plot_DO_preds(predict_DO(mm)) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night_predict_1ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to predict_DO.metab_model — metab_night_predict_1ply","title":"Helper to predict_DO.metab_model — metab_night_predict_1ply","text":"Usually assigned model_fun within mm_model_by_ply, called ","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night_predict_1ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to predict_DO.metab_model — metab_night_predict_1ply","text":"","code":"metab_night_predict_1ply(   data_ply,   data_daily_ply,   day_start,   day_end,   ply_date,   timestep_days,   ...,   model_name )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night_predict_1ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to predict_DO.metab_model — metab_night_predict_1ply","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) data_daily_ply NULL data.frame containing inputs daily  timestep. day_start start time (inclusive) day's data number hours  midnight begins date. example, day_start=-1.5  indicates data describing 2006-06-26 begin 2006-06-25 22:30,  first observation time occurs time day_start fall exactly observation time. day_end end time (exclusive) day's data number hours  midnight begins date. example, day_end=30 indicates  data describing 2006-06-26 end last observation time occurs  2006-06-27 06:00. ply_date modal date ply data data_daily,  date ply referred topresent. timestep_days numeric length mean timestep day,  requested setting timestep_days TRUE numeric value call mm_model_by_ply ... args passed untouched function calling  mm_model_by_ply, mm_model_by_ply, finally function. model_name coded model name determine GPP_fun, ER_fun, deficit_src, ode_method use prediction","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_night_predict_1ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to predict_DO.metab_model — metab_night_predict_1ply","text":"data.frame predictions","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_sim-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Data simulator — metab_sim-class","title":"Data simulator — metab_sim-class","text":"metab_sim models generate time series input data, including GPP, ER, K600 values","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate dissolved oxygen data from input data — metab_sim","title":"Simulate dissolved oxygen data from input data — metab_sim","text":"Takes input data form sub-daily time series (data) .sat, depth, temperature, light, daily time series (data_daily) GPP, ER, K600 values, turns simulated .obs. Either data data_daily specify starting .obs value day; data, takes form .obs column values least first time point day (values ignored), data_daily, takes form .mod.1 column one starting value per day.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate dissolved oxygen data from input data — metab_sim","text":"","code":"metab_sim(   specs = specs(mm_name(\"sim\")),   data = mm_data(solar.time, DO.obs, DO.sat, depth, temp.water, light, optional =     \"DO.obs\"),   data_daily = mm_data(date, discharge.daily, DO.mod.1, K600.daily, GPP.daily, Pmax,     alpha, ER.daily, ER20, err.obs.sigma, err.obs.phi, err.proc.sigma, err.proc.phi,     optional = \"all\"),   info = NULL )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate dissolved oxygen data from input data — metab_sim","text":"specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values. data data.frame (tbl_df) input data temporal resolution raw observations (unit-value). Columns must names, units, format default. solar.time column must also timezone code ('tzone' attribute) 'UTC'. See 'Formatting data' section full description. data_daily data.frame containing inputs daily timestep. See 'Formatting data_daily' section full  description. info information, format, like store  within metab_model object","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate dissolved oxygen data from input data — metab_sim","text":"metab_sim object containing fitted model. object can   inspected functions metab_model_interface.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/metab_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate dissolved oxygen data from input data — metab_sim","text":"","code":"## simulations with variation all at sub-daily scale # prepare input data (DO used only to pick first DO of each day) dat <- data_metab('3', res='15') dat_daily <- data.frame(date=as.Date(paste0(\"2012-09-\", 18:20)),   GPP.daily=2, ER.daily=-3, K600.daily=21, stringsAsFactors=FALSE)  # define simulation parameters mm <- metab_sim(   specs(mm_name('sim'), err_obs_sigma=0.1, err_proc_sigma=2,     GPP_daily=NULL, ER_daily=NULL, K600_daily=NULL),   data=dat, data_daily=dat_daily) # actual simulation happens during prediction - different each time get_params(mm) #>         date K600.daily GPP.daily ER.daily err.obs.sigma err.obs.phi #> 1 2012-09-18         21         2       -3           0.1           0 #> 2 2012-09-19         21         2       -3           0.1           0 #> 3 2012-09-20         21         2       -3           0.1           0 #>   err.proc.sigma err.proc.phi discharge.daily #> 1              2            0        19.13472 #> 2              2            0        22.90962 #> 3              2            0        20.21814 predict_metab(mm) #>         date GPP GPP.lower GPP.upper ER ER.lower ER.upper msgs.fit warnings #> 1 2012-09-18   2        NA        NA -3       NA       NA       NA          #> 2 2012-09-19   2        NA        NA -3       NA       NA       NA          #> 3 2012-09-20   2        NA        NA -3       NA       NA       NA          #>   errors #> 1        #> 2        #> 3        predict_DO(mm)[seq(1,50,by=10),] #>          date          solar.time   DO.sat depth temp.water     light  DO.pure #> 1  2012-09-18 2012-09-18 04:05:58 9.083329  0.16       3.60    0.0000 8.410000 #> 11 2012-09-18 2012-09-18 06:35:58 9.174032  0.16       3.23  361.1082 8.074219 #> 21 2012-09-18 2012-09-18 09:05:58 8.638056  0.16       5.51 1339.0007 8.873394 #> 31 2012-09-18 2012-09-18 11:35:58 7.784199  0.16       9.68 1778.8622 9.108354 #> 41 2012-09-18 2012-09-18 14:05:58 7.309720  0.16      12.35 1498.8112 8.494834 #>      DO.mod   DO.obs #> 1  8.410000 8.288769 #> 11 8.120033 8.108756 #> 21 9.088803 8.966921 #> 31 9.373993 9.310303 #> 41 8.645758 8.474404 predict_DO(mm)[seq(1,50,by=10),] #>          date          solar.time   DO.sat depth temp.water     light  DO.pure #> 1  2012-09-18 2012-09-18 04:05:58 9.083329  0.16       3.60    0.0000 8.410000 #> 11 2012-09-18 2012-09-18 06:35:58 9.174032  0.16       3.23  361.1082 8.074219 #> 21 2012-09-18 2012-09-18 09:05:58 8.638056  0.16       5.51 1339.0007 8.873394 #> 31 2012-09-18 2012-09-18 11:35:58 7.784199  0.16       9.68 1778.8622 9.108354 #> 41 2012-09-18 2012-09-18 14:05:58 7.309720  0.16      12.35 1498.8112 8.494834 #>      DO.mod   DO.obs #> 1  8.410000 8.249887 #> 11 7.992529 8.004143 #> 21 8.414859 8.334371 #> 31 8.808968 8.773604 #> 41 8.486494 8.380405  # or same each time if seed is set mm@specs$sim_seed <- 236 predict_DO(mm)$DO.obs[seq(1,50,by=10)] #> [1] 8.514605 8.226884 9.242439 9.682286 8.660459 predict_DO(mm)$DO.obs[seq(1,50,by=10)] #> [1] 8.514605 8.226884 9.242439 9.682286 8.660459  # fancy GPP equation dat_daily <- data.frame(date=as.Date(paste0(\"2012-09-\", 18:20)),   Pmax=8, alpha=0.01, ER.daily=-3, K600.daily=21, stringsAsFactors=FALSE) mm <- metab_sim(   specs(mm_name('sim', GPP_fun='satlight'), err_obs_sigma=0.1, err_proc_sigma=2,     Pmax=NULL, alpha=NULL, ER_daily=NULL, K600_daily=NULL),   data=dat, data_daily=dat_daily) get_params(mm) #>         date K600.daily Pmax alpha ER.daily err.obs.sigma err.obs.phi #> 1 2012-09-18         21    8  0.01       -3           0.1           0 #> 2 2012-09-19         21    8  0.01       -3           0.1           0 #> 3 2012-09-20         21    8  0.01       -3           0.1           0 #>   err.proc.sigma err.proc.phi discharge.daily #> 1              2            0        19.36654 #> 2              2            0        19.95024 #> 3              2            0        21.22849 predict_metab(mm) # metab estimates are for data without errors #>         date      GPP GPP.lower GPP.upper ER ER.lower ER.upper msgs.fit #> 1 2012-09-18 3.182805        NA        NA -3       NA       NA       NA #> 2 2012-09-19 3.165193        NA        NA -3       NA       NA       NA #> 3 2012-09-20 3.147224        NA        NA -3       NA       NA       NA #>   warnings errors #> 1                 #> 2                 #> 3                 predict_DO(mm)[seq(1,50,by=10),] #>          date          solar.time   DO.sat depth temp.water     light  DO.pure #> 1  2012-09-18 2012-09-18 04:05:58 9.083329  0.16       3.60    0.0000 8.410000 #> 11 2012-09-18 2012-09-18 06:35:58 9.174032  0.16       3.23  361.1082 8.273214 #> 21 2012-09-18 2012-09-18 09:05:58 8.638056  0.16       5.51 1339.0007 9.939735 #> 31 2012-09-18 2012-09-18 11:35:58 7.784199  0.16       9.68 1778.8622 9.910489 #> 41 2012-09-18 2012-09-18 14:05:58 7.309720  0.16      12.35 1498.8112 9.203392 #>       DO.mod    DO.obs #> 1   8.410000  8.461259 #> 11  8.212799  8.004816 #> 21 10.180817 10.165990 #> 31 10.134104 10.111424 #> 41  9.394355  9.253832  ## simulations with variation at both sub-daily and multi-day scales sp <- specs(mm_name('sim', pool_K600='none'),   K600_daily = function(n, ...) pmax(0, rnorm(n, 10, 3))) # n is available within sim models mm <- metab(sp, dat) get_params(mm) #>         date K600.daily GPP.daily  ER.daily err.obs.sigma err.obs.phi #> 1 2012-09-18  10.973189  0.872383 -7.136814          0.01           0 #> 2 2012-09-19   8.874616  6.162460 -6.991966          0.01           0 #> 3 2012-09-20   9.813784  6.693289  0.000000          0.01           0 #>   err.proc.sigma err.proc.phi discharge.daily #> 1            0.2            0        19.37273 #> 2            0.2            0        20.94919 #> 3            0.2            0        20.99108 predict_metab(mm) #>         date       GPP GPP.lower GPP.upper         ER ER.lower ER.upper #> 1 2012-09-18  5.755216        NA        NA  -1.801561       NA       NA #> 2 2012-09-19  5.479744        NA        NA -10.943692       NA       NA #> 3 2012-09-20 17.948548        NA        NA  -4.696068       NA       NA #>   msgs.fit warnings errors #> 1       NA                 #> 2       NA                 #> 3       NA                  ## K~Q model dat <- data_metab('10','15') sp <- specs(mm_name('sim', pool_K600='binned')) mm <- metab(sp, dat) pars <- get_params(mm) attr(pars, 'K600_eqn') #> $K600_lnQ_nodes_centers #> [1] 2.7 2.9 3.1 3.3 #>  #> $K600_lnQ_cnode_meanlog #>  [1] 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 1.791759 #>  [9] 1.791759 1.791759 #>  #> $K600_lnQ_cnode_sdlog #>  [1] 1 1 1 1 1 1 1 1 1 1 #>  #> $K600_lnQ_nodediffs_meanlog #>  [1] 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 #>  #> $K600_lnQ_nodediffs_sdlog #>  [1] 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 #>  #> $lnK600_lnQ_nodes #> [1] 1.8055839 1.7903077 1.2187666 0.6656684 #>  #> $K600_daily_predlog #>  [1] 1.2645783 1.6185911 0.9744718 1.7094699 1.3963858 1.7913175 0.9430280 #>  [8] 1.4406586 0.9215569 1.4184119 #>   if (FALSE) { plot_DO_preds(predict_DO(mm)) plot_DO_preds(mm) library(ggplot2) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mle_1ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Make daily metabolism estimates from input parameters — mle_1ply","title":"Make daily metabolism estimates from input parameters — mle_1ply","text":"Called metab_mle().","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mle_1ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make daily metabolism estimates from input parameters — mle_1ply","text":"","code":"mle_1ply(   data_ply,   data_daily_ply,   ply_date,   ply_validity,   timestep_days,   ...,   specs = specs(\"m_np_oi_tr_km.nlm\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mle_1ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make daily metabolism estimates from input parameters — mle_1ply","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) data_daily_ply NULL data.frame containing inputs daily  timestep. ply_date modal date ply data data_daily,  date ply referred topresent. ply_validity output mm_is_valid_day applied  data_ply tests specified day_tests. tests  run function called. result TRUE ply entirely valid, character vector containing one error  messages tests failed. timestep_days numeric length mean timestep day,  requested setting timestep_days TRUE numeric value call mm_model_by_ply ... args passed untouched function calling  mm_model_by_ply, mm_model_by_ply, finally function. specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mle_1ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make daily metabolism estimates from input parameters — mle_1ply","text":"data.frame estimates nlm model   diagnostics","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_check_mcmc_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Use an engine-specific function to check the model syntax — mm_check_mcmc_file","title":"Use an engine-specific function to check the model syntax — mm_check_mcmc_file","text":"Use engine-specific function check model syntax","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_check_mcmc_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use an engine-specific function to check the model syntax — mm_check_mcmc_file","text":"","code":"mm_check_mcmc_file(model_file)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_check_mcmc_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use an engine-specific function to check the model syntax — mm_check_mcmc_file","text":"model_file file path model file check; extension used determine engine use checking.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_check_mcmc_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the syntax of all Bayesian model files in the package — mm_check_mcmc_files","title":"Check the syntax of all Bayesian model files in the package — mm_check_mcmc_files","text":"Check syntax Bayesian model files package","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_check_mcmc_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the syntax of all Bayesian model files in the package — mm_check_mcmc_files","text":"","code":"mm_check_mcmc_files(grep_pattern)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_check_mcmc_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the syntax of all Bayesian model files in the package — mm_check_mcmc_files","text":"grep_pattern string filter names checked. fixed=FALSE.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_check_mcmc_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the syntax of all Bayesian model files in the package — mm_check_mcmc_files","text":"","code":"if (FALSE) { # takes a long time, so run only when needed checks <- streamMetabolizer:::mm_check_mcmc_files() saveRDS(checks, file='temp/bayes_model_checks.Rds') checks <- streamMetabolizer:::mm_check_mcmc_files(\"*ko\\\\.stan\") checks <- streamMetabolizer:::mm_check_mcmc_files(\"b_np_.*_ko\\\\.stan\") cat(checks[[7]]) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the data types that may be used by metab_models using the\nmetab_model_interface. — mm_data","title":"Return the data types that may be used by metab_models using the\nmetab_model_interface. — mm_data","text":"Produces unitted data.frame column names, units,   data format used metab_models comply strictly   metab_model_interface. columns may included:  solar.time date-time values mean solar time (see   calc_solar_time /  convert_UTC_to_solartime), POSIXct format tzone   attribute 'UTC'. May approximated local, non-daylight-savings   clock time (still nominal UTC timezone clock noons close   solar noon), mean solar time better matching model time windows   diel cycle light availability. Throughout package, variables   named \"solar.time\" mean solar time, \"app.solar.time\" means apparent   solar time, \".solar.time\" means either. .obs dissolved oxygen concentration observations, \\(mg   O[2] L^{-1}\\) .sat dissolved oxygen concentrations water   equilibrium saturation \\(mg O[2] L^{-1}\\). Calculate using   calc_DO_sat depth stream depth, \\(m\\). temp.water water temperature, \\(degC\\). light photosynthetically active radiation, \\(\\mu mol\\   m^{-2} s^{-1}\\) date dates interest Date format err.obs.sigma SD observation error use simulating   data err.obs.phi autocorrelation observation error use   simulating data err.proc.sigma SD process error use simulating data err.proc.phi autocorrelation process error use   simulating data .obs dissolved oxygen concentration observations, \\(mg   O[2] L^{-1}\\) GPP daily estimates GPP, \\(g O[2] m^-2 d^-1\\) ER daily estimates ER, \\(g O[2] m^-2 d^-1\\) K600 daily estimates K600, \\(d^-1\\) GPP.init daily initial values GPP, \\(g O[2] m^-2   d^-1\\), use maximum likelihood estimation ER.init daily initial values ER, \\(g O[2] m^-2 d^-1\\),   use maximum likelihood estimation K600.init daily initial values K600, \\(d^-1\\), use   maximum likelihood estimation discharge.daily daily mean river discharge, \\(m^3 s^-1\\) velocity.daily daily mean river flow velocity, \\(m s^-1\\)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the data types that may be used by metab_models using the\nmetab_model_interface. — mm_data","text":"","code":"mm_data(..., optional = \"none\")"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the data types that may be used by metab_models using the\nmetab_model_interface. — mm_data","text":"... column names select, passed select optional one character strings listing columns, , may excluded. '', entire data.frame may omitted. 'none', entire data.frame must included prototyped. specific column names given, columns may omitted entirely passed metab() NAs.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the data types that may be used by metab_models using the\nmetab_model_interface. — mm_data","text":"data data.frame columns description","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the data types that may be used by metab_models using the\nmetab_model_interface. — mm_data","text":"models require subset data columns. Specialized   models may deviate format, discouraged.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the data types that may be used by metab_models using the\nmetab_model_interface. — mm_data","text":"","code":"# all possible columns mm_data() #>            solar.time    DO.obs    DO.sat depth temp.water          light #> U                     mgO2 L^-1 mgO2 L^-1     m       degC umol m^-2 s^-1 #> 1 2050-03-14 15:10:00      10.1      14.2   0.5       21.8          300.9 #>   discharge velocity       date  DO.mod.1 err.obs.sigma err.obs.phi #> U  m^3 s^-1   m s^-1            mgO2 L^-1     mgO2 L^-1             #> 1         9        2 2050-03-14       7.5          0.01           0 #>   err.proc.sigma err.proc.phi     GPP.daily          Pmax              alpha #> U  gO2 d^-1 m^-2              gO2 d^-1 m^-2 gO2 d^-1 m^-2 gO2 s d^-1 umol^-1 #> 1              5            0             5            10              1e-04 #>        ER.daily          ER20 K600.daily K600.daily.lower K600.daily.upper #> U gO2 d^-1 m^-2 gO2 d^-1 m^-2       d^-1             d^-1             d^-1 #> 1           -10           -10         10              4.5             15.6 #>   init.GPP.daily     init.Pmax         init.alpha init.ER.daily     init.ER20 #> U  gO2 d^-1 m^-2 gO2 d^-1 m^-2 gO2 s d^-1 umol^-1 gO2 d^-1 m^-2 gO2 d^-1 m^-2 #> 1              5            10              1e-04           -10           -10 #>   init.K600.daily discharge.daily velocity.daily           GPP     GPP.lower #> U            d^-1        m^3 s^-1         m s^-1 gO2 d^-1 m^-2 gO2 d^-1 m^-2 #> 1              10               9              2             5             4 #>       GPP.upper            ER      ER.lower      ER.upper             D #> U gO2 d^-1 m^-2 gO2 d^-1 m^-2 gO2 d^-1 m^-2 gO2 d^-1 m^-2 gO2 d^-1 m^-3 #> 1             6            -5            -6            -4             5 #>         D.lower       D.upper #> U gO2 d^-1 m^-3 gO2 d^-1 m^-3 #> 1             5             5  # columns typical of instantaneous data mm_data(solar.time, DO.obs, DO.sat, depth, temp.water, light) #>            solar.time    DO.obs    DO.sat depth temp.water          light #> U                     mgO2 L^-1 mgO2 L^-1     m       degC umol m^-2 s^-1 #> 1 2050-03-14 15:10:00      10.1      14.2   0.5       21.8          300.9  # columns typical of daily data mm_data(date, K600.daily, discharge.daily, velocity.daily) #>         date K600.daily discharge.daily velocity.daily #> U                  d^-1        m^3 s^-1         m s^-1 #> 1 2050-03-14         10               9              2"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter unit or daily data by inclusive start & end dates — mm_filter_dates","title":"Filter unit or daily data by inclusive start & end dates — mm_filter_dates","text":"Filter unit daily data inclusive start & end dates","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter unit or daily data by inclusive start & end dates — mm_filter_dates","text":"","code":"mm_filter_dates(   data,   date_start = NA,   date_end = NA,   day_start = 4,   day_end = 28,   date_format = \"%Y-%m-%d\" )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter unit or daily data by inclusive start & end dates — mm_filter_dates","text":"data either instantaneous/unit daily data, columns solar.time date, respectively, filter date_start Date class convertible .Date. first date (inclusive) report predictions. NA, filtering done. date_end Date class convertible .Date. last date (inclusive) report predictions. NA, filtering done.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter unit or daily data by inclusive start & end dates — mm_filter_dates","text":"","code":"tm <- as.POSIXct(\"2017-10-02 00:00:00 UTC\") dt <- as.Date(\"2017-10-02\") udat <- data.frame(solar.time=tm + as.difftime(1:100, units='hours'), value=1:100) udat1 <- streamMetabolizer:::mm_filter_dates(udat) udat2 <- streamMetabolizer:::mm_filter_dates(udat, date_start=dt, date_end=dt) udat3 <- streamMetabolizer:::mm_filter_dates(udat, date_start=dt, date_end=dt,    day_start=12, day_end=14) c(nrow(udat), nrow(udat1), nrow(udat2), nrow(udat3)) #> [1] 100 100  25   3 ddat <- data.frame(date=dt + as.difftime(1:100, units='days'), value=1:100) ddat1 <- streamMetabolizer:::mm_filter_dates(ddat) ddat2 <- streamMetabolizer:::mm_filter_dates(ddat, date_start=dt+10, date_end=dt+20) c(nrow(ddat), nrow(ddat1), nrow(ddat2)) #> [1] 100 100  11"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_hours.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit to a specific time range on each date — mm_filter_hours","title":"Limit to a specific time range on each date — mm_filter_hours","text":"Within date (labeled 'date' column data, select  values solar.time within time range specified day_start day_end). function removes rows add ; add overlap starting continuous time series, see mm_model_by_ply.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_hours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit to a specific time range on each date — mm_filter_hours","text":"","code":"mm_filter_hours(data, day_start, day_end)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_hours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit to a specific time range on each date — mm_filter_hours","text":"data data.frame containing date solar.time columns (POSIXct) day_start start time day, inclusive, hours day_end end time day, exclusive, hours","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_valid_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove entries in data — mm_filter_valid_days","title":"Remove entries in data — mm_filter_valid_days","text":"Filter data rows pass specified tests completeness regularity","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_valid_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove entries in data — mm_filter_valid_days","text":"","code":"mm_filter_valid_days(   data,   data_daily = NULL,   day_start = 4,   day_end = 27.99,   day_tests = c(\"full_day\", \"even_timesteps\", \"complete_data\", \"pos_discharge\"),   required_timestep = NA,   timestep_days = TRUE )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_valid_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove entries in data — mm_filter_valid_days","text":"data data.frame instantaneous observations, filtered points days pass specified tests mm_is_valid_day data_daily data.frame daily estimates/statistics, filtered accordance filtering data day_start start time (inclusive) day's data number hours midnight begins date. example, day_start=-1.5 indicates data describing 2006-06-26 begin 2006-06-25 22:30, first observation time occurs time day_start fall exactly observation time. metabolism models working single days input data, conventional/useful begin day evening , e.g., -1.5, end just next sunrise, e.g., 30. multiple consecutive days, may make sense start just sunrise (e.g., 4) end 24 hours later. nighttime regression, date assigned chunk data date whose evening contains data. default therefore 12 36 metab_night, times darkness used. day_end end time (exclusive) day's data number hours midnight begins date. example, day_end=30 indicates data describing 2006-06-26 end last observation time occurs 2006-06-27 06:00. See day_start recommended start end times. day_tests list tests conduct determine whether date worth data valid modeling. results tests combined result test implied required_timestep numeric passed model_fun ply_validity argument function. required_timestep NA numeric (length 1). numeric, timestep length days date must pass validity check (within tolerance 0.2% value required_timestep). result test combined results tests listed day_tests reported model_fun ply_validity argument function. timestep_days TRUE like mean timestep length calculated data ply passed model_fun timestep_days argument function. Alternatively, may numeric specifically expected timestep length days; example, 1-hour timestep 1/24 0.0416667.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_valid_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove entries in data — mm_filter_valid_days","text":"list data data_daily structure inputs   invalid days removed, plus third data.frame dates removed","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_filter_valid_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove entries in data — mm_filter_valid_days","text":"","code":"dat <- data_metab(res='30', num_days='10', flaws='missing middle') datfilt <- mm_filter_valid_days(dat) datfilt$removed #>         date           errors #> 1 2012-09-20 uneven timesteps #> 2 2012-09-22 uneven timesteps c(nrow(dat), nrow(datfilt$data)) #> [1] 463 384"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_generate_mcmc_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the models in inst/models/bayes — mm_generate_mcmc_file","title":"Generate the models in inst/models/bayes — mm_generate_mcmc_file","text":"Generate models inst/models/bayes","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_generate_mcmc_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the models in inst/models/bayes — mm_generate_mcmc_file","text":"","code":"mm_generate_mcmc_file(   type = \"bayes\",   pool_K600 = c(\"none\", \"normal\", \"normal_sdzero\", \"normal_sdfixed\", \"linear\",     \"linear_sdzero\", \"linear_sdfixed\", \"binned\", \"binned_sdzero\", \"binned_sdfixed\"),   err_obs_iid = c(TRUE, FALSE),   err_proc_acor = c(FALSE, TRUE),   err_proc_iid = c(FALSE, TRUE),   err_proc_GPP = c(FALSE, TRUE),   ode_method = c(\"trapezoid\", \"euler\"),   GPP_fun = c(\"linlight\", \"satlight\"),   ER_fun = c(\"constant\"),   deficit_src = c(\"DO_mod\", \"DO_obs\"),   engine = \"stan\" )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_generate_mcmc_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the models in inst/models/bayes — mm_generate_mcmc_file","text":"type character. model type. Options: mle: maximum likelihood estimation (see also metab_mle) bayes: bayesian hierarchical models metab_bayes night: nighttime regression (see also metab_night) Kmodel: regression daily estimates K600.daily versus discharge, time, etc., usually 3-phase estimation K alone (MLE nighttime regression), K vs discharge (using model), GPP ER fixed K (MLE) (see also metab_Kmodel) sim: simulation .obs 'data' testing models (see also metab_sim) pool_K600 character. [] model pool information among days get consistent daily estimates K600? Options (see Details ): none: pooling K600 normal: \\(K600 ~ N(mu, sigma)\\) linear: \\(K600 ~ N(B[0] + B[1]*Q, sigma)\\) binned: \\(K600 ~ N(B[Q_bin], sigma)\\) \\(mu ~ N(mu_mu, mu_sigma)\\) \\(sigma ~ N(sigma_mu, sigma_sigma)\\) complete: applicable type='Kmodel', generally used conjunction preceding estimates K (e.g., type='mle' type='night') subsequent estimates GPP ER (e.g., type='mle' daily K600 values specified) err_obs_iid logical. IID observation error included? , model fit differences successive measurements, rather measurements . err_proc_acor logical. autocorrelated process error (autocorrelation term phi fitted) included? err_proc_iid logical. IID process error included? err_proc_GPP logical. IID process error GPP included? kind error occurs day used adjust GPP passing adjusted GPP dDO/dt equation. GPP_inst variable corrected GPP, new variable, GPP_inst_partial, contains pre-adjustment GPP estimates ode_method character. method use solving ordinary differential equation . Options: euler, formerly Euler: final change t=1 t=2 solely function GPP, ER, , etc. t=1 trapezoid, formerly pairmeans: final change t=1 t=2 function mean values GPP, ER, etc. across t=1 t=2. type='mle', options also include rk2 character method accepted ode deSolve package (lsoda, lsode, lsodes, lsodar, vode, daspk, rk4, ode23, ode45, radau, bdf, bdf_d, adams, impAdams, impAdams_d; note many well tested context streamMetabolizer models) GPP_fun character. Function dictating gross primary productivity (GPP) varies within day. Options: linlight: GPP linear function light intercept 0 slope varies day. GPP(t) = GPP.daily * light(t) / mean.light GPP.daily: daily mean GPP, partitioned timestep-specific rates according fraction day's average light occurs timestep (specifically, mean.light mean first 24 hours date's data window) satlight: GPP saturating function light. GPP(t) = Pmax * tanh(alpha * light(t) / Pmax) Pmax: maximum possible GPP alpha: descriptor rate increase GPP function light satlightq10temp: GPP saturating function light exponential function temperature. GPP(t) = Pmax * tanh(alpha * light(t) / Pmax) * 1.036 ^ (temp.water(t) - 20) Pmax: maximum possible GPP alpha: descriptor rate increase GPP function light NA: applicable type='Kmodel', GPP estimated ER_fun character. Function dictating ecosystem respiration (ER) varies within day. Options: constant: ER constant every timestep day. ER(t) = ER.daily ER.daily: daily mean ER, equal instantaneous ER times q10temp: ER timestep exponential function water temperature temperature-normalized base rate. ER(t) = ER20 * 1.045 ^ (temp.water(t) - 20) ER20: value ER temp.water 20 degrees C NA: applicable type='Kmodel', ER estimated deficit_src character. estimate (observed modeled) deficit computed? Options: DO_mod: deficit time t (.sat(t) - DO_mod(t)), difference equilibrium-saturation value current best estimate true concentration time DO_obs: deficit time t (.sat(t) - .obs(t)), difference equilibrium-saturation value measured concentration time DO_obs_filter: applicable type='night': smoothing filter applied measured .obs values applying nighttime regression NA: applicable type='Kmodel', deficit estimated engine character. function software model fitting done? type='mle': nlm (default) type='bayes': stan (default), external software package runs MCMC chains Bayesian models (see http://mc-stan.org) type='night': lm (default) type='Kmodel': mean, lm, loess enable different types relationships daily K600 predictors (nothing, discharge, time, etc.) type='sim': rnorm (default)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_generate_mcmc_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate MCMC code files with all of the desired combinations of features — mm_generate_mcmc_files","title":"Generate MCMC code files with all of the desired combinations of features — mm_generate_mcmc_files","text":"function gets run package build creates every model within  set factorial combinations arguments mm_generate_mcmc_file, exception one pair incompatible arguments (err_obs_iid=F && deficit_src='DO_mod')","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_generate_mcmc_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate MCMC code files with all of the desired combinations of features — mm_generate_mcmc_files","text":"","code":"mm_generate_mcmc_files()"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_get_timestep.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the average timestep in days — mm_get_timestep","title":"Return the average timestep in days — mm_get_timestep","text":"Return average timestep days","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_get_timestep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the average timestep in days — mm_get_timestep","text":"","code":"mm_get_timestep(   datetimes,   format = c(\"mean\", \"unique\", \"modal\"),   require_unique = FALSE,   tol = 60/(24 * 60 * 60) )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_get_timestep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the average timestep in days — mm_get_timestep","text":"datetimes vector date-times POSIXct format  compute average timestep format format return timestep. 'mean' always  returns one value; 'unique' may return one depending  variation timesteps value digits. require_unique logical. required exactly one unique timestep (within given tolerance tol)? tol format == 'unique', unique values first calculated  machine precision, subsetted differ one  another least tol, tol time difference units days  (thus 1/(24*60*60) one second).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_get_timestep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the average timestep in days — mm_get_timestep","text":"","code":"{ datetimes <- Sys.time()+ as.difftime(c(0,304,600,900.2,1200,1500,1800), units='secs') mm_get_timestep(datetimes, 'unique', tol=1/(24*60*60)) mm_get_timestep(datetimes, 'unique', tol=5/(24*60*60)) mm_get_timestep(datetimes, 'unique', tol=10/(24*60*60)) mm_get_timestep(datetimes, 'unique', tol=300/(24*60*60)) mm_get_timestep(datetimes, 'mean') mm_get_timestep(datetimes, 'mean', require_unique=TRUE, tol=300/(24*60*60)) datetimes <- Sys.time()+ as.difftime(c(-1,0,2,4,5,6,8,10), units='days') mm_get_timestep(datetimes, 'modal') mm_get_timestep(c(), 'mean') mm_get_timestep(c(), 'unique') mm_get_timestep(c(), 'modal') if (FALSE) { # all of these should and do give errors: mm_get_timestep(datetimes, 'mean', require_unique=TRUE, tol=1/(24*60*60)) mm_get_timestep(datetimes, 'unique', tol=5/(24*60*60), require_unique=TRUE) mm_get_timestep(c(), 'mean', require_unique=TRUE) mm_get_timestep(c(), 'unique', require_unique=TRUE) mm_get_timestep(c(), 'modal', require_unique=TRUE) } }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_is_valid_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate one day of data, returning a vector of error strings if needed — mm_is_valid_day","title":"Validate one day of data, returning a vector of error strings if needed — mm_is_valid_day","text":"Provides ability skip poorly-formatted day calculating metabolism, without breaking whole loop. Rather producing errors, quietly collects problems/errors list strings calling function handle.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_is_valid_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate one day of data, returning a vector of error strings if needed — mm_is_valid_day","text":"","code":"mm_is_valid_day(   data_ply,   day_start = 4,   day_end = 27.99,   day_tests = c(\"full_day\", \"even_timesteps\", \"complete_data\", \"pos_discharge\",     \"pos_depth\"),   required_timestep = NA,   ply_date = as.Date(format(data_ply[max(1, nrow(data_ply)/2), \"solar.time\"],     \"%Y-%m-%d\")),   timestep_days = NA )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_is_valid_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate one day of data, returning a vector of error strings if needed — mm_is_valid_day","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) day_start start time (inclusive) day's data number hours  midnight begins date. example, day_start=-1.5  indicates data describing 2006-06-26 begin 2006-06-25 22:30,  first observation time occurs time day_start fall exactly observation time. day_end end time (exclusive) day's data number hours  midnight begins date. example, day_end=30 indicates  data describing 2006-06-26 end last observation time occurs  2006-06-27 06:00. day_tests list tests conduct determine whether date worth data valid modeling. full_day: data span full expected period (e.g., 10:30pm preceding day 6am following day)? even_timesteps: timesteps within day length, within tolerance 0.2% timestep length? complete_data: columns input data available every timestep? pos_discharge: discharge greater 0 every timestep? pos_depth: depth greater 0 every timestep? test implied required_timestep non-NA numeric. required_timestep NA numeric (length 1). numeric, timestep length days date must pass validity check (within tolerance 0.2% value required_timestep) ply_date Date data_ply intended match. May NA timestep_days expected timestep length fraction day; example, 1-hour timestep 1/24 0.0416667. calculated within function timestep_days NA. May supplied argument (1) pre-calculate value efficiency, (2) require specific timestep.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_is_valid_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate one day of data, returning a vector of error strings if needed — mm_is_valid_day","text":"character vector errors day invalid, TRUE valid","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_is_valid_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate one day of data, returning a vector of error strings if needed — mm_is_valid_day","text":"Assumes data already validated mm_validate_data","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_is_valid_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate one day of data, returning a vector of error strings if needed — mm_is_valid_day","text":"","code":"mm_is_valid_day(data_metab('1')) #> [1] TRUE mm_is_valid_day(data_metab('1', flaws='missing middle')) #> [1] \"uneven timesteps\" mm_is_valid_day(data_metab('1', flaws='missorted')) #> [1] \"uneven timesteps\" mm_is_valid_day(data_metab('1', flaws='duplicated')) #> [1] \"uneven timesteps\" mm_is_valid_day(data_metab('1', flaws=c('duplicated','missing end'))) #> [1] \"data don't end when expected\" \"uneven timesteps\"             mm_is_valid_day(data_metab('3')) #> [1] \"data don't start when expected\" \"data don't end when expected\""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_locate_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Look for a model file — mm_locate_filename","title":"Look for a model file — mm_locate_filename","text":"Looks first models folder streamMetabolizer package, second  along relative absolute file path given model_name","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_locate_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look for a model file — mm_locate_filename","text":"","code":"mm_locate_filename(model_name)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_locate_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look for a model file — mm_locate_filename","text":"model_name model file 'models' folder  streamMetabolizer package relative absolute file path model  file","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_locate_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Look for a model file — mm_locate_filename","text":"file path file exists error otherwise","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Split and label data into >=24-hr days for fitting daily metabolism — mm_model_by_ply","title":"Split and label data into >=24-hr days for fitting daily metabolism — mm_model_by_ply","text":"Splits two data.frames, data data_daily, date-specific chunks. passed model_fun. day_tests empty, validity checks run results also passed model_fun (validity). results model_fun (must data.frame) modified include data first column, row-bound together single data.frame containing results days.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split and label data into >=24-hr days for fitting daily metabolism — mm_model_by_ply","text":"","code":"mm_model_by_ply(   model_fun,   data,   data_daily = NULL,   day_start,   day_end,   day_tests = c(\"full_day\", \"even_timesteps\", \"complete_data\", \"pos_discharge\",     \"pos_depth\"),   required_timestep = NA,   timestep_days = TRUE,   ... )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split and label data into >=24-hr days for fitting daily metabolism — mm_model_by_ply","text":"model_fun function apply data ply. function accept arguments c(data, data_daily, ..., day_start, day_end, ply_date) data_daily NULL data_daily argument mm_model_by_ply missing NULL data required. data.frame split chunks date, 'date' begins hour day_start ends hour day_end. solar.time column must present. data_daily optional. data.frame containing inputs daily timestep, row passed corresponding date chunk data. date column must present. day_start start time (inclusive) day's data number hours midnight begins date. example, day_start=-1.5 indicates data describing 2006-06-26 begin 2006-06-25 22:30, first observation time occurs time day_start fall exactly observation time. metabolism models working single days input data, conventional/useful begin day evening , e.g., -1.5, end just next sunrise, e.g., 30. multiple consecutive days, may make sense start just sunrise (e.g., 4) end 24 hours later. nighttime regression, date assigned chunk data date whose evening contains data. default therefore 12 36 metab_night, times darkness used. day_end end time (exclusive) day's data number hours midnight begins date. example, day_end=30 indicates data describing 2006-06-26 end last observation time occurs 2006-06-27 06:00. See day_start recommended start end times. day_tests list tests conduct determine whether date worth data valid modeling. results tests combined result test implied required_timestep numeric passed model_fun ply_validity argument function. required_timestep NA numeric (length 1). numeric, timestep length days date must pass validity check (within tolerance 0.2% value required_timestep). result test combined results tests listed day_tests reported model_fun ply_validity argument function. timestep_days TRUE like mean timestep length calculated data ply passed model_fun timestep_days argument function. Alternatively, may numeric specifically expected timestep length days; example, 1-hour timestep 1/24 0.0416667. ... args passed mm_model_by_ply model_fun","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split and label data into >=24-hr days for fitting daily metabolism — mm_model_by_ply","text":"data.frame model results","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split and label data into >=24-hr days for fitting daily metabolism — mm_model_by_ply","text":"","code":"dat <- data_metab('10') mm_model_by_ply(mm_model_by_ply_prototype, data=dat, day_start=2, day_end=28)$date #>  [1] \"2012-09-18\" \"2012-09-19\" \"2012-09-20\" \"2012-09-21\" \"2012-09-22\" #>  [6] \"2012-09-23\" \"2012-09-24\" \"2012-09-25\" \"2012-09-26\" \"2012-09-27\" mm_model_by_ply(function(...) { data.frame(text='hi')},   data=dat, day_start=2, day_end=28) #>          date text #> 1  2012-09-18   hi #> 2  2012-09-19   hi #> 3  2012-09-20   hi #> 4  2012-09-21   hi #> 5  2012-09-22   hi #> 6  2012-09-23   hi #> 7  2012-09-24   hi #> 8  2012-09-25   hi #> 9  2012-09-26   hi #> 10 2012-09-27   hi"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply_prototype.html","id":null,"dir":"Reference","previous_headings":"","what":"A prototype for the model_fun argument to mm_model_by_ply — mm_model_by_ply_prototype","title":"A prototype for the model_fun argument to mm_model_by_ply — mm_model_by_ply_prototype","text":"function nothing proper form model_fun passed  mm_model_by_ply functions used model_fun may  call inheritParams use parameter definitions given .","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply_prototype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A prototype for the model_fun argument to mm_model_by_ply — mm_model_by_ply_prototype","text":"","code":"mm_model_by_ply_prototype(   data_ply = v(mm_data(NULL)),   data_daily_ply = v(mm_data(NULL)),   day_start = NA,   day_end = NA,   ply_date = NA,   ply_validity = NA,   timestep_days = NA,   ... )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply_prototype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A prototype for the model_fun argument to mm_model_by_ply — mm_model_by_ply_prototype","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) data_daily_ply NULL data.frame containing inputs daily  timestep. day_start start time (inclusive) day's data number hours  midnight begins date. example, day_start=-1.5  indicates data describing 2006-06-26 begin 2006-06-25 22:30,  first observation time occurs time day_start fall exactly observation time. day_end end time (exclusive) day's data number hours  midnight begins date. example, day_end=30 indicates  data describing 2006-06-26 end last observation time occurs  2006-06-27 06:00. ply_date modal date ply data data_daily,  date ply referred topresent. ply_validity output mm_is_valid_day applied  data_ply tests specified day_tests. tests  run function called. result TRUE ply entirely valid, character vector containing one error  messages tests failed. timestep_days numeric length mean timestep day,  requested setting timestep_days TRUE numeric value call mm_model_by_ply ... args passed untouched function calling  mm_model_by_ply, mm_model_by_ply, finally function.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_model_by_ply_prototype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A prototype for the model_fun argument to mm_model_by_ply — mm_model_by_ply_prototype","text":"","code":"mm_model_by_ply_prototype() #> # A tibble: 1 × 9 #>   data_ply_start data_ply_end data_ply_nrow data_daily_ply_date day_start #>   <lgl>          <lgl>                <dbl> <chr>               <lgl>     #> 1 NA             NA                       0 \"\"                  NA        #> # ℹ 4 more variables: day_end <lgl>, ply_date <lgl>, ply_validity <chr>, #> #   timestep_days <lgl> mm_model_by_ply_prototype(extra_arg=7:12) #> # A tibble: 1 × 10 #>   data_ply_start data_ply_end data_ply_nrow data_daily_ply_date day_start #>   <lgl>          <lgl>                <dbl> <chr>               <lgl>     #> 1 NA             NA                       0 \"\"                  NA        #> # ℹ 5 more variables: day_end <lgl>, ply_date <lgl>, ply_validity <chr>, #> #   timestep_days <lgl>, extra_arg <int>"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the name of a model by its features — mm_name","title":"Find the name of a model by its features — mm_name","text":"model_name concisely specifies structure metabolism model. model_name, appropriate set model specifications (parameters runtime options) can generated specs. complete specs list, metabolism model can run metab.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the name of a model by its features — mm_name","text":"","code":"mm_name(   type = c(\"mle\", \"bayes\", \"night\", \"Kmodel\", \"sim\"),   pool_K600 = c(\"none\", \"normal\", \"normal_sdzero\", \"normal_sdfixed\", \"linear\",     \"linear_sdzero\", \"linear_sdfixed\", \"binned\", \"binned_sdzero\", \"binned_sdfixed\",     \"complete\"),   err_obs_iid = c(TRUE, FALSE),   err_proc_acor = c(FALSE, TRUE),   err_proc_iid = c(FALSE, TRUE),   err_proc_GPP = c(FALSE, TRUE),   ode_method = c(\"trapezoid\", \"euler\", \"rk2\", \"lsoda\", \"lsode\", \"lsodes\", \"lsodar\",     \"vode\", \"daspk\", \"rk4\", \"ode23\", \"ode45\", \"radau\", \"bdf\", \"bdf_d\", \"adams\",     \"impAdams\", \"impAdams_d\", \"Euler\", \"pairmeans\", \"NA\"),   GPP_fun = c(\"linlight\", \"satlight\", \"satlightq10temp\", \"NA\"),   ER_fun = c(\"constant\", \"q10temp\", \"NA\"),   deficit_src = c(\"DO_mod\", \"DO_obs\", \"DO_obs_filter\", \"NA\"),   engine = c(\"stan\", \"nlm\", \"lm\", \"mean\", \"loess\", \"rnorm\"),   check_validity = TRUE )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the name of a model by its features — mm_name","text":"type character. model type. Options: mle: maximum likelihood estimation (see also metab_mle) bayes: bayesian hierarchical models metab_bayes night: nighttime regression (see also metab_night) Kmodel: regression daily estimates K600.daily versus discharge, time, etc., usually 3-phase estimation K alone (MLE nighttime regression), K vs discharge (using model), GPP ER fixed K (MLE) (see also metab_Kmodel) sim: simulation .obs 'data' testing models (see also metab_sim) pool_K600 character. [] model pool information among days get consistent daily estimates K600? Options (see Details ): none: pooling K600 normal: \\(K600 ~ N(mu, sigma)\\) linear: \\(K600 ~ N(B[0] + B[1]*Q, sigma)\\) binned: \\(K600 ~ N(B[Q_bin], sigma)\\) \\(mu ~ N(mu_mu, mu_sigma)\\) \\(sigma ~ N(sigma_mu, sigma_sigma)\\) complete: applicable type='Kmodel', generally used conjunction preceding estimates K (e.g., type='mle' type='night') subsequent estimates GPP ER (e.g., type='mle' daily K600 values specified) err_obs_iid logical. IID observation error included? , model fit differences successive measurements, rather measurements . err_proc_acor logical. autocorrelated process error (autocorrelation term phi fitted) included? err_proc_iid logical. IID process error included? err_proc_GPP logical. IID process error GPP included? kind error occurs day used adjust GPP passing adjusted GPP dDO/dt equation. GPP_inst variable corrected GPP, new variable, GPP_inst_partial, contains pre-adjustment GPP estimates ode_method character. method use solving ordinary differential equation . Options: euler, formerly Euler: final change t=1 t=2 solely function GPP, ER, , etc. t=1 trapezoid, formerly pairmeans: final change t=1 t=2 function mean values GPP, ER, etc. across t=1 t=2. type='mle', options also include rk2 character method accepted ode deSolve package (lsoda, lsode, lsodes, lsodar, vode, daspk, rk4, ode23, ode45, radau, bdf, bdf_d, adams, impAdams, impAdams_d; note many well tested context streamMetabolizer models) GPP_fun character. Function dictating gross primary productivity (GPP) varies within day. Options: linlight: GPP linear function light intercept 0 slope varies day. GPP(t) = GPP.daily * light(t) / mean.light GPP.daily: daily mean GPP, partitioned timestep-specific rates according fraction day's average light occurs timestep (specifically, mean.light mean first 24 hours date's data window) satlight: GPP saturating function light. GPP(t) = Pmax * tanh(alpha * light(t) / Pmax) Pmax: maximum possible GPP alpha: descriptor rate increase GPP function light satlightq10temp: GPP saturating function light exponential function temperature. GPP(t) = Pmax * tanh(alpha * light(t) / Pmax) * 1.036 ^ (temp.water(t) - 20) Pmax: maximum possible GPP alpha: descriptor rate increase GPP function light NA: applicable type='Kmodel', GPP estimated ER_fun character. Function dictating ecosystem respiration (ER) varies within day. Options: constant: ER constant every timestep day. ER(t) = ER.daily ER.daily: daily mean ER, equal instantaneous ER times q10temp: ER timestep exponential function water temperature temperature-normalized base rate. ER(t) = ER20 * 1.045 ^ (temp.water(t) - 20) ER20: value ER temp.water 20 degrees C NA: applicable type='Kmodel', ER estimated deficit_src character. estimate (observed modeled) deficit computed? Options: DO_mod: deficit time t (.sat(t) - DO_mod(t)), difference equilibrium-saturation value current best estimate true concentration time DO_obs: deficit time t (.sat(t) - .obs(t)), difference equilibrium-saturation value measured concentration time DO_obs_filter: applicable type='night': smoothing filter applied measured .obs values applying nighttime regression NA: applicable type='Kmodel', deficit estimated engine character. function software model fitting done? type='mle': nlm (default) type='bayes': stan (default), external software package runs MCMC chains Bayesian models (see http://mc-stan.org) type='night': lm (default) type='Kmodel': mean, lm, loess enable different types relationships daily K600 predictors (nothing, discharge, time, etc.) type='sim': rnorm (default) check_validity logical. TRUE, function checks resulting name mm_valid_names(type).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the name of a model by its features — mm_name","text":"Usage shows valid values argument, argument combinations valid; combination also checked check_validity==TRUE. arguments explicitly specified, defaults depend value type: argument explicitly supplied (besides type check_validity) default values indicated mm_parse_name(mm_valid_names(type)[1]).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_name.html","id":"pool-k-","dir":"Reference","previous_headings":"","what":"pool_K600","title":"Find the name of a model by its features — mm_name","text":"essential model lines (Stan language) distinguish K pooling options.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the name of a model by its features — mm_name","text":"","code":"mm_name('mle') #> [1] \"m_np_oi_tr_plrckm.nlm\" mm_name('mle', GPP_fun='satlight', ER_fun='q10temp') #> [1] \"m_np_oi_tr_psrqkm.nlm\" mm_name('night') #> [1] \"n_np_pi_eu_rckf.lm\" mm_name('sim', err_proc_acor=TRUE) #> [1] \"s_np_oipcpi_tr_plrckm.rnorm\" mm_name('bayes', pool_K600='binned') #> [1] \"b_Kb_oipi_tr_plrckm.stan\""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_parse_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a model name into its features — mm_parse_name","title":"Parse a model name into its features — mm_parse_name","text":"Returns data.frame one column per model structure detail one row  per `model_name` supplied function. See ?mm_name  description data.frame columns returned.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_parse_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a model name into its features — mm_parse_name","text":"","code":"mm_parse_name(model_name, expand = FALSE)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_parse_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a model name into its features — mm_parse_name","text":"model_name character: model name expand logical: additional columns model_name pool_K600_type added? expand=TRUE result passed directly back mm_name, additional columns may helpful  interpreting model structure.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_parse_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse a model name into its features — mm_parse_name","text":"Custom model files (MCMC) may additional characters  underscore end name prefix. example,  'b_np_pcpi_eu_ko.stan' 'b_np_pcpi_eu_ko_v2.stan' parsed ; _v2 ignored function.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_parse_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a model name into its features — mm_parse_name","text":"","code":"mm_parse_name(c(mm_name('mle'), mm_name('night'), mm_name('bayes'))) #>    type pool_K600 err_obs_iid err_proc_acor err_proc_iid err_proc_GPP #> 1   mle      none        TRUE         FALSE        FALSE        FALSE #> 2 night      none       FALSE         FALSE         TRUE        FALSE #> 3 bayes      none        TRUE         FALSE         TRUE        FALSE #>   ode_method  GPP_fun   ER_fun   deficit_src engine #> 1  trapezoid linlight constant        DO_mod    nlm #> 2      euler       NA constant DO_obs_filter     lm #> 3  trapezoid linlight constant        DO_mod   stan mm_parse_name(c(mm_name('mle'), mm_name('night'), mm_name('bayes')), expand=TRUE) #>                 model_name  type pool_K600 pool_K600_type pool_K600_sd #> 1    m_np_oi_tr_plrckm.nlm   mle      none           none        fixed #> 2       n_np_pi_eu_rckf.lm night      none           none        fixed #> 3 b_np_oipi_tr_plrckm.stan bayes      none           none        fixed #>   err_obs_iid err_proc_acor err_proc_iid err_proc_GPP ode_method  GPP_fun #> 1        TRUE         FALSE        FALSE        FALSE  trapezoid linlight #> 2       FALSE         FALSE         TRUE        FALSE      euler       NA #> 3        TRUE         FALSE         TRUE        FALSE  trapezoid linlight #>     ER_fun   deficit_src engine #> 1 constant        DO_mod    nlm #> 2 constant DO_obs_filter     lm #> 3 constant        DO_mod   stan"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_predict_DO_1ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to predict_DO.metab_model — mm_predict_DO_1ply","title":"Helper to predict_DO.metab_model — mm_predict_DO_1ply","text":"Usually assigned model_fun within mm_model_by_ply, called ","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_predict_DO_1ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to predict_DO.metab_model — mm_predict_DO_1ply","text":"","code":"mm_predict_DO_1ply(   data_ply,   data_daily_ply,   day_start,   day_end,   ply_date,   ...,   model_name )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_predict_DO_1ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to predict_DO.metab_model — mm_predict_DO_1ply","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) data_daily_ply NULL data.frame containing inputs daily  timestep. day_start start time (inclusive) day's data number hours  midnight begins date. example, day_start=-1.5  indicates data describing 2006-06-26 begin 2006-06-25 22:30,  first observation time occurs time day_start fall exactly observation time. day_end end time (exclusive) day's data number hours  midnight begins date. example, day_end=30 indicates  data describing 2006-06-26 end last observation time occurs  2006-06-27 06:00. ply_date modal date ply data data_daily,  date ply referred topresent. ... args passed untouched function calling  mm_model_by_ply, mm_model_by_ply, finally function. model_name coded model name determine GPP_fun, ER_fun, deficit_src, ode_method use prediction","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_predict_DO_1ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to predict_DO.metab_model — mm_predict_DO_1ply","text":"data.frame predictions","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_predict_metab_1ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to predict_metab.metab_model — mm_predict_metab_1ply","title":"Helper to predict_metab.metab_model — mm_predict_metab_1ply","text":"Usually assigned model_fun within mm_model_by_ply, called ","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_predict_metab_1ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to predict_metab.metab_model — mm_predict_metab_1ply","text":"","code":"mm_predict_metab_1ply(   data_ply,   data_daily_ply,   day_start,   day_end,   ply_date,   ply_validity,   ...,   model_name )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_predict_metab_1ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to predict_metab.metab_model — mm_predict_metab_1ply","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) data_daily_ply NULL data.frame containing inputs daily  timestep. day_start start time (inclusive) day's data number hours  midnight begins date. example, day_start=-1.5  indicates data describing 2006-06-26 begin 2006-06-25 22:30,  first observation time occurs time day_start fall exactly observation time. day_end end time (exclusive) day's data number hours  midnight begins date. example, day_end=30 indicates  data describing 2006-06-26 end last observation time occurs  2006-06-27 06:00. ply_date modal date ply data data_daily,  date ply referred topresent. ply_validity output mm_is_valid_day applied  data_ply tests specified day_tests. tests  run function called. result TRUE ply entirely valid, character vector containing one error  messages tests failed. ... args passed untouched function calling  mm_model_by_ply, mm_model_by_ply, finally function. model_name coded model name determine GPP_fun, ER_fun, deficit_src, ode_method use prediction","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_predict_metab_1ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to predict_metab.metab_model — mm_predict_metab_1ply","text":"data.frame predictions","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_sd_to_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SD columns into CI columns in a data.frame — mm_sd_to_ci","title":"Convert SD columns into CI columns in a data.frame — mm_sd_to_ci","text":"Convert data var var.sd columns data var, var.lower,  var.upper columns","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_sd_to_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SD columns into CI columns in a data.frame — mm_sd_to_ci","text":"","code":"mm_sd_to_ci(data, alpha = 0.05)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_sd_to_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SD columns into CI columns in a data.frame — mm_sd_to_ci","text":"data data.frame 1+ pairs columns named var var.sd  (var can anything) alpha desired significance level described confidence  interval","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_valid_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the valid names for a given model type or types — mm_valid_names","title":"Get the valid names for a given model type or types — mm_valid_names","text":"Returns vector model_names type[s] indicated.  type supplied, model types included.  returned function, model names may translated something  slightly readable mm_parse_name desired.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_valid_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the valid names for a given model type or types — mm_valid_names","text":"","code":"mm_valid_names(type = c(\"bayes\", \"mle\", \"night\", \"Kmodel\", \"sim\"))"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_valid_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the valid names for a given model type or types — mm_valid_names","text":"type character. model type. Options: mle: maximum likelihood estimation (see also metab_mle) bayes: bayesian hierarchical models metab_bayes night: nighttime regression (see also metab_night) Kmodel: regression daily estimates K600.daily versus discharge, time, etc., usually 3-phase estimation K alone (MLE nighttime regression), K vs discharge (using model), GPP ER fixed K (MLE) (see also metab_Kmodel) sim: simulation .obs 'data' testing models (see also metab_sim)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_valid_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the valid names for a given model type or types — mm_valid_names","text":"","code":"mm_valid_names('mle') #>   [1] \"m_np_oi_tr_plrckm.nlm\"  \"m_np_pi_tr_plrckm.nlm\"  \"m_np_oi_eu_plrckm.nlm\"  #>   [4] \"m_np_pi_eu_plrckm.nlm\"  \"m_np_oi_r2_plrckm.nlm\"  \"m_np_pi_r2_plrckm.nlm\"  #>   [7] \"m_np_oi_o1_plrckm.nlm\"  \"m_np_pi_o1_plrckm.nlm\"  \"m_np_oi_o2_plrckm.nlm\"  #>  [10] \"m_np_pi_o2_plrckm.nlm\"  \"m_np_oi_o3_plrckm.nlm\"  \"m_np_pi_o3_plrckm.nlm\"  #>  [13] \"m_np_oi_o4_plrckm.nlm\"  \"m_np_pi_o4_plrckm.nlm\"  \"m_np_oi_o5_plrckm.nlm\"  #>  [16] \"m_np_pi_o5_plrckm.nlm\"  \"m_np_oi_o6_plrckm.nlm\"  \"m_np_pi_o6_plrckm.nlm\"  #>  [19] \"m_np_oi_o8_plrckm.nlm\"  \"m_np_pi_o8_plrckm.nlm\"  \"m_np_oi_o9_plrckm.nlm\"  #>  [22] \"m_np_pi_o9_plrckm.nlm\"  \"m_np_oi_o10_plrckm.nlm\" \"m_np_pi_o10_plrckm.nlm\" #>  [25] \"m_np_oi_o11_plrckm.nlm\" \"m_np_pi_o11_plrckm.nlm\" \"m_np_oi_o12_plrckm.nlm\" #>  [28] \"m_np_pi_o12_plrckm.nlm\" \"m_np_oi_o13_plrckm.nlm\" \"m_np_pi_o13_plrckm.nlm\" #>  [31] \"m_np_oi_o14_plrckm.nlm\" \"m_np_pi_o14_plrckm.nlm\" \"m_np_oi_o15_plrckm.nlm\" #>  [34] \"m_np_pi_o15_plrckm.nlm\" \"m_np_oi_o16_plrckm.nlm\" \"m_np_pi_o16_plrckm.nlm\" #>  [37] \"m_np_oi_Eu_plrckm.nlm\"  \"m_np_pi_Eu_plrckm.nlm\"  \"m_np_oi_pm_plrckm.nlm\"  #>  [40] \"m_np_pi_pm_plrckm.nlm\"  \"m_np_oi_tr_psrckm.nlm\"  \"m_np_pi_tr_psrckm.nlm\"  #>  [43] \"m_np_oi_eu_psrckm.nlm\"  \"m_np_pi_eu_psrckm.nlm\"  \"m_np_oi_r2_psrckm.nlm\"  #>  [46] \"m_np_pi_r2_psrckm.nlm\"  \"m_np_oi_o1_psrckm.nlm\"  \"m_np_pi_o1_psrckm.nlm\"  #>  [49] \"m_np_oi_o2_psrckm.nlm\"  \"m_np_pi_o2_psrckm.nlm\"  \"m_np_oi_o3_psrckm.nlm\"  #>  [52] \"m_np_pi_o3_psrckm.nlm\"  \"m_np_oi_o4_psrckm.nlm\"  \"m_np_pi_o4_psrckm.nlm\"  #>  [55] \"m_np_oi_o5_psrckm.nlm\"  \"m_np_pi_o5_psrckm.nlm\"  \"m_np_oi_o6_psrckm.nlm\"  #>  [58] \"m_np_pi_o6_psrckm.nlm\"  \"m_np_oi_o8_psrckm.nlm\"  \"m_np_pi_o8_psrckm.nlm\"  #>  [61] \"m_np_oi_o9_psrckm.nlm\"  \"m_np_pi_o9_psrckm.nlm\"  \"m_np_oi_o10_psrckm.nlm\" #>  [64] \"m_np_pi_o10_psrckm.nlm\" \"m_np_oi_o11_psrckm.nlm\" \"m_np_pi_o11_psrckm.nlm\" #>  [67] \"m_np_oi_o12_psrckm.nlm\" \"m_np_pi_o12_psrckm.nlm\" \"m_np_oi_o13_psrckm.nlm\" #>  [70] \"m_np_pi_o13_psrckm.nlm\" \"m_np_oi_o14_psrckm.nlm\" \"m_np_pi_o14_psrckm.nlm\" #>  [73] \"m_np_oi_o15_psrckm.nlm\" \"m_np_pi_o15_psrckm.nlm\" \"m_np_oi_o16_psrckm.nlm\" #>  [76] \"m_np_pi_o16_psrckm.nlm\" \"m_np_oi_Eu_psrckm.nlm\"  \"m_np_pi_Eu_psrckm.nlm\"  #>  [79] \"m_np_oi_pm_psrckm.nlm\"  \"m_np_pi_pm_psrckm.nlm\"  \"m_np_oi_tr_pqrckm.nlm\"  #>  [82] \"m_np_pi_tr_pqrckm.nlm\"  \"m_np_oi_eu_pqrckm.nlm\"  \"m_np_pi_eu_pqrckm.nlm\"  #>  [85] \"m_np_oi_r2_pqrckm.nlm\"  \"m_np_pi_r2_pqrckm.nlm\"  \"m_np_oi_o1_pqrckm.nlm\"  #>  [88] \"m_np_pi_o1_pqrckm.nlm\"  \"m_np_oi_o2_pqrckm.nlm\"  \"m_np_pi_o2_pqrckm.nlm\"  #>  [91] \"m_np_oi_o3_pqrckm.nlm\"  \"m_np_pi_o3_pqrckm.nlm\"  \"m_np_oi_o4_pqrckm.nlm\"  #>  [94] \"m_np_pi_o4_pqrckm.nlm\"  \"m_np_oi_o5_pqrckm.nlm\"  \"m_np_pi_o5_pqrckm.nlm\"  #>  [97] \"m_np_oi_o6_pqrckm.nlm\"  \"m_np_pi_o6_pqrckm.nlm\"  \"m_np_oi_o8_pqrckm.nlm\"  #> [100] \"m_np_pi_o8_pqrckm.nlm\"  \"m_np_oi_o9_pqrckm.nlm\"  \"m_np_pi_o9_pqrckm.nlm\"  #> [103] \"m_np_oi_o10_pqrckm.nlm\" \"m_np_pi_o10_pqrckm.nlm\" \"m_np_oi_o11_pqrckm.nlm\" #> [106] \"m_np_pi_o11_pqrckm.nlm\" \"m_np_oi_o12_pqrckm.nlm\" \"m_np_pi_o12_pqrckm.nlm\" #> [109] \"m_np_oi_o13_pqrckm.nlm\" \"m_np_pi_o13_pqrckm.nlm\" \"m_np_oi_o14_pqrckm.nlm\" #> [112] \"m_np_pi_o14_pqrckm.nlm\" \"m_np_oi_o15_pqrckm.nlm\" \"m_np_pi_o15_pqrckm.nlm\" #> [115] \"m_np_oi_o16_pqrckm.nlm\" \"m_np_pi_o16_pqrckm.nlm\" \"m_np_oi_Eu_pqrckm.nlm\"  #> [118] \"m_np_pi_Eu_pqrckm.nlm\"  \"m_np_oi_pm_pqrckm.nlm\"  \"m_np_pi_pm_pqrckm.nlm\"  #> [121] \"m_np_oi_tr_plrqkm.nlm\"  \"m_np_pi_tr_plrqkm.nlm\"  \"m_np_oi_eu_plrqkm.nlm\"  #> [124] \"m_np_pi_eu_plrqkm.nlm\"  \"m_np_oi_r2_plrqkm.nlm\"  \"m_np_pi_r2_plrqkm.nlm\"  #> [127] \"m_np_oi_o1_plrqkm.nlm\"  \"m_np_pi_o1_plrqkm.nlm\"  \"m_np_oi_o2_plrqkm.nlm\"  #> [130] \"m_np_pi_o2_plrqkm.nlm\"  \"m_np_oi_o3_plrqkm.nlm\"  \"m_np_pi_o3_plrqkm.nlm\"  #> [133] \"m_np_oi_o4_plrqkm.nlm\"  \"m_np_pi_o4_plrqkm.nlm\"  \"m_np_oi_o5_plrqkm.nlm\"  #> [136] \"m_np_pi_o5_plrqkm.nlm\"  \"m_np_oi_o6_plrqkm.nlm\"  \"m_np_pi_o6_plrqkm.nlm\"  #> [139] \"m_np_oi_o8_plrqkm.nlm\"  \"m_np_pi_o8_plrqkm.nlm\"  \"m_np_oi_o9_plrqkm.nlm\"  #> [142] \"m_np_pi_o9_plrqkm.nlm\"  \"m_np_oi_o10_plrqkm.nlm\" \"m_np_pi_o10_plrqkm.nlm\" #> [145] \"m_np_oi_o11_plrqkm.nlm\" \"m_np_pi_o11_plrqkm.nlm\" \"m_np_oi_o12_plrqkm.nlm\" #> [148] \"m_np_pi_o12_plrqkm.nlm\" \"m_np_oi_o13_plrqkm.nlm\" \"m_np_pi_o13_plrqkm.nlm\" #> [151] \"m_np_oi_o14_plrqkm.nlm\" \"m_np_pi_o14_plrqkm.nlm\" \"m_np_oi_o15_plrqkm.nlm\" #> [154] \"m_np_pi_o15_plrqkm.nlm\" \"m_np_oi_o16_plrqkm.nlm\" \"m_np_pi_o16_plrqkm.nlm\" #> [157] \"m_np_oi_Eu_plrqkm.nlm\"  \"m_np_pi_Eu_plrqkm.nlm\"  \"m_np_oi_pm_plrqkm.nlm\"  #> [160] \"m_np_pi_pm_plrqkm.nlm\"  \"m_np_oi_tr_psrqkm.nlm\"  \"m_np_pi_tr_psrqkm.nlm\"  #> [163] \"m_np_oi_eu_psrqkm.nlm\"  \"m_np_pi_eu_psrqkm.nlm\"  \"m_np_oi_r2_psrqkm.nlm\"  #> [166] \"m_np_pi_r2_psrqkm.nlm\"  \"m_np_oi_o1_psrqkm.nlm\"  \"m_np_pi_o1_psrqkm.nlm\"  #> [169] \"m_np_oi_o2_psrqkm.nlm\"  \"m_np_pi_o2_psrqkm.nlm\"  \"m_np_oi_o3_psrqkm.nlm\"  #> [172] \"m_np_pi_o3_psrqkm.nlm\"  \"m_np_oi_o4_psrqkm.nlm\"  \"m_np_pi_o4_psrqkm.nlm\"  #> [175] \"m_np_oi_o5_psrqkm.nlm\"  \"m_np_pi_o5_psrqkm.nlm\"  \"m_np_oi_o6_psrqkm.nlm\"  #> [178] \"m_np_pi_o6_psrqkm.nlm\"  \"m_np_oi_o8_psrqkm.nlm\"  \"m_np_pi_o8_psrqkm.nlm\"  #> [181] \"m_np_oi_o9_psrqkm.nlm\"  \"m_np_pi_o9_psrqkm.nlm\"  \"m_np_oi_o10_psrqkm.nlm\" #> [184] \"m_np_pi_o10_psrqkm.nlm\" \"m_np_oi_o11_psrqkm.nlm\" \"m_np_pi_o11_psrqkm.nlm\" #> [187] \"m_np_oi_o12_psrqkm.nlm\" \"m_np_pi_o12_psrqkm.nlm\" \"m_np_oi_o13_psrqkm.nlm\" #> [190] \"m_np_pi_o13_psrqkm.nlm\" \"m_np_oi_o14_psrqkm.nlm\" \"m_np_pi_o14_psrqkm.nlm\" #> [193] \"m_np_oi_o15_psrqkm.nlm\" \"m_np_pi_o15_psrqkm.nlm\" \"m_np_oi_o16_psrqkm.nlm\" #> [196] \"m_np_pi_o16_psrqkm.nlm\" \"m_np_oi_Eu_psrqkm.nlm\"  \"m_np_pi_Eu_psrqkm.nlm\"  #> [199] \"m_np_oi_pm_psrqkm.nlm\"  \"m_np_pi_pm_psrqkm.nlm\"  \"m_np_oi_tr_pqrqkm.nlm\"  #> [202] \"m_np_pi_tr_pqrqkm.nlm\"  \"m_np_oi_eu_pqrqkm.nlm\"  \"m_np_pi_eu_pqrqkm.nlm\"  #> [205] \"m_np_oi_r2_pqrqkm.nlm\"  \"m_np_pi_r2_pqrqkm.nlm\"  \"m_np_oi_o1_pqrqkm.nlm\"  #> [208] \"m_np_pi_o1_pqrqkm.nlm\"  \"m_np_oi_o2_pqrqkm.nlm\"  \"m_np_pi_o2_pqrqkm.nlm\"  #> [211] \"m_np_oi_o3_pqrqkm.nlm\"  \"m_np_pi_o3_pqrqkm.nlm\"  \"m_np_oi_o4_pqrqkm.nlm\"  #> [214] \"m_np_pi_o4_pqrqkm.nlm\"  \"m_np_oi_o5_pqrqkm.nlm\"  \"m_np_pi_o5_pqrqkm.nlm\"  #> [217] \"m_np_oi_o6_pqrqkm.nlm\"  \"m_np_pi_o6_pqrqkm.nlm\"  \"m_np_oi_o8_pqrqkm.nlm\"  #> [220] \"m_np_pi_o8_pqrqkm.nlm\"  \"m_np_oi_o9_pqrqkm.nlm\"  \"m_np_pi_o9_pqrqkm.nlm\"  #> [223] \"m_np_oi_o10_pqrqkm.nlm\" \"m_np_pi_o10_pqrqkm.nlm\" \"m_np_oi_o11_pqrqkm.nlm\" #> [226] \"m_np_pi_o11_pqrqkm.nlm\" \"m_np_oi_o12_pqrqkm.nlm\" \"m_np_pi_o12_pqrqkm.nlm\" #> [229] \"m_np_oi_o13_pqrqkm.nlm\" \"m_np_pi_o13_pqrqkm.nlm\" \"m_np_oi_o14_pqrqkm.nlm\" #> [232] \"m_np_pi_o14_pqrqkm.nlm\" \"m_np_oi_o15_pqrqkm.nlm\" \"m_np_pi_o15_pqrqkm.nlm\" #> [235] \"m_np_oi_o16_pqrqkm.nlm\" \"m_np_pi_o16_pqrqkm.nlm\" \"m_np_oi_Eu_pqrqkm.nlm\"  #> [238] \"m_np_pi_Eu_pqrqkm.nlm\"  \"m_np_oi_pm_pqrqkm.nlm\"  \"m_np_pi_pm_pqrqkm.nlm\"  #> [241] \"m_np_oi_tr_plrcko.nlm\"  \"m_np_pi_tr_plrcko.nlm\"  \"m_np_oi_eu_plrcko.nlm\"  #> [244] \"m_np_pi_eu_plrcko.nlm\"  \"m_np_oi_r2_plrcko.nlm\"  \"m_np_pi_r2_plrcko.nlm\"  #> [247] \"m_np_oi_o1_plrcko.nlm\"  \"m_np_pi_o1_plrcko.nlm\"  \"m_np_oi_o2_plrcko.nlm\"  #> [250] \"m_np_pi_o2_plrcko.nlm\"  \"m_np_oi_o3_plrcko.nlm\"  \"m_np_pi_o3_plrcko.nlm\"  #> [253] \"m_np_oi_o4_plrcko.nlm\"  \"m_np_pi_o4_plrcko.nlm\"  \"m_np_oi_o5_plrcko.nlm\"  #> [256] \"m_np_pi_o5_plrcko.nlm\"  \"m_np_oi_o6_plrcko.nlm\"  \"m_np_pi_o6_plrcko.nlm\"  #> [259] \"m_np_oi_o8_plrcko.nlm\"  \"m_np_pi_o8_plrcko.nlm\"  \"m_np_oi_o9_plrcko.nlm\"  #> [262] \"m_np_pi_o9_plrcko.nlm\"  \"m_np_oi_o10_plrcko.nlm\" \"m_np_pi_o10_plrcko.nlm\" #> [265] \"m_np_oi_o11_plrcko.nlm\" \"m_np_pi_o11_plrcko.nlm\" \"m_np_oi_o12_plrcko.nlm\" #> [268] \"m_np_pi_o12_plrcko.nlm\" \"m_np_oi_o13_plrcko.nlm\" \"m_np_pi_o13_plrcko.nlm\" #> [271] \"m_np_oi_o14_plrcko.nlm\" \"m_np_pi_o14_plrcko.nlm\" \"m_np_oi_o15_plrcko.nlm\" #> [274] \"m_np_pi_o15_plrcko.nlm\" \"m_np_oi_o16_plrcko.nlm\" \"m_np_pi_o16_plrcko.nlm\" #> [277] \"m_np_oi_Eu_plrcko.nlm\"  \"m_np_pi_Eu_plrcko.nlm\"  \"m_np_oi_pm_plrcko.nlm\"  #> [280] \"m_np_pi_pm_plrcko.nlm\"  \"m_np_oi_tr_psrcko.nlm\"  \"m_np_pi_tr_psrcko.nlm\"  #> [283] \"m_np_oi_eu_psrcko.nlm\"  \"m_np_pi_eu_psrcko.nlm\"  \"m_np_oi_r2_psrcko.nlm\"  #> [286] \"m_np_pi_r2_psrcko.nlm\"  \"m_np_oi_o1_psrcko.nlm\"  \"m_np_pi_o1_psrcko.nlm\"  #> [289] \"m_np_oi_o2_psrcko.nlm\"  \"m_np_pi_o2_psrcko.nlm\"  \"m_np_oi_o3_psrcko.nlm\"  #> [292] \"m_np_pi_o3_psrcko.nlm\"  \"m_np_oi_o4_psrcko.nlm\"  \"m_np_pi_o4_psrcko.nlm\"  #> [295] \"m_np_oi_o5_psrcko.nlm\"  \"m_np_pi_o5_psrcko.nlm\"  \"m_np_oi_o6_psrcko.nlm\"  #> [298] \"m_np_pi_o6_psrcko.nlm\"  \"m_np_oi_o8_psrcko.nlm\"  \"m_np_pi_o8_psrcko.nlm\"  #> [301] \"m_np_oi_o9_psrcko.nlm\"  \"m_np_pi_o9_psrcko.nlm\"  \"m_np_oi_o10_psrcko.nlm\" #> [304] \"m_np_pi_o10_psrcko.nlm\" \"m_np_oi_o11_psrcko.nlm\" \"m_np_pi_o11_psrcko.nlm\" #> [307] \"m_np_oi_o12_psrcko.nlm\" \"m_np_pi_o12_psrcko.nlm\" \"m_np_oi_o13_psrcko.nlm\" #> [310] \"m_np_pi_o13_psrcko.nlm\" \"m_np_oi_o14_psrcko.nlm\" \"m_np_pi_o14_psrcko.nlm\" #> [313] \"m_np_oi_o15_psrcko.nlm\" \"m_np_pi_o15_psrcko.nlm\" \"m_np_oi_o16_psrcko.nlm\" #> [316] \"m_np_pi_o16_psrcko.nlm\" \"m_np_oi_Eu_psrcko.nlm\"  \"m_np_pi_Eu_psrcko.nlm\"  #> [319] \"m_np_oi_pm_psrcko.nlm\"  \"m_np_pi_pm_psrcko.nlm\"  \"m_np_oi_tr_pqrcko.nlm\"  #> [322] \"m_np_pi_tr_pqrcko.nlm\"  \"m_np_oi_eu_pqrcko.nlm\"  \"m_np_pi_eu_pqrcko.nlm\"  #> [325] \"m_np_oi_r2_pqrcko.nlm\"  \"m_np_pi_r2_pqrcko.nlm\"  \"m_np_oi_o1_pqrcko.nlm\"  #> [328] \"m_np_pi_o1_pqrcko.nlm\"  \"m_np_oi_o2_pqrcko.nlm\"  \"m_np_pi_o2_pqrcko.nlm\"  #> [331] \"m_np_oi_o3_pqrcko.nlm\"  \"m_np_pi_o3_pqrcko.nlm\"  \"m_np_oi_o4_pqrcko.nlm\"  #> [334] \"m_np_pi_o4_pqrcko.nlm\"  \"m_np_oi_o5_pqrcko.nlm\"  \"m_np_pi_o5_pqrcko.nlm\"  #> [337] \"m_np_oi_o6_pqrcko.nlm\"  \"m_np_pi_o6_pqrcko.nlm\"  \"m_np_oi_o8_pqrcko.nlm\"  #> [340] \"m_np_pi_o8_pqrcko.nlm\"  \"m_np_oi_o9_pqrcko.nlm\"  \"m_np_pi_o9_pqrcko.nlm\"  #> [343] \"m_np_oi_o10_pqrcko.nlm\" \"m_np_pi_o10_pqrcko.nlm\" \"m_np_oi_o11_pqrcko.nlm\" #> [346] \"m_np_pi_o11_pqrcko.nlm\" \"m_np_oi_o12_pqrcko.nlm\" \"m_np_pi_o12_pqrcko.nlm\" #> [349] \"m_np_oi_o13_pqrcko.nlm\" \"m_np_pi_o13_pqrcko.nlm\" \"m_np_oi_o14_pqrcko.nlm\" #> [352] \"m_np_pi_o14_pqrcko.nlm\" \"m_np_oi_o15_pqrcko.nlm\" \"m_np_pi_o15_pqrcko.nlm\" #> [355] \"m_np_oi_o16_pqrcko.nlm\" \"m_np_pi_o16_pqrcko.nlm\" \"m_np_oi_Eu_pqrcko.nlm\"  #> [358] \"m_np_pi_Eu_pqrcko.nlm\"  \"m_np_oi_pm_pqrcko.nlm\"  \"m_np_pi_pm_pqrcko.nlm\"  #> [361] \"m_np_oi_tr_plrqko.nlm\"  \"m_np_pi_tr_plrqko.nlm\"  \"m_np_oi_eu_plrqko.nlm\"  #> [364] \"m_np_pi_eu_plrqko.nlm\"  \"m_np_oi_r2_plrqko.nlm\"  \"m_np_pi_r2_plrqko.nlm\"  #> [367] \"m_np_oi_o1_plrqko.nlm\"  \"m_np_pi_o1_plrqko.nlm\"  \"m_np_oi_o2_plrqko.nlm\"  #> [370] \"m_np_pi_o2_plrqko.nlm\"  \"m_np_oi_o3_plrqko.nlm\"  \"m_np_pi_o3_plrqko.nlm\"  #> [373] \"m_np_oi_o4_plrqko.nlm\"  \"m_np_pi_o4_plrqko.nlm\"  \"m_np_oi_o5_plrqko.nlm\"  #> [376] \"m_np_pi_o5_plrqko.nlm\"  \"m_np_oi_o6_plrqko.nlm\"  \"m_np_pi_o6_plrqko.nlm\"  #> [379] \"m_np_oi_o8_plrqko.nlm\"  \"m_np_pi_o8_plrqko.nlm\"  \"m_np_oi_o9_plrqko.nlm\"  #> [382] \"m_np_pi_o9_plrqko.nlm\"  \"m_np_oi_o10_plrqko.nlm\" \"m_np_pi_o10_plrqko.nlm\" #> [385] \"m_np_oi_o11_plrqko.nlm\" \"m_np_pi_o11_plrqko.nlm\" \"m_np_oi_o12_plrqko.nlm\" #> [388] \"m_np_pi_o12_plrqko.nlm\" \"m_np_oi_o13_plrqko.nlm\" \"m_np_pi_o13_plrqko.nlm\" #> [391] \"m_np_oi_o14_plrqko.nlm\" \"m_np_pi_o14_plrqko.nlm\" \"m_np_oi_o15_plrqko.nlm\" #> [394] \"m_np_pi_o15_plrqko.nlm\" \"m_np_oi_o16_plrqko.nlm\" \"m_np_pi_o16_plrqko.nlm\" #> [397] \"m_np_oi_Eu_plrqko.nlm\"  \"m_np_pi_Eu_plrqko.nlm\"  \"m_np_oi_pm_plrqko.nlm\"  #> [400] \"m_np_pi_pm_plrqko.nlm\"  \"m_np_oi_tr_psrqko.nlm\"  \"m_np_pi_tr_psrqko.nlm\"  #> [403] \"m_np_oi_eu_psrqko.nlm\"  \"m_np_pi_eu_psrqko.nlm\"  \"m_np_oi_r2_psrqko.nlm\"  #> [406] \"m_np_pi_r2_psrqko.nlm\"  \"m_np_oi_o1_psrqko.nlm\"  \"m_np_pi_o1_psrqko.nlm\"  #> [409] \"m_np_oi_o2_psrqko.nlm\"  \"m_np_pi_o2_psrqko.nlm\"  \"m_np_oi_o3_psrqko.nlm\"  #> [412] \"m_np_pi_o3_psrqko.nlm\"  \"m_np_oi_o4_psrqko.nlm\"  \"m_np_pi_o4_psrqko.nlm\"  #> [415] \"m_np_oi_o5_psrqko.nlm\"  \"m_np_pi_o5_psrqko.nlm\"  \"m_np_oi_o6_psrqko.nlm\"  #> [418] \"m_np_pi_o6_psrqko.nlm\"  \"m_np_oi_o8_psrqko.nlm\"  \"m_np_pi_o8_psrqko.nlm\"  #> [421] \"m_np_oi_o9_psrqko.nlm\"  \"m_np_pi_o9_psrqko.nlm\"  \"m_np_oi_o10_psrqko.nlm\" #> [424] \"m_np_pi_o10_psrqko.nlm\" \"m_np_oi_o11_psrqko.nlm\" \"m_np_pi_o11_psrqko.nlm\" #> [427] \"m_np_oi_o12_psrqko.nlm\" \"m_np_pi_o12_psrqko.nlm\" \"m_np_oi_o13_psrqko.nlm\" #> [430] \"m_np_pi_o13_psrqko.nlm\" \"m_np_oi_o14_psrqko.nlm\" \"m_np_pi_o14_psrqko.nlm\" #> [433] \"m_np_oi_o15_psrqko.nlm\" \"m_np_pi_o15_psrqko.nlm\" \"m_np_oi_o16_psrqko.nlm\" #> [436] \"m_np_pi_o16_psrqko.nlm\" \"m_np_oi_Eu_psrqko.nlm\"  \"m_np_pi_Eu_psrqko.nlm\"  #> [439] \"m_np_oi_pm_psrqko.nlm\"  \"m_np_pi_pm_psrqko.nlm\"  \"m_np_oi_tr_pqrqko.nlm\"  #> [442] \"m_np_pi_tr_pqrqko.nlm\"  \"m_np_oi_eu_pqrqko.nlm\"  \"m_np_pi_eu_pqrqko.nlm\"  #> [445] \"m_np_oi_r2_pqrqko.nlm\"  \"m_np_pi_r2_pqrqko.nlm\"  \"m_np_oi_o1_pqrqko.nlm\"  #> [448] \"m_np_pi_o1_pqrqko.nlm\"  \"m_np_oi_o2_pqrqko.nlm\"  \"m_np_pi_o2_pqrqko.nlm\"  #> [451] \"m_np_oi_o3_pqrqko.nlm\"  \"m_np_pi_o3_pqrqko.nlm\"  \"m_np_oi_o4_pqrqko.nlm\"  #> [454] \"m_np_pi_o4_pqrqko.nlm\"  \"m_np_oi_o5_pqrqko.nlm\"  \"m_np_pi_o5_pqrqko.nlm\"  #> [457] \"m_np_oi_o6_pqrqko.nlm\"  \"m_np_pi_o6_pqrqko.nlm\"  \"m_np_oi_o8_pqrqko.nlm\"  #> [460] \"m_np_pi_o8_pqrqko.nlm\"  \"m_np_oi_o9_pqrqko.nlm\"  \"m_np_pi_o9_pqrqko.nlm\"  #> [463] \"m_np_oi_o10_pqrqko.nlm\" \"m_np_pi_o10_pqrqko.nlm\" \"m_np_oi_o11_pqrqko.nlm\" #> [466] \"m_np_pi_o11_pqrqko.nlm\" \"m_np_oi_o12_pqrqko.nlm\" \"m_np_pi_o12_pqrqko.nlm\" #> [469] \"m_np_oi_o13_pqrqko.nlm\" \"m_np_pi_o13_pqrqko.nlm\" \"m_np_oi_o14_pqrqko.nlm\" #> [472] \"m_np_pi_o14_pqrqko.nlm\" \"m_np_oi_o15_pqrqko.nlm\" \"m_np_pi_o15_pqrqko.nlm\" #> [475] \"m_np_oi_o16_pqrqko.nlm\" \"m_np_pi_o16_pqrqko.nlm\" \"m_np_oi_Eu_pqrqko.nlm\"  #> [478] \"m_np_pi_Eu_pqrqko.nlm\"  \"m_np_oi_pm_pqrqko.nlm\"  \"m_np_pi_pm_pqrqko.nlm\""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_validate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate whether the data argument is properly formatted. — mm_validate_data","title":"Evaluate whether the data argument is properly formatted. — mm_validate_data","text":"often called within metab_model constructor.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_validate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate whether the data argument is properly formatted. — mm_validate_data","text":"","code":"mm_validate_data(   data = mm_data(NULL),   data_daily = mm_data(NULL),   metab_class,   data_tests = c(\"missing_cols\", \"extra_cols\", \"na_times\", \"units\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_validate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate whether the data argument is properly formatted. — mm_validate_data","text":"data data.frame (tbl_df) input data temporal resolution raw observations (unit-value). Columns must names, units, format default. solar.time column must also timezone code ('tzone' attribute) 'UTC'. See 'Formatting data' section full description. data_daily data.frame containing inputs daily timestep. See 'Formatting data_daily' section full  description. metab_class character class name metab_model constructor data_tests list tests conduct determine whether input data.frames properly formatted allow modeling begin","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_validate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate whether the data argument is properly formatted. — mm_validate_data","text":"","code":"if (FALSE) { mm_validate_data(dplyr::select(mm_data(),-temp.water), metab_class=\"metab_mle\") }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_validate_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the validity of a model name — mm_validate_name","title":"Check the validity of a model name — mm_validate_name","text":"Check syntactic & scientific validity model name. Returns model name valid, otherwise gives error","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_validate_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the validity of a model name — mm_validate_name","text":"","code":"mm_validate_name(model_name)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_validate_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the validity of a model name — mm_validate_name","text":"model_name character string identifying model features. Use mm_name create valid name based desired attributes, mm_valid_names see valid names. Two alternatives names given mm_valid_names() also accepted: (1) model type accepted type argument mm_name, used create default model name model type, (2) full model file path custom Bayesian models, long basename(model_name) can still parsed correctly mm_parse_name() file exists. case file may specified either file path relative streamMetabolizer models directory (first assumption; directory can found system.file(\"models\", package=\"streamMetabolizer\")) absolute path path relative current working directory (second assumption, first assumption turns files given name).","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/mm_validate_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the validity of a model name — mm_validate_name","text":"","code":"mm_validate_name(\"b_np_oipi_tr_plrckm.stan\") #> [1] \"b_np_oipi_tr_plrckm.stan\" if (FALSE) { mm_validate_name(\"b_np_oipn\") # throws error }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/nightreg_1ply.html","id":null,"dir":"Reference","previous_headings":"","what":"Make daily reaeration estimates from input parameters — nightreg_1ply","title":"Make daily reaeration estimates from input parameters — nightreg_1ply","text":"Called metab_night().","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/nightreg_1ply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make daily reaeration estimates from input parameters — nightreg_1ply","text":"","code":"nightreg_1ply(   data_ply,   data_daily_ply,   day_start,   day_end,   ply_date,   ...,   night_tests = TRUE,   specs = specs(mm_name(\"night\")) )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/nightreg_1ply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make daily reaeration estimates from input parameters — nightreg_1ply","text":"data_ply data.frame containing relevant, validated modeling data single ply data. (1 ply ~= 1 date, although day length  specified day_start day_end may exactly 24 hours) data_daily_ply NULL data.frame containing inputs daily  timestep. day_start start time (inclusive) day's data number hours  midnight begins date. example, day_start=-1.5  indicates data describing 2006-06-26 begin 2006-06-25 22:30,  first observation time occurs time day_start fall exactly observation time. day_end end time (exclusive) day's data number hours  midnight begins date. example, day_end=30 indicates  data describing 2006-06-26 end last observation time occurs  2006-06-27 06:00. ply_date modal date ply data data_daily,  date ply referred topresent. ... args passed untouched function calling  mm_model_by_ply, mm_model_by_ply, finally function. night_tests character vector validity tests conduct data subsetting just nighttime specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/nightreg_1ply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make daily reaeration estimates from input parameters — nightreg_1ply","text":"data.frame estimates lm model diagnostics","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/nightreg_1ply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make daily reaeration estimates from input parameters — nightreg_1ply","text":"Hornberger, George M., Mahlon G. Kelly. Atmospheric   Reaeration River Using Productivity Analysis. Journal   Environmental Engineering Division 101, . 5 (October 1975): 729-39. Raymond, Peter ., Christopher J. Zappa, David Butman, Thomas L. Bott, Jody   Potter, Patrick Mulholland, Andrew E. Laursen, William H. McDowell,   Denis Newbold. Scaling gas transfer velocity hydraulic geometry   streams small rivers. Limnology & Oceanography: Fluids & Environments 2   (2012); 41:53.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_DO_preds.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predictions produced with predict_DO — plot_DO_preds","title":"Plot predictions produced with predict_DO — plot_DO_preds","text":"Plots modeled values lines, observed values points","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_DO_preds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predictions produced with predict_DO — plot_DO_preds","text":"","code":"plot_DO_preds(   DO_preds,   y_var = c(\"conc\", \"pctsat\", \"ddodt\"),   style = c(\"ggplot2\", \"dygraphs\"),   y_lim = list(conc = c(NA, NA), pctsat = c(NA, NA), ddodt = c(NA, NA)),   date_start = NA,   date_end = NA,   use_saved = TRUE )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_DO_preds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predictions produced with predict_DO — plot_DO_preds","text":"DO_preds data.frame predictions returned  predict_DO() y_var character. plot display predicted & observed values  concentration (conc) percent saturation (pctsat)? default  plot . style character indicating graphics package use y_lim list named vectors, length 2 numeric name possible values y_var. NA within vector indicates data range used. ggplot2, y_lim used exclude values outside range ignored data span narrower range date_start Date class convertible .Date. first date (inclusive) report predictions. NA, filtering done. date_end Date class convertible .Date. last date (inclusive) report predictions. NA, filtering done. use_saved logical. OK use predictions saved model?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_DO_preds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot predictions produced with predict_DO — plot_DO_preds","text":"","code":"if (FALSE) { mm <- metab_night(specs(mm_name('night')), data=data_metab('3', day_start=12, day_end=36)) plot_DO_preds(mm) plot_DO_preds(mm, date_start='2012-09-19', date_end='2012-09-19') plot_DO_preds(mm, style='dygraphs', y_var='pctsat') }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_distribs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the prior/posterior distributions of a parameter — plot_distribs","title":"Plot the prior/posterior distributions of a parameter — plot_distribs","text":"Plot prior /posterior disitrubtions implied hyperparameters specs list /","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_distribs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the prior/posterior distributions of a parameter — plot_distribs","text":"","code":"plot_distribs(   dist_data,   parname = c(\"GPP_daily\", \"alpha\", \"Pmax\", \"ER_daily\", \"K600_daily\",     \"K600_daily_meanlog\", \"lnK600_lnQ_intercept\", \"lnK600_lnQ_slope\", \"K600_lnQ_nodes\",     \"K600_daily_sdlog\", \"K600_daily_sigma\", \"err_obs_iid_sigma\", \"err_proc_acor_phi\",     \"err_proc_acor_sigma\", \"err_proc_iid_sigma\", \"err_mult_GPP_sdlog\"),   index = TRUE,   style = c(\"dygraphs\", \"ggplot2\") )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_distribs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the prior/posterior distributions of a parameter — plot_distribs","text":"dist_data Either specs list (priors ) metab_model object (priors posteriors). parname character. name parameter whose distribution[s] wish plot index integer logical. Applicable plotting posteriors, useful parname parameter multiple (e.g., daily) instances. case, index selects instance corresponds row number data.frame element get_fit(metab_model) contains parameter, e.g. get_fit(metab_model)$daily 'GPP_daily'. default, TRUE, selects pools instances parameter. style character indicating graphics package use","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_distribs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the prior/posterior distributions of a parameter — plot_distribs","text":"","code":"if (FALSE) { # priors only plot_distribs(specs('bayes', K600_daily_mu=30), 'K600_daily')  # posteriors, too mm <- metab(specs(mm_name('bayes')), data=data_metab('1', res='30')) plot_distribs(mm, 'GPP_daily', 1)  # with modifications plot_distribs(mm, 'err_proc_iid_sigma') %>%   dygraphs::dyRangeSelector(dateWindow=c(-0.1,1.3)) %>%   dygraphs::dyAxis(name='y', valueRange=c(0,15)) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_metab_preds.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predictions produced with predict_DO — plot_metab_preds","title":"Plot predictions produced with predict_DO — plot_metab_preds","text":"Plots modeled values lines, observed values points","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_metab_preds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predictions produced with predict_DO — plot_metab_preds","text":"","code":"plot_metab_preds(   metab_preds,   y_var = c(\"GPP\", \"ER\"),   style = c(\"ggplot2\"),   y_lim = list(GPP = c(NA, NA), ER = c(NA, NA)) )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_metab_preds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predictions produced with predict_DO — plot_metab_preds","text":"metab_preds data.frame predictions returned  predict_metab() y_var character. plot display predicted values GPP /ER? default plot . style character indicating graphics package use y_lim list named vectors, length 2 numeric name possible values y_var. NA within vector  indicates data range used. ggplot2, y_lim  used exclude values outside range ignored data span narrower range","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/plot_metab_preds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot predictions produced with predict_DO — plot_metab_preds","text":"","code":"if (FALSE) { mm <- metab_night(specs(mm_name('night')), data=data_metab('10', day_start=12, day_end=36)) plot_metab_preds(mm) }"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_DO.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict DO from a fitted model. — predict_DO","title":"Predict DO from a fitted model. — predict_DO","text":"function metab_model_interface. Returns predictions dissolved oxygen.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_DO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict DO from a fitted model. — predict_DO","text":"","code":"predict_DO(   metab_model,   date_start = NA,   date_end = NA,   ...,   attach.units = deprecated(),   use_saved = TRUE )  # S3 method for metab_Kmodel predict_DO(metab_model, date_start = NA, date_end = NA, ..., use_saved = TRUE)  # S3 method for metab_model predict_DO(   metab_model,   date_start = NA,   date_end = NA,   ...,   attach.units = deprecated(),   use_saved = TRUE )  # S3 method for metab_night predict_DO(metab_model, date_start = NA, date_end = NA, ..., use_saved = TRUE)  # S3 method for metab_sim predict_DO(metab_model, date_start = NA, date_end = NA, ...)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_DO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict DO from a fitted model. — predict_DO","text":"metab_model metabolism model, implementing metab_model_interface, use predicting metabolism date_start Date class convertible .Date. first date (inclusive) report predictions. NA, filtering done. date_end Date class convertible .Date. last date (inclusive) report predictions. NA, filtering done. ... arguments passed class-specific implementations predict_DO attach.units (deprecated, effectively FALSE future) logical. units attached output? use_saved logical. OK use predictions saved model?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_DO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict DO from a fitted model. — predict_DO","text":"data.frame dissolved oxygen predictions temporal   resolution input data","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_DO.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Predict DO from a fitted model. — predict_DO","text":"metab_Kmodel: Throws error models type 'Kmodel' predict . metab_Kmodel predicts K daily timesteps usually knows nothing GPP ER. possible predict model. Try passing output metab_mle predicting . metab_model: implementation shared many model types metab_night: Generate nighttime dissolved oxygen predictions nighttime regression model. metab_night fits ER K, darkness hours, predictions generated hours. metab_sim: Simulate values .obs (process observation error), .mod (process error ), .pure (error). errors randomly generated every new call predict_DO.","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_DO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict DO from a fitted model. — predict_DO","text":"","code":"dat <- data_metab('3', day_start=12, day_end=36) mm <- metab_night(specs(mm_name('night')), data=dat) preds <- predict_DO(mm, date_start=get_fit(mm)$date[3]) head(preds) #>         date          solar.time DO.obs   DO.sat depth temp.water light #> 1 2012-09-20 2012-09-20 17:55:58   8.07 7.769228  0.16       9.76     0 #> 2 2012-09-20 2012-09-20 18:00:58   8.06 7.782325  0.16       9.69     0 #> 3 2012-09-20 2012-09-20 18:05:58   8.00 7.797340  0.16       9.61     0 #> 4 2012-09-20 2012-09-20 18:10:58   7.94 7.810518  0.16       9.54     0 #> 5 2012-09-20 2012-09-20 18:15:58   7.91 7.825624  0.16       9.46     0 #> 6 2012-09-20 2012-09-20 18:20:58   7.87 7.840781  0.16       9.38     0 #>     DO.mod #> 1 8.070000 #> 2 7.998760 #> 3 7.934597 #> 4 7.877057 #> 5 7.825408 #> 6 7.779299"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict metabolism from a fitted model. — predict_metab","title":"Predict metabolism from a fitted model. — predict_metab","text":"function metab_model_interface. Returns predictions (estimates) GPP, ER, K600.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict metabolism from a fitted model. — predict_metab","text":"","code":"predict_metab(   metab_model,   date_start = NA,   date_end = NA,   day_start = get_specs(metab_model)$day_start,   day_end = min(day_start + 24, get_specs(metab_model)$day_end),   ...,   attach.units = deprecated(),   use_saved = TRUE )  # S3 method for metab_bayes predict_metab(   metab_model,   date_start = NA,   date_end = NA,   ...,   attach.units = deprecated() )  # S3 method for metab_model predict_metab(   metab_model,   date_start = NA,   date_end = NA,   day_start = get_specs(metab_model)$day_start,   day_end = min(day_start + 24, get_specs(metab_model)$day_end),   ...,   attach.units = deprecated(),   use_saved = TRUE )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict metabolism from a fitted model. — predict_metab","text":"metab_model metabolism model, implementing metab_model_interface, use predicting metabolism date_start Date class convertible .Date. first date (inclusive) report metabolism predictions. NA, filtering done. date_end Date class convertible .Date. last date (inclusive) report metabolism predictions. NA, filtering done. day_start start time (inclusive) day's data number hours midnight begins date. example, day_start=-1.5 indicates data describing 2006-06-26 begin 2006-06-25 22:30, first observation time occurs time day_start fall exactly observation time. daily metabolism predictions, day_end - day_start probably equal 24 day's estimate representative 24-hour period. day_end end time (exclusive) day's data number hours midnight begins date. example, day_end=30 indicates data describing 2006-06-26 end last observation time occurs 2006-06-27 06:00. daily metabolism predictions, day_end - day_start probably equal 24 day's estimate representative 24-hour period. ... arguments passed class-specific implementations predict_metab attach.units (deprecated, effectively FALSE future) logical. units attached output? use_saved logical. OK use predictions saved model?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict metabolism from a fitted model. — predict_metab","text":"data.frame daily metabolism estimates. Columns include:  GPP numeric estimate Gross Primary Production, positive   realistic, \\(g O_2 m^{-2} d^{-1}\\) ER numeric estimate Ecosystem Respiration, negative   realistic, \\(g O_2 m^{-2} d^{-1}\\) K600 numeric estimate reaeration rate \\(d^{-1}\\)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Predict metabolism from a fitted model. — predict_metab","text":"metab_bayes: Pulls daily metabolism estimates Stan model results; looks GPP GPP_daily ER ER_daily among params_out (see specs), means can save just one () sets daily parameters running Stan model. Saving fewer parameters can help models run faster use less RAM. metab_model: implementation shared many model types","code":""},{"path":[]},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict metabolism from a fitted model. — predict_metab","text":"","code":"dat <- data_metab('3', day_start=12, day_end=36) mm <- metab_night(specs(mm_name('night')), data=dat) predict_metab(mm) #>         date GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper msgs.fit #> 1 2012-09-18   0        NA        NA -2.122498 -2.351240 -1.893755          #> 2 2012-09-19   0        NA        NA -2.927715 -3.233801 -2.621628          #> 3 2012-09-20   0        NA        NA -2.125522 -2.305859 -1.945185          #>   warnings errors #> 1                 #> 2                 #> 3                 predict_metab(mm, date_start=get_fit(mm)$date[2]) #>         date GPP GPP.lower GPP.upper        ER  ER.lower  ER.upper msgs.fit #> 1 2012-09-19   0        NA        NA -2.927715 -3.233801 -2.621628          #> 2 2012-09-20   0        NA        NA -2.125522 -2.305859 -1.945185          #>   warnings errors #> 1                 #> 2"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.metab_Kmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Override generic predict_metab for metab_Kmodel, which can't predict metab — predict_metab.metab_Kmodel","title":"Override generic predict_metab for metab_Kmodel, which can't predict metab — predict_metab.metab_Kmodel","text":"metab_Kmodel predicts K () daily timesteps usually knows nothing GPP ER. possible predict metabolism model. Try get_params() retrieve predicted values K600.daily.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.metab_Kmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Override generic predict_metab for metab_Kmodel, which can't predict metab — predict_metab.metab_Kmodel","text":"","code":"# S3 method for metab_Kmodel predict_metab(   metab_model,   date_start = NA,   date_end = NA,   day_start = NA,   day_end = NA,   ...,   attach.units = deprecated(),   use_saved = TRUE )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/predict_metab.metab_Kmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Override generic predict_metab for metab_Kmodel, which can't predict metab — predict_metab.metab_Kmodel","text":"metab_model metabolism model, implementing metab_model_interface, use predicting metabolism date_start Date class convertible .Date. first date (inclusive) report metabolism predictions. NA, filtering done. date_end Date class convertible .Date. last date (inclusive) report metabolism predictions. NA, filtering done. day_start start time (inclusive) day's data number hours midnight begins date. example, day_start=-1.5 indicates data describing 2006-06-26 begin 2006-06-25 22:30, first observation time occurs time day_start fall exactly observation time. daily metabolism predictions, day_end - day_start probably equal 24 day's estimate representative 24-hour period. day_end end time (exclusive) day's data number hours midnight begins date. example, day_end=30 indicates data describing 2006-06-26 end last observation time occurs 2006-06-27 06:00. daily metabolism predictions, day_end - day_start probably equal 24 day's estimate representative 24-hour period. ... arguments passed class-specific implementations predict_metab attach.units (deprecated, effectively FALSE future) logical. units attached output? use_saved logical. OK use predictions saved model?","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/prepdata_Kmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data_daily by aggregating any daily data, renaming K600.daily to K600.daily.obs,\n& setting data_daily$weight to reflect user weights & filters — prepdata_Kmodel","title":"Prepare data_daily by aggregating any daily data, renaming K600.daily to K600.daily.obs,\n& setting data_daily$weight to reflect user weights & filters — prepdata_Kmodel","text":"Prepare data_daily aggregating daily data, renaming K600.daily K600.daily.obs, & setting data_daily$weight reflect user weights & filters","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/prepdata_Kmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data_daily by aggregating any daily data, renaming K600.daily to K600.daily.obs,\n& setting data_daily$weight to reflect user weights & filters — prepdata_Kmodel","text":"","code":"prepdata_Kmodel(   data,   data_daily,   weights,   filters,   day_start,   day_end,   day_tests,   required_timestep )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/prepdata_Kmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data_daily by aggregating any daily data, renaming K600.daily to K600.daily.obs,\n& setting data_daily$weight to reflect user weights & filters — prepdata_Kmodel","text":"data unit data aggregate daily_data. may NULL. data_daily daily data prepare K modeling weights Kmodel, character vector indicating type weighting use. Set c() weights. One c(\"1/CI\", \"K600/CI\", c()). filters Kmodel, named numeric vector limits use filtering data_daily. Elements may include c(\"CI.max\",\"discharge.daily.max\",\"velocity.daily.max\"). element given, corresponding filter applied: K600.daily.upper-K600.daily.lower <= CI.max, discharge.daily <= discharge.daily.max, velocity.daily <= velocity.daily.max day_start start time (inclusive) day's data number hours midnight begins date. example, day_start=-1.5 indicates data describing 2006-06-26 begin 2006-06-25 22:30, first observation time occurs time day_start fall exactly observation time. metabolism models working single days input data, conventional/useful begin day evening , e.g., -1.5, end just next sunrise, e.g., 30. multiple consecutive days, may make sense start just sunrise (e.g., 4) end 24 hours later. nighttime regression, date assigned chunk data date whose evening contains data. default therefore 12 36 metab_night, times darkness used. day_end end time (exclusive) day's data number hours midnight begins date. example, day_end=30 indicates data describing 2006-06-26 end last observation time occurs 2006-06-27 06:00. See day_start recommended start end times. day_tests list tests conduct determine whether date worth data valid modeling. results tests combined result test implied required_timestep numeric passed model_fun ply_validity argument function. required_timestep NA numeric (length 1). numeric, timestep length days date must pass validity check (within tolerance 0.2% value required_timestep). result test combined results tests listed day_tests reported model_fun ply_validity argument function.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/prepdata_bayes.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for passing to Stan — prepdata_bayes","title":"Prepare data for passing to Stan — prepdata_bayes","text":"function accepts pre-validated data (though problems may discovered ). prepares data needed run Bayesian MCMC method estimate GPP, ER, K600.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/prepdata_bayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for passing to Stan — prepdata_bayes","text":"","code":"prepdata_bayes(data, data_daily, ply_date = NA, specs)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/prepdata_bayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for passing to Stan — prepdata_bayes","text":"data data.frame (tbl_df) input data temporal resolution raw observations (unit-value). Columns must names, units, format default. solar.time column must also timezone code ('tzone' attribute) 'UTC'. See 'Formatting data' section full description. data_daily data.frame containing inputs daily timestep. See 'Formatting data_daily' section full  description. ply_date modal date ply data data_daily,  date ply referred topresent. specs list model specifications parameters model.  Although may specified manually (just list), easier safer use specs generate list, set required parameters defaults depends model given model_name argument specs. help file  specs lists necessary parameters, describes  detail, gives default values.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/prepdata_bayes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for passing to Stan — prepdata_bayes","text":"list data input runstan_bayes","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/pretty_print_ddat.html","id":null,"dir":"Reference","previous_headings":"","what":"Format and print a summary of data frame of daily values — pretty_print_ddat","title":"Format and print a summary of data frame of daily values — pretty_print_ddat","text":"Compress error warning messages one column print first rows data","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/pretty_print_ddat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format and print a summary of data frame of daily values — pretty_print_ddat","text":"","code":"pretty_print_ddat(ddat, msg.col)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print.logs_metab.html","id":null,"dir":"Reference","previous_headings":"","what":"Print metab logs — print.logs_metab","title":"Print metab logs — print.logs_metab","text":"Print metab model compilation /fitting logs","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print.logs_metab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print metab logs — print.logs_metab","text":"","code":"# S3 method for logs_metab print(x, ...)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print.logs_metab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print metab logs — print.logs_metab","text":"x object print ... ignored; included compatibility `base::print`","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print.specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the specs object — print.specs","title":"Display the specs object — print.specs","text":"Print specs object console.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print.specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the specs object — print.specs","text":"","code":"# S3 method for specs print(x, ...)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print.specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the specs object — print.specs","text":"x specs list displayed. ... additional arguments passed inner functions","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the specs object — print_specs","title":"Display the specs object — print_specs","text":"Print specs object console.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the specs object — print_specs","text":"","code":"print_specs(object, header = \"Model specifications:\\n\", prefix = \"  \")"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/print_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the specs object — print_specs","text":"object specs list displayed. header line catted start printout prefix text prepend start line follows  header","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/revise.html","id":null,"dir":"Reference","previous_headings":"","what":"Change or add named elements of a list — revise","title":"Change or add named elements of a list — revise","text":"Primary use case revising list specifications originally created specs()","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/revise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change or add named elements of a list — revise","text":"","code":"revise(specs, ..., delete)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/revise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change or add named elements of a list — revise","text":"specs list specifications revise ... named values replace add specs delete vector names elements remove specs list","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/revise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change or add named elements of a list — revise","text":"","code":"sp <- specs(mm_name('bayes')) sp <- revise(sp,   model_name='b_np_oipi_tr_plrckm_mynewmodel.stan',   params_in=c(params_in,'my_new_param'), my_new_param=4)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/runstan_bayes.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Stan on a formatted data ply — runstan_bayes","title":"Run Stan on a formatted data ply — runstan_bayes","text":"Run Stan formatted data ply","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/runstan_bayes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Stan on a formatted data ply — runstan_bayes","text":"","code":"runstan_bayes(   data_list,   model_path,   model_name,   params_out,   split_dates,   keep_mcmc = FALSE,   n_chains = 4,   n_cores = 4,   burnin_steps = 1000,   saved_steps = 1000,   thin_steps = 1,   verbose = FALSE,   ... )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/runstan_bayes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Stan on a formatted data ply — runstan_bayes","text":"data_list formatted list inputs Stan model model_path Stan model file use, full file path model_name coded model name, mm_name, giving model structure params_out character vector parameters whose values MCMC runs recorded summarized keep_mcmc logical. TRUE, Stan output object saved. careful; can big, run many models might overwhelm R's memory. n_chains number chains run n_cores number cores apply run burnin_steps number steps per chain run ignore starting collect MCMC 'data' saved_steps number MCMC steps per chain save thin_steps number steps move saving another step. 1 means save steps. verbose logical. give status messages? ... ignored arguments","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/show-metab_model-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the metab_model object — show,metab_model-method","title":"Display the metab_model object — show,metab_model-method","text":"Print metab_model object console.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/show-metab_model-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the metab_model object — show,metab_model-method","text":"","code":"# S4 method for metab_model show(object)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/show-metab_model-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the metab_model object — show,metab_model-method","text":"object metab_model displayed.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/show-specs-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the specs object — show,specs-method","title":"Display the specs object — show,specs-method","text":"Print specs object console.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/show-specs-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the specs object — show,specs-method","text":"","code":"# S4 method for specs show(object)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/show-specs-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the specs object — show,specs-method","text":"object specs list displayed.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_Kb.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a lnK ~ lnQ relationship in the Kb format — sim_Kb","title":"Simulate a lnK ~ lnQ relationship in the Kb format — sim_Kb","text":"Uses linear interpolation among \"nodes\" (lnQ, lnK points) describe lnK ~ lnQ relationship","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_Kb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a lnK ~ lnQ relationship in the Kb format — sim_Kb","text":"","code":"sim_Kb(   K600_lnQ_nodes_centers,   K600_lnQ_cnode_meanlog,   K600_lnQ_cnode_sdlog,   K600_lnQ_nodediffs_meanlog,   K600_lnQ_nodediffs_sdlog )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_Kb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a lnK ~ lnQ relationship in the Kb format — sim_Kb","text":"K600_lnQ_nodes_centers data configuration argument pool_K600='binned'. numeric vector giving natural-log-space centers discharge bins. See also calc_bins K600_lnQ_cnode_meanlog sim model pool_K600='binned'. mean lognormal distribution describing y=K600 value middle (just past middle) node piecewise lnK ~ lnQ relationship K600_lnQ_cnode_sdlog sim model pool_K600='binned'. sd lognormal distribution describing y=K600 value middle (just past middle) node piecewise lnK ~ lnQ relationship K600_lnQ_nodediffs_meanlog sim model pool_K600='binned'. average (log space) difference ln(K) values successive nodes. non-zero value introduces trend K ~ Q. K600_lnQ_nodediffs_sdlog hyperparameter pool_K600='binned'. standard deviations differences estimated K600 successive lnQ_nodes (bins), means differences always zero","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_get_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a parameter from data_daily, specs, or both — sim_get_par","title":"Get a parameter from data_daily, specs, or both — sim_get_par","text":"Used get_params.metab_sim. Looks data_daily specs daily paramter, e.g., 'K600.daily'. present just one place, values used. present neither, error NULLs returned depending whether required=TRUE.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_get_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a parameter from data_daily, specs, or both — sim_get_par","text":"","code":"sim_get_par(par.name, specs, data_daily, eval_env, required = TRUE)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_get_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a parameter from data_daily, specs, or both — sim_get_par","text":"par.name parameter name. period.separated data_daily . Periods converted underscores searching specs parameter specs specifications list parameter values/functions drawn data_daily data.frame daily values parameter values drawn eval_env environment containing parameters already finalized, plus variable n containing number daily values required required logical. true parameter unavailable, error thrown.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_get_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a parameter from data_daily, specs, or both — sim_get_par","text":"list containing three vectors (NULLs) named specs,  data_daily, combo according source numbers   vector.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_pred_Kb.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict ln(K600) as Kb-style function of discharge — sim_pred_Kb","title":"Predict ln(K600) as Kb-style function of discharge — sim_pred_Kb","text":"Uses linear interpolation among \"nodes\" (lnQ, lnK points) predict daily values natural log K600, based lnK ~ lnQ relationship specified K600_lnQ_nodes_centers lnK600_lnQ_nodes","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_pred_Kb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict ln(K600) as Kb-style function of discharge — sim_pred_Kb","text":"","code":"sim_pred_Kb(K600_lnQ_nodes_centers, lnK600_lnQ_nodes, lnQ.daily)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/sim_pred_Kb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict ln(K600) as Kb-style function of discharge — sim_pred_Kb","text":"K600_lnQ_nodes_centers data configuration argument pool_K600='binned'. numeric vector giving natural-log-space centers discharge bins. See also calc_bins lnK600_lnQ_nodes sim model pool_K600='binned'. values lnK600 node. default value spec function computes lnK600s based simulated K~Q relationships. lnQ.daily vector daily values natural log discharge, e.g., log(data_daily$discharge.daily)","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a coherent list of model specs — specs","title":"Generate a coherent list of model specs — specs","text":"Generates internally consistent list model specifications may passed metab_bayes, metab_mle, etc. via specs argument. help file gives definitive list possible model specs, subset relevant given model_name. See 'Relevant arguments' section . Irrelevant arguments given model_name explicitly passed function (worry - just stop tell make mistake). Relevant arguments given model_name either default values (see Usage). Relevant arguments without default rarely overridden, values determined based arguments. Relevant arguments default can, often , overridden tailor model needs.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a coherent list of model specs — specs","text":"","code":"specs(   model_name = mm_name(),   engine,   day_start = 4,   day_end = 28,   day_tests = c(\"full_day\", \"even_timesteps\", \"complete_data\", \"pos_discharge\",     \"pos_depth\"),   required_timestep = NA,   init.GPP.daily = 8,   init.Pmax = 10,   init.alpha = 1e-04,   init.ER.daily = -10,   init.ER20 = -10,   init.K600.daily = 10,   split_dates,   keep_mcmcs = TRUE,   keep_mcmc_data = TRUE,   GPP_daily_mu = 3.1,   GPP_daily_lower = -Inf,   GPP_daily_sigma = 6,   alpha_meanlog = -4.6,   alpha_sdlog = 0.5,   Pmax_mu = 10,   Pmax_sigma = 7,   ER_daily_mu = -7.1,   ER_daily_upper = Inf,   ER_daily_sigma = 7.1,   K600_daily_meanlog = log(12),   K600_daily_meanlog_meanlog = log(12),   K600_daily_meanlog_sdlog = 1.32,   lnK600_lnQ_intercept_mu = 2,   lnK600_lnQ_intercept_sigma = 2.4,   lnK600_lnQ_slope_mu = 0,   lnK600_lnQ_slope_sigma = 0.5,   K600_lnQ_nodes_centers = -3:3,   K600_lnQ_nodediffs_sdlog = 0.5,   K600_lnQ_nodes_meanlog = rep(log(12), length(K600_lnQ_nodes_centers)),   K600_lnQ_nodes_sdlog = rep(1.32, length(K600_lnQ_nodes_centers)),   K600_daily_sdlog = switch(mm_parse_name(model_name)$pool_K600, none = 1,     normal_sdfixed = 0.05, NA),   K600_daily_sigma = switch(mm_parse_name(model_name)$pool_K600, linear_sdfixed = 10,     binned_sdfixed = 5, NA),   K600_daily_sdlog_sigma = switch(mm_parse_name(model_name)$pool_K600, normal = 0.05,     NA),   K600_daily_sigma_sigma = switch(mm_parse_name(model_name)$pool_K600, linear = 1.2,     binned = 0.24, NA),   err_obs_iid_sigma_scale = 0.03,   err_proc_iid_sigma_scale = 5,   err_proc_acor_phi_alpha = 1,   err_proc_acor_phi_beta = 1,   err_proc_acor_sigma_scale = 1,   err_mult_GPP_sdlog_sigma = 1,   params_in,   params_out,   n_chains = 4,   n_cores = 4,   burnin_steps = 500,   saved_steps = 500,   thin_steps = 1,   verbose = FALSE,   weights = c(\"K600/CI\"),   filters = c(CI.max = NA, discharge.daily.max = NA, velocity.daily.max = NA),   predictors = c(\"discharge.daily\"),   transforms = c(K600 = \"log\", date = NA, velocity.daily = \"log\", discharge.daily =     \"log\"),   other_args = c(),   K600_lnQ_cnode_meanlog = log(6),   K600_lnQ_cnode_sdlog = 1,   K600_lnQ_nodediffs_meanlog = 0.2,   lnK600_lnQ_nodes = function(K600_lnQ_nodes_centers, K600_lnQ_cnode_meanlog,     K600_lnQ_cnode_sdlog, K600_lnQ_nodediffs_meanlog, K600_lnQ_nodediffs_sdlog, ...) {         sim_Kb(K600_lnQ_nodes_centers, K600_lnQ_cnode_meanlog, K600_lnQ_cnode_sdlog,     K600_lnQ_nodediffs_meanlog, K600_lnQ_nodediffs_sdlog) },   discharge_daily = function(n, ...) rnorm(n, 20, 3),   DO_mod_1 = NULL,   K600_daily = function(n, K600_daily_predlog = log(10), ...) pmax(0, rnorm(n,     K600_daily_predlog, 4)),   GPP_daily = function(n, ...) pmax(0, rnorm(n, 8, 4)),   Pmax = function(n, ...) pmax(0, rnorm(n, 10, 2)),   alpha = function(n, ...) pmax(0, rnorm(n, 1e-04, 2e-05)),   ER_daily = function(n, ...) pmin(0, rnorm(n, -10, 5)),   ER20 = function(n, ...) pmin(0, rnorm(n, -10, 4)),   err_obs_sigma = 0.01,   err_obs_phi = 0,   err_proc_sigma = 0.2,   err_proc_phi = 0,   err_round = NA,   sim_seed = NA )"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a coherent list of model specs — specs","text":"model_name character string identifying model features. Use mm_name create valid name based desired attributes, mm_valid_names see valid names. Two alternatives names given mm_valid_names() also accepted: (1) model type accepted type argument mm_name, used create default model name model type, (2) full model file path custom Bayesian models, long basename(model_name) can still parsed correctly mm_parse_name() file exists. case file may specified either file path relative streamMetabolizer models directory (first assumption; directory can found system.file(\"models\", package=\"streamMetabolizer\")) absolute path path relative current working directory (second assumption, first assumption turns files given name). engine software function use fitting model. specified via mm_name rather . type='bayes', always 'stan' indicating software package use MCMC process (see http://mc-stan.org/). types c('mle','night','sim') one option per model (R functions; need named noted suffix model name, e.g., \"m_np_oi_tr_plrckm.nlm\" uses nlm() model fitting). type='Kmodel', name interpolation regression method relating K predictor[s] choice. One c(\"mean\", \"lm\", \"loess\"). day_start start time (inclusive) day's data number hours midnight begins date. example, day_start=-1.5 indicates data describing 2006-06-26 begin 2006-06-25 22:30, first observation time occurs time day_start fall exactly observation time. metabolism models working single days input data, conventional/useful begin day evening , e.g., -1.5, end just next sunrise, e.g., 30. multiple consecutive days, may make sense start just sunrise (e.g., 4) end 24 hours later. nighttime regression, date assigned chunk data date whose evening contains data. default therefore 12 36 metab_night, times darkness used. day_end end time (exclusive) day's data number hours midnight begins date. example, day_end=30 indicates data describing 2006-06-26 end last observation time occurs 2006-06-27 06:00. See day_start recommended start end times. day_tests list tests conduct determine whether date worth data valid modeling. results tests combined result test implied required_timestep numeric passed model_fun ply_validity argument function. required_timestep NA numeric (length 1). numeric, timestep length days date must pass validity check (within tolerance 0.2% value required_timestep). result test combined results tests listed day_tests reported model_fun ply_validity argument function. init.GPP.daily inital value daily mean GPP (gO2 d^-1 m^-2) use NLM fitting process. See MLE Initial Values section Details. init.Pmax initial value Pmax (gO2 d^-1 m^-2) use GPP versus light relationship NLM fitting process. Pmax maximum GPP value GPP-light curve. See MLE Initial Values section Details. init.alpha inital value alpha (gO2 s d^-1 umol^-1, .e., units GPP/light) use GPP versus light relationship NLM fitting process. alpha initial slope GPP-light curve. See MLE Initial Values section Details. init.ER.daily inital value daily mean ER (gO2 d^-1 m^-2) use NLM fitting process. See MLE Initial Values section Details. init.ER20 initial value ER20 (gO2 d^-1 m^-2) use ER versus temperature relationship NLM fitting process. ER20 respiration rate 20 degrees C. See MLE Initial Values section Details. init.K600.daily inital value daily mean K600 (d^-1) use NLM fitting process. Ignored K600 supplied data_daily, except dates K600 NA. dates, K600_init must numeric (non-NA) value, used estimate K600 dates. See MLE Initial Values section Details. split_dates logical indicating whether data split daily chunks first (TRUE) processed within one big model (FALSE). valid days differ timestep length, split_dates need TRUE; otherwise, FALSE generally efficient. FALSE also appropriate solution hierarchical model pools information error, K600, etc. across days. keep_mcmcs TRUE, FALSE, (nopool models) vector dates (coerced .Date character, etc.) indicating whether keep mcmc model objects (TRUE), none (FALSE), specific dates. default TRUE objects often need inspecting. keep_mcmc_data FALSE, TRUE, (nopool models) vector dates (coerced .Date character, etc.) indicating whether keep mcmc model objects (TRUE), none (FALSE), specific dates. default FALSE objects can large. GPP_daily_mu mean dnorm distribution GPP_daily, daily rate gross primary production GPP_daily_lower lower bound every fitted value GPP_daily, daily rate gross primary production. Use values -Inf caution, recognizing sometimes input data unmodelable negative estimate GPP_daily (unconstrained) indication. GPP_daily_sigma standard deviation dnorm distribution GPP_daily, daily rate gross primary production alpha_meanlog mean dlnorm (lognormal) distribution alpha, daily initial slope Jassby-Platt saturating curve relating GPP light alpha_sdlog standard deviation parameter dlnorm (lognormal) distribution alpha, daily initial slope Jassby-Platt saturating curve relating GPP light. Pmax_mu mean dnorm (normal) distribution Pmax, daily maximum GPP value Jassby-Platt saturating curve relating GPP light. Pmax_sigma standard deviation dnorm (normal) distribution Pmax, daily maximum GPP value Jassby-Platt saturating curve relating GPP light. ER_daily_mu mean dnorm distribution ER_daily, daily rate ecosystem respiration ER_daily_upper upper (less negative) bound every fitted value ER_daily, daily rate ecosystem respiration. Use values Inf caution, recognizing sometimes input data unmodelable positive estimate ER_daily (unconstrained) indication. ER_daily_sigma standard deviation dnorm distribution ER_daily, daily rate ecosystem respiration K600_daily_meanlog Applies pool_K600 'none'. mean dlnorm distribution K600_daily, daily rate reaeration K600_daily_meanlog_meanlog hyperparameter pool_K600='normal'. mean parameter (meanlog_meanlog) lognormal distribution meanlog K ~ lN(meanlog, sdlog), meanlog ~ lN(meanlog_meanlog, meanlog_sdlog) K600_daily_meanlog_sdlog hyperparameter pool_K600='normal'. standard deviation parameter (meanlog_sdlog) lognormal distribution meanlog K ~ lN(meanlog, sdlog), meanlog ~ lN(meanlog_meanlog, meanlog_sdlog) lnK600_lnQ_intercept_mu hyperparameter pool_K600 == 'linear'. mean prior distribution intercept parameter log(K600) ~ lnK600_lnQ_intercept + lnK600_lnQ_slope*log(Q) lnK600_lnQ_intercept_sigma hyperparameter pool_K600 == 'linear'. standard deviation prior distribution intercept parameter log(K600) ~ lnK600_lnQ_intercept + lnK600_lnQ_slope*log(Q) lnK600_lnQ_slope_mu hyperparameter pool_K600='linear'. mean prior distribution slope parameter log(K600) ~ lnK600_lnQ_intercept + lnK600_lnQ_slope*log(Q) lnK600_lnQ_slope_sigma hyperparameter pool_K600='linear'. standard deviation prior distribution slope parameter log(K600) ~ lnK600_lnQ_intercept + lnK600_lnQ_slope*log(Q) K600_lnQ_nodes_centers data configuration argument pool_K600='binned'. numeric vector giving natural-log-space centers discharge bins. See also calc_bins K600_lnQ_nodediffs_sdlog hyperparameter pool_K600='binned'. standard deviations differences estimated K600 successive lnQ_nodes (bins), means differences always zero K600_lnQ_nodes_meanlog hyperparameter pool_K600='binned'. means lognormal prior distributions K600_lnQ_nodes parameters. K600_lnQ_nodes_sdlog hyperparameter pool_K600='binned'. standard deviations lognormal prior distributions K600_lnQ_nodes parameters. K600_daily_sdlog lognormal scale parameter (standard deviation) dlnorm distribution meanlog equal K600_daily_meanlog (pool_K600 'none') K600_daily_predlog (pool_K600 'normal_sdfixed') K600_daily, daily rate reaeration corrected temperature diffusivity oxygen K600_daily_sigma standard deviation dnorm distribution mean equal exp(K600_daily_predlog) (applicable pool_K600 'linear_sdfixed' 'binned_sdfixed') K600_daily, daily rate reaeration corrected temperature diffusivity oxygen K600_daily_sdlog_sigma hyperparameter pool_K600 c('normal'). scale (= sigma) parameter half-normal distribution sdlog K ~ lN(meanlog, sdlog), sdlog ~ halfnormal(0, sigma=sdlog_sigma). Visualize PDF K600_daily_sdlog plot_distribs. K600_daily_sigma_sigma hyperparameter pool_K600 c('linear','binned'). scale (= sigma) parameter half-normal distribution sigma K ~ lN(meanlog, sigma), sigma ~ halfnormal(0, sigma=sigma_sigma). Visualize PDF K600_daily_sdlog plot_distribs. err_obs_iid_sigma_scale scale (= sigma) parameter half-Cauchy distribution err_obs_iid_sigma, standard deviation observation error. Visualize PDF err_obs_iid_sigma plot_distribs. err_proc_iid_sigma_scale scale (= sigma) parameter half-Cauchy distribution err_proc_iid_sigma, standard deviation uncorrelated (IID) component process [& sometimes observation] error. Visualize PDF err_proc_iid_sigma plot_distribs. err_proc_acor_phi_alpha alpha (= shape1) parameter beta distribution err_proc_acor_phi, autocorrelation coefficient autocorrelated component process [& sometimes observation] error. Visualize PDF err_proc_acor_phi plot_distribs. err_proc_acor_phi_beta beta (= shape2) parameter beta distribution err_proc_acor_phi, autocorrelation coefficient autocorrelated component process [& sometimes observation] error. Visualize PDF err_proc_acor_phi plot_distribs. err_proc_acor_sigma_scale scale (= sigma) parameter half-Cauchy distribution err_proc_acor_sigma, standard deviation autocorrelated component process [& sometimes observation] error. Visualize PDF err_proc_acor_sigma plot_distribs. err_mult_GPP_sdlog_sigma scale parameter half-normal distribution err_mult_GPP_sdlog, scale parameter lognormal distribution err_mult_GPP. err_mult_GPP multiplied light normalized daily mean 1 multiplied GPP_daily estimate GPP_inst. effect special kind process error proportional light (noise) applied GPP rather dDO/dt. params_in Character vector hyperparameters pass specs list data list MCMC run. automatically generated specs() call; need revised using custom model requires different hyperparameters. params_out character vector parameters whose values MCMC runs recorded summarized n_chains number chains run n_cores number cores apply run burnin_steps number steps per chain run ignore starting collect MCMC 'data' saved_steps number MCMC steps per chain save thin_steps number steps move saving another step. 1 means save steps. verbose logical. give status messages? weights Kmodel, character vector indicating type weighting use. Set c() weights. One c(\"1/CI\", \"K600/CI\", c()). filters Kmodel, named numeric vector limits use filtering data_daily. Elements may include c(\"CI.max\",\"discharge.daily.max\",\"velocity.daily.max\"). element given, corresponding filter applied: K600.daily.upper-K600.daily.lower <= CI.max, discharge.daily <= discharge.daily.max, velocity.daily <= velocity.daily.max predictors Kmodel, character vector variables (column names data data_daily) use predicting K. Leave blank set c() predictors. Otherwise, one may included: c(\"date\", \"velocity.daily\", \"discharge.daily\"). transforms Kmodel, named character vector names functions (probably 'log' NA) apply K600.daily /predictors. K600.daily probably logged. vector names must match values predictors, although elements predictors must included transforms. Recommended transforms include c(K600.daily='log', date=NA, velocity.daily=\"log\", discharge.daily=\"log\") other_args arguments passed fitting function given specs$engine. na.rm=TRUE already passed mean (actually implemented sum, anyway). K600_lnQ_cnode_meanlog sim model pool_K600='binned'. mean lognormal distribution describing y=K600 value middle (just past middle) node piecewise lnK ~ lnQ relationship K600_lnQ_cnode_sdlog sim model pool_K600='binned'. sd lognormal distribution describing y=K600 value middle (just past middle) node piecewise lnK ~ lnQ relationship K600_lnQ_nodediffs_meanlog sim model pool_K600='binned'. average (log space) difference ln(K) values successive nodes. non-zero value introduces trend K ~ Q. lnK600_lnQ_nodes sim model pool_K600='binned'. values lnK600 node. default value spec function computes lnK600s based simulated K~Q relationships. discharge_daily Daily values, function generate daily values, mean daily discharge m^3 s^-1. Fixed values may alternatively specified discharge.daily data_daily passed metab. DO_mod_1 Daily values, function generate daily values, first .mod value date. Fixed values may alternatively specified .mod.1 data_daily passed metab. may implied .obs column data, first values date extracted metab(). K600_daily Daily values, function generate daily values, reaeration rate constant K600. Fixed values may alternatively specified K600.daily data_daily passed metab. GPP_daily Daily values, function generate daily values, photosynthesis parameter GPP_daily. Fixed values may alternatively specified GPP.daily data_daily passed metab. Pmax Daily values, function generate daily values, photosynthesis parameter Pmax. Fixed values may alternatively specified Pmax data_daily passed metab. alpha Daily values, function generate daily values, photosynthesis parameter alpha. Fixed values may alternatively specified alpha data_daily passed metab. ER_daily Daily values, function generate daily values, respiration parameter ER_daily. Fixed values may alternatively specified ER.daily data_daily passed metab. ER20 Daily values, function generate daily values, respiration parameter ER20. Fixed values may alternatively specified ER20 data_daily passed metab. err_obs_sigma Daily values, function generate daily values, sd observation error, 0 observation error. Observation errors applied .mod generating full time series modeled values. err_obs_phi Daily values, function generate daily values, autocorrelation coefficient observation errors, 0 uncorrelated errors. err_proc_sigma Daily values, function generate daily values, sd process error, 0 process error. Process errors applied time step, therefore propagate next timestep. err_proc_phi Daily values, function generate daily values, autocorrelation coefficient process errors, 0 uncorrelated errors. err_round single value indicating whether simulated .obs rounded simulate common practice reporting significant figures . Use NA effect, integer digits argument round simulated .obs rounded given number digits beyond .. sim_seed NA specify call predict_DO generate new values, integer, seed argument set.seed, specifying seed set every execution predict_DO /predict_metab.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/specs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a coherent list of model specs — specs","text":"internally consistent list arguments may passed  metab specs argument","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/specs.html","id":"relevant-arguments","dir":"Reference","previous_headings":"","what":"Relevant arguments","title":"Generate a coherent list of model specs — specs","text":"* metab_bayes: Always relevant: model_name, engine, split_dates,   keep_mcmcs, keep_mcmc_data, day_start, day_end, day_tests, ER_daily_mu,   ER_daily_sigma, params_in, params_out, n_chains, n_cores, burnin_steps,   saved_steps, thin_steps, verbose. need arguments depends   features model structure, mm_parse_name(model_name): GPP_fun=='linlight' GPP_daily_mu,   GPP_daily_sigma, GPP_fun=='satlight'   alpha_meanlog, alpha_sdlog, Pmax_mu, Pmax_sigma.   pool_K600=='none' K600_daily_meanlog, K600_daily_sdlog. pool_K600=='normal' K600_daily_meanlog_meanlog,   K600_daily_meanlog_sdlog, K600_daily_sdlog_sigma.   pool_K600=='linear' lnK600_lnQ_intercept_mu,   lnK600_lnQ_intercept_sigma, lnK600_lnQ_slope_mu, lnK600_lnQ_slope_sigma,   K600_daily_sigma_sigma. pool_K600=='binned'   K600_lnQ_nodes_centers, K600_lnQ_nodediffs_sdlog,   K600_lnQ_nodes_meanlog, K600_lnQ_nodes_sdlog, K600_daily_sigma_sigma. err_obs_iid err_obs_iid_sigma_scale.   err_proc_acor err_proc_acor_phi_alpha,   err_proc_acor_phi_beta, err_proc_acor_sigma_scale.   err_proc_iid err_proc_iid_sigma_scale.   err_proc_GPP err_mult_GPP_sdlog_sigma. * metab_mle: model_name, day_start, day_end, day_tests,   init.GPP.daily, init.Pmax, init.alpha, init.ER.daily, init.ER20,   init.K600.daily * metab_night: model_name, day_start, day_end, day_tests * metab_Kmodel: model_name, engine, day_start, day_end, day_tests,   weights, filters, predictors, transforms, other_args. Note   defaults weights, predictors, filters,   transforms adjusted according engine implied   model_name. * metab_sim: model_name, day_start, day_end, day_tests,   err_obs_sigma, err_obs_phi, err_proc_sigma, err_proc_phi, sim_seed.   arguments whose period-separated name occurs default data_daily   argument metab(sim) can specified NULL, numeric,   function called time predict_DO predict_metab   called model. given function, argument called   already-evaluated parameters (including contents data_daily   n, number dates) passed arguments; example, K600_daily   can see n, discharge.daily, GPP_daily can see n, discharge.daily,   K600.daily.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/specs.html","id":"mle-initial-values","dir":"Reference","previous_headings":"","what":"MLE Initial Values","title":"Generate a coherent list of model specs — specs","text":"metab_mle models (maximum likelihood estimation), specification   arguments whose names begin init applicable.   arguments required depends value model_name can   determined calling grep('^init.', names(specs(mname)),   value=TRUE) model name mname supplying   arguments.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/specs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a coherent list of model specs — specs","text":"","code":"specs(mm_name(type='mle', err_obs_iid=FALSE, err_proc_iid=TRUE)) #> Model specifications: #>   model_name        m_np_pi_tr_plrckm.nlm                                        #>   day_start         4                                                            #>   day_end           28                                                           #>   day_tests         full_day, even_timesteps, complete_data, pos_discharge, p... #>   required_timestep NA                                                           #>   init.GPP.daily    8                                                            #>   init.ER.daily     -10                                                          #>   init.K600.daily   10                                                           specs(mm_name(type='bayes', pool_K600='normal')) #> Model specifications: #>   model_name                 b_Kn_oipi_tr_plrckm.stan                            #>   engine                     stan                                                #>   split_dates                FALSE                                               #>   keep_mcmcs                 TRUE                                                #>   keep_mcmc_data             TRUE                                                #>   day_start                  4                                                   #>   day_end                    28                                                  #>   day_tests                  full_day, even_timesteps, complete_data, pos_dis... #>   required_timestep          NA                                                  #>   GPP_daily_mu               3.1                                                 #>   GPP_daily_lower            -Inf                                                #>   GPP_daily_sigma            6                                                   #>   ER_daily_mu                -7.1                                                #>   ER_daily_upper             Inf                                                 #>   ER_daily_sigma             7.1                                                 #>   K600_daily_meanlog_meanlog 2.484906649788                                      #>   K600_daily_meanlog_sdlog   1.32                                                #>   K600_daily_sdlog_sigma     0.05                                                #>   err_obs_iid_sigma_scale    0.03                                                #>   err_proc_iid_sigma_scale   5                                                   #>   params_in                  GPP_daily_mu, GPP_daily_lower, GPP_daily_sigma, ... #>   params_out                 GPP, ER, DO_R2, GPP_daily, ER_daily, K600_daily,... #>   n_chains                   4                                                   #>   n_cores                    4                                                   #>   burnin_steps               500                                                 #>   saved_steps                500                                                 #>   thin_steps                 1                                                   #>   verbose                    FALSE"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Functions in package streamMetabolizer — streamMetabolizer-deprecated","title":"Deprecated Functions in package streamMetabolizer — streamMetabolizer-deprecated","text":"functions provided compatibility older versions  streamMetabolizer , may defunct soon next  release.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer-deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deprecated Functions in package streamMetabolizer — streamMetabolizer-deprecated","text":"calc_DO_deficit - instead, subtract .obs output calc_DO_sat calc_DO_at_sat - use calc_DO_sat instead calc_is_daytime - like want function, submit GitHub issue keep calc_sun_rise_set - like want function, submit GitHub issue keep functions currently exported soon internal-. encouraged use . convert_date_to_doyhr convert_doyhr_to_date lookup_google_timezone - use lookup_timezone instead","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for calculating ecosystem metabolism in streams — streamMetabolizer","title":"Functions for calculating ecosystem metabolism in streams — streamMetabolizer","text":"package uses inverse modeling estimate aquatic photosynthesis respiration (collectively, metabolism) time series data dissolved oxygen, water temperature, depth, light. package assists data preparation, handles data gaps modeling, provides tabular graphical reports model outputs. Several time-honored methods implemented along many promising new variants produce accurate precise metabolism estimates.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions for calculating ecosystem metabolism in streams — streamMetabolizer","text":"See http://usgs-r.github.io/streamMetabolizer vignettes web.","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer.html","id":"calculate-new-input-variables","dir":"Reference","previous_headings":"","what":"Calculate new input variables","title":"Functions for calculating ecosystem metabolism in streams — streamMetabolizer","text":"calc_depth calc_DO_sat calc_light","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer.html","id":"convert-existing-input-variables","dir":"Reference","previous_headings":"","what":"Convert existing input variables","title":"Functions for calculating ecosystem metabolism in streams — streamMetabolizer","text":"convert_date_to_doyhr convert_localtime_to_UTC convert_UTC_to_solartime convert_k600_to_kGAS convert_PAR_to_SW","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer.html","id":"model-metabolism","dir":"Reference","previous_headings":"","what":"Model metabolism","title":"Functions for calculating ecosystem metabolism in streams — streamMetabolizer","text":"mm_name 1. Choose model structure specs 2. Set specifications metab 3. Fit model","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer.html","id":"inspect-model-results","dir":"Reference","previous_headings":"","what":"Inspect model results","title":"Functions for calculating ecosystem metabolism in streams — streamMetabolizer","text":"predict_metab predict_DO plot_metab_preds plot_DO_preds get_params get_fit get_mcmc (Bayesian models ) get_fitting_time","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/streamMetabolizer.html","id":"inspect-model-inputs-properties","dir":"Reference","previous_headings":"","what":"Inspect model inputs/properties","title":"Functions for calculating ecosystem metabolism in streams — streamMetabolizer","text":"get_specs get_data get_data_daily get_info get_version","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/summarize_stopwarn_msgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a vector of warning or error messages — summarize_stopwarn_msgs","title":"Summarize a vector of warning or error messages — summarize_stopwarn_msgs","text":"Split ;-separated warning/error messages condense counts unique message","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/summarize_stopwarn_msgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a vector of warning or error messages — summarize_stopwarn_msgs","text":"","code":"summarize_stopwarn_msgs(msgs)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/to_degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert radians to degrees — to_degrees","title":"Convert radians to degrees — to_degrees","text":"Convert radians degrees","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/to_degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert radians to degrees — to_degrees","text":"","code":"to_degrees(radians)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/to_degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert radians to degrees — to_degrees","text":"radians angle radians","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/to_degrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert radians to degrees — to_degrees","text":"angle degrees","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/to_radians.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert degrees to radians — to_radians","title":"Convert degrees to radians — to_radians","text":"Convert degrees radians","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/to_radians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert degrees to radians — to_radians","text":"","code":"to_radians(degrees)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/to_radians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert degrees to radians — to_radians","text":"degrees angle degrees","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/to_radians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert degrees to radians — to_radians","text":"angle radians","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/unitted_deprecate_warn.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn about deprecation of a units-related argument or function — unitted_deprecate_warn","title":"Warn about deprecation of a units-related argument or function — unitted_deprecate_warn","text":"Warn deprecation units-related argument function","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/unitted_deprecate_warn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn about deprecation of a units-related argument or function — unitted_deprecate_warn","text":"","code":"unitted_deprecate_warn(what)"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/zz_build_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate doc text for the `metab()` documentation — zz_build_docs","title":"Generate doc text for the `metab()` documentation — zz_build_docs","text":"Results get written man-roxygen/metab_data.R","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/zz_build_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate doc text for the `metab()` documentation — zz_build_docs","text":"","code":"zz_build_docs()"},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/zz_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a data.frame for inclusion in a roxygen header — zz_tabular","title":"Format a data.frame for inclusion in a roxygen header — zz_tabular","text":"Modified Hadley Wickham's function http://r-pkgs..co.nz/man.html","code":""},{"path":"http://usgs-r.github.io/streamMetabolizer/reference/zz_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a data.frame for inclusion in a roxygen header — zz_tabular","text":"","code":"zz_tabular(df, bold_headers = TRUE, code = FALSE, ...)"}]
